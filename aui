#!/bin/bash
#-------------------------------------------------------------------------------
#Created by helmuthdu mailto: helmuthdu[at]gmail[dot]com
#Inspired by Andreas Freitag, aka nexxx script
#-------------------------------------------------------------------------------
#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with this program.  If not, see <http://www.gnu.org/licenses/>.
#-------------------------------------------------------------------------------
# Run this script after your first boot with archlinux (as root)

KDE=0
LXDE=0
XFCE=0
GNOME=0
OPENBOX=0

YAOURT=0
PACKER=0

BASICSETUP=0
DESKTOPENVIRONMENT=0
ACCESSORIESAPPS=0
DEVELOPMENTAPPS=0
OFFICEAPPS=0
SYSTEMAPPS=0
GRAPHICSAPPS=0
INTERNETAPPS=0
AUDIOAPPS=0
VIDEOAPPS=0
LAMP=0
GAMES=0
FONTS=0
FONTSCONFIG=0
CLEANPACKAGES=0

ARCHI=`uname -m`

# AUTOMATICALLY DETECTS THE SYSTEM LANGUAGE BASED ON YOUR RC.CONF#{{{
    LOCATION=`cat /etc/rc.conf | sed -n '/LOCALE=/p' | sed '1!d' | cut -c9-13`
    #KDE #{{{
    if [ $LOCATION = "pt_BR" ] || [ $LOCATION = "en_GB" ] || [ $LOCATION = "zh_CN" ]; then
        LOCATION_KDE=`echo $LOCATION | tr '[:upper:]' '[:lower:]'`
    elif [ $LOCATION = "en_US" ]; then
        LOCATION_KDE="en_gb"
    else
        LOCATION_KDE=`echo $LOCATION | cut -d\_ -f1`
    fi
    #}}}
    #FIREFOX #{{{
    if [ $LOCATION = "pt_BR" ] || [ $LOCATION = "pt_PT" ] || [ $LOCATION = "en_GB" ] || [ $LOCATION = "es_AR" ] || [ $LOCATION = "es_ES" ] || [ $LOCATION = "zh_CN" ]; then
        LOCATION_FF=`echo $LOCATION | tr '[:upper:]' '[:lower:]' | sed 's/_/-/'`
    elif [ $LOCATION = "en_US" ]; then
        LOCATION_FF="en-gb"
    else
        LOCATION_FF=`echo $LOCATION | cut -d\_ -f1`
    fi
    #}}}
    #HUNSPELL #{{{
    if [ $LOCATION = "pt_BR" ]; then
        LOCATION_HS=`echo $LOCATION | tr '[:upper:]' '[:lower:]' | sed 's/_/-/'`
    elif [ $LOCATION = "pt_PT" ]; then
        LOCATION_HS="pt_pt"
    else
        LOCATION_HS=`echo $LOCATION | cut -d\_ -f1`
    fi
    #}}}
    #LIBREOFFICE #{{{
    if [ $LOCATION = "pt_BR" ] || [ $LOCATION = "en_GB" ] || [ $LOCATION = "en_US" ] || [ $LOCATION = "zh_CN" ]; then
        LOCATION_LO=`echo $LOCATION | sed 's/_/-/'`
    else
        LOCATION_LO=`echo $LOCATION | cut -d\_ -f1`
    fi
    #}}}
#}}}

function question_for_answer(){ #{{{
    read -p "$1 [y][N]: " OPTION
    OPTION=`echo "$OPTION" | tr '[:upper:]' '[:lower:]'`
    echo ""
} #}}}
function print_line(){ #{{{
    printf "%$(tput cols)s\n"|tr ' ' '-'
} #}}}
function print_title (){ #{{{
    clear
    print_line
    echo -e "# $1"
    print_line
    echo ""
} #}}}
function add_daemon(){ #{{{
    remove_daemon "$1"
    sed -i '/DAEMONS[=]/s/\(.*\)\>/& '"$1"'/' /etc/rc.conf
} #}}}
function remove_daemon(){ #{{{
    sed -i '/DAEMONS[=]/s/'"$1"' //' /etc/rc.conf
} #}}}
function add_module(){ #{{{
    remove_module "$1"
    sed -i '/MODULES[=]/s/\(.*\)\>/& '"$1"'/' /etc/rc.conf
    #sed -i '/MODULES[=]/s/^[^ ]*\>/& '"$1"'/' /etc/rc.conf
} #}}}
function remove_module(){ #{{{
    sed -i '/MODULES[=]/s/'"$1"' //' /etc/rc.conf
} #}}}
function checkpackage(){ #{{{
    if pacman -Q $1 &>/dev/null ; then
        return 0
    else
        return 1
    fi
} #}}}
function checkbox(){ #{{{
    [[ $1 -eq 1 ]] && echo "[X]" || echo "[ ]"
} #}}}
function checkbox_package(){ #{{{
    if checkpackage $1; then
        checkbox 1
    else
        checkbox 0
    fi
} #}}}
function package_manager(){ #{{{
    if ! checkpackage $1; then
        for PACKAGE in $1; do
            if ! checkpackage "$PACKAGE" ; then
                if [ "$YAOURT" -eq 1 ]; then
                    su -l $USERNAME --command="yaourt -S --noconfirm $PACKAGE"
                else
                    su -l $USERNAME --command="packer -S --noconfirm $PACKAGE"
                fi
                #FORCE CHECK #{{{
                if ! checkpackage "$PACKAGE" ; then
                    question_for_answer "Package $PACKAGE not installed, try install again?"
                    if [ $OPTION = "y" ]; then
                        if [ "$YAOURT" -eq 1 ]; then
                            su -l $USERNAME --command="yaourt -S $PACKAGE"
                        else
                            su -l $USERNAME --command="packer -S --skipinteg $PACKAGE"
                        fi
                    fi
                fi
                #}}}
            fi
        done
    else
        pacman -Rsn $1
        pause_function
    fi
} #}}}
function package_install(){ #{{{
    for PACKAGE in $1; do
        if ! checkpackage "$PACKAGE" ; then
            if [ "$YAOURT" -eq 1 ]; then
                su -l $USERNAME --command="yaourt -S --noconfirm $PACKAGE"
            else
                su -l $USERNAME --command="packer -S --noconfirm $PACKAGE"
            fi
            #FORCE CHECK #{{{
            if ! checkpackage "$PACKAGE" ; then
                question_for_answer "Package $PACKAGE not installed, try install again?"
                if [ $OPTION = "y" ]; then
                    if [ "$YAOURT" -eq 1 ]; then
                        su -l $USERNAME --command="yaourt -S $PACKAGE"
                    else
                        su -l $USERNAME --command="packer -S --skipinteg $PACKAGE"
                    fi
                fi
            fi
            #}}}
        else
            echo -e "Package $PACKAGE already installed"
        fi
    done
} #}}}
function install_status(){ #{{{
    if [ $? -ne 0 ] ; then
        CURRENT_STATUS=-1
    else
        CURRENT_STATUS=1
    fi
} #}}}
function pause_function(){ #{{{
    print_line
    read -e -sn 1 -p "Press any key to continue..."
} #}}}
function sumary(){ #{{{
    case $CURRENT_STATUS in
        0)
            print_line
            echo "$1 not successfull (Canceled)"
            ;;
        -1)
            print_line
            echo "$1 not successfull (Error)"
            ;;
        1)
            print_line
            echo "$1 successfull"
            ;;
        *)
            print_line
            echo "WRONG ARG GIVEN"
            ;;
    esac
} #}}}
function reboot_now(){ #{{{
    question_for_answer "Reboot now?"
    case "$OPTION" in
        "y")
            echo "Thanks for using the Archlinux Ultimate Install script by helmuthdu"
            echo "Your Computer will now restart"
            pause_function
            reboot
            exit 0
            ;;
        *)
            ;;
    esac
} #}}}

#WELCOME {{{
function welcome(){
    clear
    echo "Welcome to the Archlinux Ultimate install script by helmuthdu"
    print_line
    echo "Requirements:"
    echo "-> Archlinux installation"
    echo "-> Run script as root user"
    echo "-> Working internet connection"
    print_line
    echo "Script can be canceled all the time with CTRL+C"
    print_line
    echo "it's highly recommended you read this script before use it"
    echo "This version is still in BETA. Send bugreports to: "
    echo "helmuthdu at gmail dot com"
    pause_function
}
#}}}
#CHECK ROOT {{{
function check_root() {
    CURRENTUSER="$(whoami)"
    if [ $CURRENTUSER != "root" ]; then
        echo "Current user is NOT 'root'. EXIT now"
        pause_function
        exit 1
    fi
}
#}}}
#LANGUAGE SELECTOR {{{
function language_selector(){
    print_title "LANGUAGE - https://wiki.archlinux.org/index.php/Locale"
    question_for_answer "Default system language: \"$LOCATION\""
    case "$OPTION" in
        "n")
            read -p "New system language [ex: en_US]: " LOCATION
            #KDE #{{{
            if [ $LOCATION = "pt_BR" ] || [ $LOCATION = "en_GB" ] || [ $LOCATION = "zh_CN" ]; then
                LOCATION_KDE=`echo $LOCATION | tr '[:upper:]' '[:lower:]'`
            elif [ $LOCATION = "en_US" ]; then
                LOCATION_KDE="en_gb"
            else
                LOCATION_KDE=`echo $LOCATION | cut -d\_ -f1`
            fi
            #}}}
            #FIREFOX #{{{
            if [ $LOCATION = "pt_BR" ] || [ $LOCATION = "pt_PT" ] || [ $LOCATION = "en_GB" ] || [ $LOCATION = "es_AR" ] || [ $LOCATION = "es_ES" ] || [ $LOCATION = "zh_CN" ]; then
                LOCATION_FF=`echo $LOCATION | tr '[:upper:]' '[:lower:]' | sed 's/_/-/'`
            elif [ $LOCATION = "en_US" ]; then
                LOCATION_FF="en-gb"
            else
                LOCATION_FF=`echo $LOCATION | cut -d\_ -f1`
            fi
            #}}}
            #HUNSPELL #{{{
            if [ $LOCATION = "pt_BR" ]; then
                LOCATION_HS=`echo $LOCATION | tr '[:upper:]' '[:lower:]' | sed 's/_/-/'`
            elif [ $LOCATION = "pt_PT" ]; then
                LOCATION_HS="pt_pt"
            else
                LOCATION_HS=`echo $LOCATION | cut -d\_ -f1`
            fi
            #}}}
            #LIBREOFFICE #{{{
            if [ $LOCATION = "pt_BR" ] || [ $LOCATION = "en_GB" ] || [ $LOCATION = "en_US" ] || [ $LOCATION = "zh_CN" ]; then
                LOCATION_LO=`echo $LOCATION | sed 's/_/-/'`
            else
                LOCATION_LO=`echo $LOCATION | cut -d\_ -f1`
            fi
            #}}}
            ;;
        *)
            ;;
    esac
    pause_function
}
#}}}
#CUSTOM REPOSITORIES {{{
function custom_repositories(){
    print_title "CUSTOM REPOSITORIES - https://wiki.archlinux.org/index.php/Unofficial_User_Repositories"
    question_for_answer "Add custom repositories"
    case "$OPTION" in
        "y")
            #CUSTOM REPOSITORIES {{{
            while [ 1 ]
            do
                print_title "CUSTOM REPOSITORIES - https://wiki.archlinux.org/index.php/Unofficial_User_Repositories"
                echo " 1) Ayatana"
                echo " 2) Archlinuxfr"
                if [ "$ARCHI" = "x86_64" ]; then echo " 3) Multilib"; fi
                echo ""
                echo " a) \"Add Custom\""
                echo ""
                echo " d) DONE"
                echo ""
                read -p "Please enter your choice: " OPTION
                case "$OPTION" in
                    1)
                        echo -e '\n[ayatana]\nServer = http://repo.ayatana.info/' >> /etc/pacman.conf
                        pause_function
                        ;;
                    2)
                        echo -e '\n[archlinuxfr]\nServer = http://repo.archlinux.fr/$arch' >> /etc/pacman.conf
                        pause_function
                        ;;
                    3)
                        echo -e "\n[multilib]\nInclude = /etc/pacman.d/mirrorlist" >> /etc/pacman.conf
                        pause_function
                        ;;
                    "a")
                        read -p "Repository Name [ex: custom]: " REPONAME
                        read -p "Repository Address [ex: file:///media/backup/Archlinux/]: " REPOADDRESS
                        echo -e '\n['"$REPONAME"']\nServer = '"$REPOADDRESS"'$arch' >> /etc/pacman.conf
                        pause_function
                        ;;
                    *)
                        break
                        ;;
                esac
            done
            pacman -Sy
            install_status
            ;;
            #}}}
        *)
            CURRENT_STATUS=0
            ;;
    esac
    sumary "Custom repositories installation"
    pause_function
}
#}}}
#RANKMIRROR {{{
function rankmirror(){
    print_title "RANKMIRROR - https://wiki.archlinux.org/index.php/Improve_Pacman_Performance"
    question_for_answer "Choosing the fastest mirror using rankmirror (this can take a while)"
    case "$OPTION" in
        "y")
            cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.backup
            sed -i '/^#\S/ s|#||' /etc/pacman.d/mirrorlist.backup
            rankmirrors -n 5 /etc/pacman.d/mirrorlist.backup > /etc/pacman.d/mirrorlist
            install_status
            ;;
        *)
            CURRENT_STATUS=0
            ;;
    esac
    sumary "New mirrorlist creation"
    pause_function
}
#}}}
#SYSTEM UPDATE {{{
function system_upgrade(){
    print_title "UPDATING YOUR SYSTEM"
    rm -fr /etc/profile.d/locale.sh #http://www.archlinux.org/news/initscripts-update-manual-intervention-required/
    pacman -S filesystem --force #http://www.archlinux.org/news/filesystem-upgrade-manual-intervention-required/
    pacman -Syuf
    reboot_now
}
#}}}
#CREATE A NEW USER {{{
function select_user(){
    print_title "SELECT USER ACCOUNT - https://wiki.archlinux.org/index.php/Users_and_Groups"

    avaliableusers() {
        echo "Avaliable Users:"
        if [ "$(ls -A "/home")" ]; then
            for USER in ${USERS[@]}; do
                echo " $(( ${#USERS[@]} ))) $USER"
            done
            echo -e " $(( ${#USERS[@]}+1 ))) Create new user\n"
            echo -e "WARNING: THE SELECTED USER MUST HAVE SUDO PRIVILEGES\n"
        else
            echo -e " 1) Create new user\n"
        fi
    }

    create_new_user(){
        read -p "Username: " USERNAME
        useradd -m -g users -G audio,lp,optical,storage,video,wheel,games,power,scanner,network -s /bin/bash $USERNAME
        passwd $USERNAME
        #SET USER AS SUDO #{{{
            print_title "SUDO - https://wiki.archlinux.org/index.php/Sudo"
            pacman -S --noconfirm --needed sudo
            ## Uncomment to allow members of group wheel to execute any command
            sed -i '/%wheel ALL=(ALL) ALL/s/^#//' /etc/sudoers
            ## Same thing without a password (not secure)
            #sed -i '/%wheel ALL=(ALL) NOPASSWD: ALL/s/^#//' /etc/sudoers
        #}}}
    }

    cd /home
    USERS=( * );

    avaliableusers
    read -p "Please enter your choice: " OPTION

    if [ "$(ls -A "/home")" ]; then
        if [ $OPTION -eq  $(( ${#USERS[@]}+1 )) ]; then
            create_new_user
        else
            USERNAME=${USERS[$OPTION-1]}
        fi
    else
        create_new_user
    fi

    cd ~
}
#}}}
#AUR HELPER {{{
function choose_aurhelper(){
while [ 1 ]
do
    print_title "AUR HELPER - https://wiki.archlinux.org/index.php/AUR_Helpers"
    echo "Choose your default AUR helper to install"
    echo " 1) Yaourt"
    echo " 2) Packer"
    echo ""
    read -p "Please enter your choice: " OPTION
    case "$OPTION" in
        1)
            if ! checkpackage "yaourt" ; then
                pacman -S --noconfirm --needed base-devel yajl
                su -l $USERNAME --command="
                    wget http://aur.archlinux.org/packages/package-query/package-query.tar.gz;
                    tar zxvf package-query.tar.gz;
                    cd package-query;
                    makepkg -si --noconfirm;
                    cd ..;
                    rm -fr package-query*
                "
                su -l $USERNAME --command="
                    wget http://aur.archlinux.org/packages/yaourt/yaourt.tar.gz;
                    tar zxvf yaourt.tar.gz;
                    cd yaourt;
                    makepkg -si --noconfirm;
                    cd ..;
                    rm -fr yaourt*
                "
                if ! checkpackage "yaourt" ; then
                    echo "Yaourt not installed. EXIT now"
                    pause_function
                    exit 0
                fi
            fi
            install_status
            YAOURT=1
            break
            ;;
        2)
            if ! checkpackage "packer" ; then
                pacman -S --noconfirm --needed git jshon curl
                su -l $USERNAME --command="
                    wget http://aur.archlinux.org/packages/pa/packer/packer.tar.gz;
                    tar zxvf packer.tar.gz;
                    cd packer;
                    makepkg -si --noconfirm;
                    cd ..;
                    rm -fr packer*
                "
                if ! checkpackage "packer" ; then
                    echo "Packer not installed. EXIT now"
                    pause_function
                    exit 0
                fi
            fi
            install_status
            PACKER=1
            break
            ;;
        *)
            print_line
            echo "Invalid option. Try another one."
            pause_function
            ;;
    esac
done
sumary "AUR Helper installation"
pause_function
}
#}}}
#PACKMAN PACKAGE SIGNING {{{
function pacman_package_signing(){
    print_title "PACMAN PACKAGE SIGNING - https://wiki.archlinux.org/index.php/Pacman-key"
    question_for_answer "Automatically configure pacman package signing"
    case "$OPTION" in
        "y")
            pacman -S --noconfirm --needed base-devel
            package_install "rng-tools"
            sed -i '/timeout/s/0/10/' /etc/conf.d/rngd
            rngd -f -r /dev/urandom &
            pacman-key --init
            killall rngd
            pacman -Rns --noconfirm rng-tools
            #DEVELOPER AND TU KEYS {{{
            curl https://www.archlinux.org/{developers,trustedusers}/ |
            awk -F\" '(/pgp.mit.edu/) {sub(/.*search=0x/,"");print $1}' |
            xargs pacman-key --recv-keys
            #}}}
            sed -i '/SigLevel\ [=]\ Optional\ TrustAll/s/^#//' /etc/pacman.conf
            sed -i '/SigLevel\ [=]\ Never/s/^/#/' /etc/pacman.conf
            install_status
            ;;
        *)
            CURRENT_STATUS=0
            ;;
    esac
    sumary "Pacman signing configuration"
    pause_function
}
#}}}
#BASIC SETUP{{{
function install_basic_setup(){
    print_title "BASH TOOLS - https://wiki.archlinux.org/index.php/Bash"
    pacman -S --noconfirm --needed curl bc rsync mlocate bash-completion vim net-tools
    print_title "(UN)COMPRESS TOOLS - https://wiki.archlinux.org/index.php/P7zip"
    pacman -S --noconfirm --needed zip unzip unrar p7zip
    package_install "rar"
    print_title "DBUS - https://wiki.archlinux.org/index.php/D-Bus"
    pacman -S --noconfirm --needed dbus
    add_daemon "dbus"
    rc.d start dbus
    print_title "ACPI - https://wiki.archlinux.org/index.php/ACPI_modules"
    pacman -S --noconfirm --needed acpi acpid
    add_daemon "acpid"
    print_title "NTFS/FAT/exFAT - https://wiki.archlinux.org/index.php/Ntfs"
    pacman -S --noconfirm --needed ntfs-3g ntfsprogs dosfstools exfat-utils fuse-exfat
    print_title "SSH - https://wiki.archlinux.org/index.php/Ssh"
    pacman -S --noconfirm --needed rssh openssh
    add_daemon "@sshd"
    #CONFIGURE SSH #{{{
    echo -e "sshd: ALL\n# End of file" > /etc/hosts.allow
    echo -e "ALL: ALL: DENY\n# End of file" > /etc/hosts.deny
    #SSHD_CONF #{{{
        sed -i '/ListenAddress/s/^#//' /etc/ssh/sshd_config
        sed -i '/SyslogFacility/s/^#//' /etc/ssh/sshd_config
        sed -i '/LogLevel/s/^#//' /etc/ssh/sshd_config
        sed -i '/LoginGraceTime/s/^#//' /etc/ssh/sshd_config
        sed -i '/PermitRootLogin/s/^#//' /etc/ssh/sshd_config
        sed -i '/StrictModes/s/^#//' /etc/ssh/sshd_config
        sed -i '/RSAAuthentication/s/^#//' /etc/ssh/sshd_config
        sed -i '/PubkeyAuthentication/s/^#//' /etc/ssh/sshd_config
        sed -i '/IgnoreRhosts/s/^#//' /etc/ssh/sshd_config
        sed -i '/PermitEmptyPasswords/s/^#//' /etc/ssh/sshd_config
        sed -i '/X11Forwarding/s/^#//' /etc/ssh/sshd_config
        sed -i '/X11Forwarding/s/no/yes/' /etc/ssh/sshd_config
        sed -i '/X11DisplayOffset/s/^#//' /etc/ssh/sshd_config
        sed -i '/X11UseLocalhost/s/^#//' /etc/ssh/sshd_config
        sed -i '/PrintMotd/s/^#//' /etc/ssh/sshd_config
        sed -i '/PrintMotd/s/yes/no/' /etc/ssh/sshd_config
        sed -i '/PrintLastLog/s/^#//' /etc/ssh/sshd_config
        sed -i '/TCPKeepAlive/s/^#//' /etc/ssh/sshd_config
        sed -i '/the setting of/s/^/#/' /etc/ssh/sshd_config
        sed -i '/RhostsRSAAuthentication and HostbasedAuthentication/s/^/#/' /etc/ssh/sshd_config
        sed -i '/ListenAddress\ ::/s/^/#/' /etc/ssh/sshd_config
    #}}}
    #}}}
    print_title "SAMBA - https://wiki.archlinux.org/index.php/Samba"
    pacman -S --noconfirm --needed samba
    cp /etc/samba/smb.conf.default /etc/samba/smb.conf
    add_daemon "@samba"
    print_title "ALSA - https://wiki.archlinux.org/index.php/Alsa"
    pacman -S --noconfirm --needed alsa-utils alsa-plugins
    sed -i '/MODULES[=]/s/snd-usb-audio//' /etc/rc.conf
    sed -i '/MODULES[=]/s/MODULES[=](/&snd-usb-audio/' /etc/rc.conf
    add_daemon "@alsa"
}
#}}}
#TLP #{{{
function install_tlp(){
    print_title "TLP - https://wiki.archlinux.org/index.php/TLP"
    question_for_answer "Install TLP (Battery Improvement on Laptops)"
    case "$OPTION" in
        "y")
            package_install "tlp"
            pacman -S --noconfirm --needed upower
            add_daemon "@tlp"
            install_status
            ;;
        *)
            CURRENT_STATUS=0
            ;;
    esac
    sumary "TLP installation"
    pause_function
}
#}}}
#XORG {{{
function install_xorg(){
    print_title "XORG - https://wiki.archlinux.org/index.php/Xorg"
    echo "Installing X-Server (req. for Desktopenvironment, GPU Drivers, Keyboardlayout,...)"
    pacman -S --noconfirm --needed xorg-server xorg-xinit xorg-xkill
    pacman -S --noconfirm --needed xf86-input-synaptics xf86-input-mouse xf86-input-keyboard
    pacman -S --noconfirm --needed mesa
    pacman -S --noconfirm --needed gamin
}
#}}}
#VIDEO CARDS {{{
function install_video_cards(){
    print_title "VIDEO CARD"
    echo "Select your GPU:"
    echo " 1) Intel"
    echo " 2) ATI"
    echo " 3) nVidia"
    echo " 4) Nouveau"
    echo " 5) Virtualbox"
    echo " 6) Vesa"
    echo ""
    echo " s) SKIP"
    echo ""
    read -p "Please enter your choice: " OPTION
    case "$OPTION" in
        1)
            pacman -S --noconfirm --needed libgl xf86-video-intel
            install_status
            sumary "Intel GPU driver installation"
            ;;
        2)
            package_install "catalyst catalyst-utils"
            install_status
            sumary "ATI GPU driver installation"
            ;;
        3)
            pacman -Rdd --noconfirm libgl
            pacman -S --noconfirm --needed nvidia nvidia-utils
            install_status
            sumary "nVidia GPU driver installation"
            ;;
        4)
            pacman -S --noconfirm --needed libgl xf86-video-nouveau nouveau-dri
            modprobe nouveau
            add_module "nouveau"
            install_status
            sumary "Nouveau GPU driver installation"
            ;;
        5)
            pacman -S --noconfirm --needed virtualbox-archlinux-additions
            modprobe -a vboxguest vboxsf vboxvideo
            add_module "vboxguest vboxsf vboxvideo"
            groupadd vboxsf
            gpasswd -a $USERNAME vboxsf
            install_status
            sumary "Virtualbox guest additions (incl. video drivers) installation"
            ;;
        6)
            pacman -S --noconfirm --needed xf86-video-vesa
            install_status
            sumary "Vesa GPU driver installation"
            ;;
        *)
            CURRENT_STATUS=0
            sumary "GPU drivers installation"
            ;;
    esac
    pause_function
}
#}}}
#CUPS {{{
function install_cups(){
    print_title "CUPS - https://wiki.archlinux.org/index.php/Cups"
    question_for_answer "Install CUPS (Common Unix Printing System)"
    case "$OPTION" in
        "y")
            pacman -S --noconfirm --needed cups ghostscript gsfonts
            pacman -S --noconfirm --needed gutenprint foomatic-db foomatic-db-engine foomatic-db-nonfree foomatic-filters hplip splix cups-pdf
            add_daemon "@cupsd"
            install_status
            ;;
        *)
            CURRENT_STATUS=0
            ;;
    esac
    sumary "CUPS installation"
    pause_function
}
#}}}
#ADDITIONAL FIRMWARE {{{
function install_additional_firmwares(){
    print_title "INSTALL ADDITIONAL FIRMWARES"
    question_for_answer "Install additional firmwares [Wireless,Bluetooth]"
    case "$OPTION" in
        "y")
            #ADDITIONAL FIRMWARE {{{
            while [ 1 ]
            do
                print_title "INSTALL ADDITIONAL FIRMWARES"
                echo " 1) $(checkbox_package "ipw2100-fw") ipw2100"
                echo " 2) $(checkbox_package "ipw2200-fw") ipw2200"
                echo " 3) $(checkbox_package "b43-firmware") b43"
                echo " 4) $(checkbox_package "b43-firmware-legacy") b43legacy"
                echo " 5) $(checkbox_package "broadcom-wl") broadcom-wl"
                echo " 6) $(checkbox_package "bluez-firmware") bluez-firmware"
                echo ""
                echo " d) DONE"
                echo ""
                read -p "Please enter your choice: " OPTION
                case "$OPTION" in
                    1)
                        package_manager "ipw2100-fw"
                        ;;
                    2)
                        package_manager "ipw2200-fw"
                        ;;
                    3)
                        package_manager "b43-firmware"
                        ;;
                    4)
                        package_manager "b43-firmware-legacy"
                        ;;
                    5)
                        package_manager "broadcom-wl"
                        ;;
                    6)
                        package_manager "bluez-firmware"
                        ;;
                    *)
                        break
                        ;;
                esac
            done
            install_status
            ;;
            #}}}
        *)
            CURRENT_STATUS=0
            ;;
    esac
    sumary "Additional Firmware"
    pause_function
}
#}}}
#GIT ACCESS THRU A FIREWALL {{{
function install_git_tor(){
    print_title "GIT-TOR - https://wiki.archlinux.org/index.php/Tor"
    question_for_answer "Ensuring access to GIT through a firewall (bypass college firewall)"
    case "$OPTION" in
        "y")
            package_install "gtk-doc openbsd-netcat vidalia privoxy git"
            if [ ! -f /usr/bin/proxy-wrapper ]; then
                echo 'forward-socks5   /               127.0.0.1:9050 .' >> /etc/privoxy/config
                echo -e '#!/bin/bash\nnc.openbsd -xlocalhost:9050 -X5 $*' > /usr/bin/proxy-wrapper
                chmod +x /usr/bin/proxy-wrapper
                echo -e '\nexport GIT_PROXY_COMMAND="/usr/bin/proxy-wrapper"' >> /etc/bash.bashrc
                export GIT_PROXY_COMMAND="/usr/bin/proxy-wrapper"
                su -l $USERNAME --command="export GIT_PROXY_COMMAND=\"/usr/bin/proxy-wrapper\""
            fi
            groupadd -g 42 privoxy
            useradd -u 42 -g privoxy -s /bin/false -d /etc/privoxy privoxy
            pacman -S --noconfirm tor privoxy
            rc.d start tor privoxy
            su -l $USERNAME --command="sudo /etc/rc.d/tor restart"
            su -l $USERNAME --command="sudo /etc/rc.d/privoxy restart"
            add_daemon "@tor @privoxy"
            install_status
            ;;
        *)
            CURRENT_STATUS=0
            ;;
    esac
    sumary "GIT-TOR installation"
    pause_function
}
#}}}
#DESKTOP ENVIRONMENT {{{
function install_desktop_environment(){
    print_title "DESKTOP ENVIRONMENT - https://wiki.archlinux.org/index.php/Desktop_Environment"
    echo "Choose your desktop-environment:"
    echo " 1) GNOME"
    echo " 2) KDE"
    echo " 3) XFCE"
    echo " 4) LXDE"
    echo " 5) OpenBox"
    echo ""
    echo " b) BACK"
    read -p "Please enter your choice: " OPTION
    case "$OPTION" in
        1)
            #GNOME {{{
            print_title "GNOME - https://wiki.archlinux.org/index.php/GNOME"
            pacman -S --noconfirm --needed gnome gnome-extra
            gpasswd -a $USERNAME camera
            pacman -S --noconfirm --needed gedit-plugins gnome-tweak-tool
            pacman -S --noconfirm --needed gksu gvfs-smb xdg-user-dirs
            pacman -S --noconfirm --needed pulseaudio-gnome telepathy deja-dup
            pacman -S --noconfirm --needed system-config-printer-gnome
            package_install "zeitgeist libzeitgeist zeitgeist-datahub"
            package_install "automounter nautilus-open-terminal gnome-defaults-list"
            #GNOME APPS {{{
            while [ 1 ]
            do
                print_title "GNOME APPS"
                echo " 1) $(checkbox_package "faenza-icon-theme") Gnome Icons [Faience, Faenza, Elementary]"
                echo " 2) $(checkbox_package "zukitwo-themes") Gnome Themes [Zukitwo, Orion, eGTK, Light, Aldabra]"
                echo " 3) $(checkbox_package "gpaste") GnomeShell Extensions"
                echo " 4) $(checkbox_package "gnome-shell-theme-eos") GnomeShell Themes [eOS, Nord, Faience, Dark Shine]"
                echo " 5) $(checkbox_package "gnome-activity-journal") Gnome Activity Journal "
                echo " 6) $(checkbox_package "gnome-packagekit") Packagekit"
                echo ""
                echo " a) ALL"
                echo " d) DONE"
                echo ""
                read -p "Please enter your choice: " OPTION
                case "$OPTION" in
                    1)
                        package_manager "faenza-icon-theme faience-icon-theme faenza-cupertino-icon-theme elementary-icons"
                        ;;
                    2)
                        package_manager "egtk-bzr zukitwo-themes orion-gtk-theme light-themes gtk-theme-aldabra"
                        ;;
                    3)
                        package_manager "libkeybinder3"
                        package_manager "gpaste gnome-shell-system-monitor-applet-git gnome-shell-extension-noa11y-git gnome-shell-extension-weather-git gnome-shell-extension-user-theme gnome-shell-extension-pomodoro gnome-shell-extension-mediaplayer-git gnome-shell-extension-gtile-git"
                        ;;
                    4)
                        package_manager "gnome-shell-theme-faience gnome-shell-theme-nord gnome-shell-theme-eos gnome-shell-theme-dark-shine"
                        ;;
                    5)
                        package_manager "gnome-activity-journal"
                        ;;
                    6)
                        package_manager "gnome-packagekit gnome-settings-daemon-updates"
                        ;;
                    "a")
                        package_manager "faenza-icon-theme faience-icon-theme faenza-cupertino-icon-theme elementary-icons"
                        package_manager "egtk-bzr zukitwo-themes orion-gtk-theme light-themes gtk-theme-aldabra"
                        package_manager "gnome-shell-theme-faience gnome-shell-theme-nord gnome-shell-theme-eos"
                        package_manager "libkeybinder3"
                        package_manager "gpaste gnome-shell-system-monitor-applet-git gnome-shell-extension-noa11y-git gnome-shell-extension-weather-git gnome-shell-extension-user-theme gnome-shell-extension-pomodoro gnome-shell-extension-mediaplayer-git gnome-shell-extension-gtile-git"
                        package_manager "gnome-activity-journal"
                        package_manager "gnome-packagekit gnome-settings-daemon-updates"
                        ;;
                    *)
                        break
                        ;;
                esac
            done
            #}}}
            add_daemon "gdm"
            install_status
            GNOME=1
            ;;
            #}}}
        2)
            #KDE {{{
            print_title "KDE - https://wiki.archlinux.org/index.php/KDE"
            pacman -S --noconfirm --needed kde kde-l10n-$LOCATION_KDE kipi-plugins
            pacman -Rcsn kdemultimedia-kscd kdemultimedia-juk kdemultimedia-dragonplayer
            pacman -S --noconfirm --needed kdeadmin-system-config-printer-kde xdg-user-dirs
            package_install "kde-gtk-config-git"
            package_install "oxygen-gtk2 oxygen-gtk3 qtcurve-gtk2 qtcurve-kde4 bespin-svn"
            #QTCURVE THEMES #{{{
            wget http://kde-look.org/CONTENT/content-files/144205-Sweet.tar.gz
            wget http://kde-look.org/CONTENT/content-files/141920-Kawai.tar.gz
            tar zxvf 144205-Sweet.tar.gz
            tar zxvf 141920-Kawai.tar.gz
            rm 144205-Sweet.tar.gz
            rm 141920-Kawai.tar.gz
            mkdir -p /home/$USERNAME/.kde4/share/apps/color-schemes
            mv Sweet/Sweet.colors /home/$USERNAME/.kde4/share/apps/color-schemes
            mv Kawai/Kawai.colors /home/$USERNAME/.kde4/share/apps/color-schemes
            mkdir -p /home/$USERNAME/.kde4/share/apps/QtCurve
            mv Sweet/Sweet.qtcurve /home/$USERNAME/.kde4/share/apps/QtCurve
            mv Kawai/Kawai.qtcurve /home/$USERNAME/.kde4/share/apps/QtCurve
            chown -R $USERNAME:users /home/$USERNAME/.kde4
            rm -fr Kawai Sweet
            #}}}
            #KDE APPS {{{
            while [ 1 ]
            do
                print_title "KDE APPS"
                echo " 1) $(checkbox_package "apper") Apper"
                echo " 2) $(checkbox_package "bangarang") Bangarang"
                echo " 3) $(checkbox_package "choqok") Choqok"
                echo " 4) $(checkbox_package "digikam") Digikam"
                echo " 5) $(checkbox_package "k3b") K3b"
                echo " 6) $(checkbox_package "kfaenza-icon-theme") KDE Icons [KFaenza]"
                echo " 7) $(checkbox_package "plasma-theme-produkt") Plasma Themes [Caledonia, Produkt, Ronak]"
                echo " 8) $(checkbox_package "yakuake") Yakuake"
                echo ""
                echo " a) ALL"
                echo " d) DONE"
                echo ""
                read -p "Please enter your choice: " OPTION
                case "$OPTION" in
                    1)
                        package_manager "apper"
                        ;;
                    2)
                        package_manager "bangarang"
                        ;;
                    3)
                        package_manager "choqok"
                        ;;
                    4)
                        package_manager "digikam"
                        ;;
                    5)
                        package_manager "k3b dvd+rw-tools"
                        ;;
                    6)
                        package_manager "kfaenza-icon-theme"
                        ;;
                    7)
                        package_manager "caledonia-bundle plasma-theme-produkt ronak-plasmatheme"
                        ;;
                    8)
                        package_manager "yakuake yakuake-skin-plasma-oxygen-panel"
                        ;;
                    "a")
                        package_manager "choqok"
                        package_manager "digikam"
                        package_manager "k3b dvd+rw-tools"
                        package_manager "apper"
                        package_manager "bangarang"
                        package_manager "caledonia-bundle plasma-theme-produkt ronak-plasmatheme"
                        package_manager "kfaenza-icon-theme"
                        package_manager "yakuake yakuake-skin-plasma-oxygen-panel"
                        ;;
                    *)
                        break
                        ;;
                esac
            done
            #}}}
            add_daemon "kdm"
            install_status
            KDE=1
            ;;
            #}}}
        3)
            #XFCE {{{
            print_title "XFCE - https://wiki.archlinux.org/index.php/Xfce"
            pacman -S --noconfirm --needed xfce4 xfce4-goodies
            pacman -S --noconfirm --needed polkit-gnome gvfs-smb xdg-user-dirs
            package_install "automounter"
            package_install "gnome-defaults-list"
            #XFCE APPS {{{
            while [ 1 ]
            do
                print_title "XFCE APPS"
                echo " 1) $(checkbox_package "faenza-icon-theme") Icons [Faience, Faenza, Elementary]"
                echo " 2) $(checkbox_package "zukitwo-themes") Themes [Zukitwo]"
                echo ""
                echo " d) DONE"
                echo ""
                read -p "Please enter your choice: " OPTION
                case "$OPTION" in
                    1)
                        package_manager "faenza-icon-theme faience-icon-theme faenza-cupertino-icon-theme elementary-icons"
                        ;;
                    2)
                        package_manager "zukitwo-themes"
                        ;;
                    *)
                        break
                        ;;
                esac
            done
            #}}}
            install_status
            XFCE=1
            ;;
            #}}}
        4)
            #LXDE {{{
            print_title "LXDE - http://wiki.archlinux.org/index.php/lxde"
            pacman -S --noconfirm --needed lxde obconf
            pacman -S --noconfirm --needed leafpad xarchiver epdfview
            pacman -S --noconfirm --needed pm-utils upower
            pacman -S --noconfirm --needed polkit-gnome gvfs gvfs-smb xdg-user-dirs
            package_install "gnome-defaults-list"
            #LXDE APPS {{{
            while [ 1 ]
            do
                print_title "LXDE APPS"
                echo " 1) $(checkbox_package "faenza-icon-theme") Icons [Faience, Faenza, Elementary]"
                echo " 2) $(checkbox_package "xfburn") Xfburn"
                echo ""
                echo " d) DONE"
                echo ""
                read -p "Please enter your choice: " OPTION
                case "$OPTION" in
                    1)
                        package_manager "faenza-icon-theme faience-icon-theme faenza-cupertino-icon-theme elementary-icons"
                        ;;
                    2)
                        package_manager "xfburn"
                        ;;
                    *)
                        break
                        ;;
                esac
            done
            #}}}
            add_daemon "lxdm"
            install_status
            LXDE=1
            ;;
            #}}}
        5)
            #OPENBOX {{{
            print_title "OPENBOX - http://wiki.archlinux.org/index.php/Openbox"
            pacman -S --noconfirm --needed openbox obconf obmenu menumaker
            pacman -S --noconfirm --needed lxappearance consolekit
            pacman -S --noconfirm --needed xdg-user-dirs
            pacman -S --noconfirm --needed leafpad xarchiver epdfview nitrogen
            package_install "gnome-defaults-list"
            mkdir -p /home/$USERNAME/.config/openbox/
            cp /etc/xdg/openbox/rc.xml /home/$USERNAME/.config/openbox/
            cp /etc/xdg/openbox/menu.xml /home/$USERNAME/.config/openbox/
            cp /etc/xdg/openbox/autostart /home/$USERNAME/.config/openbox/
            echo -e 'exec ck-launch-session dbus-launch openbox-session' >> /home/$USERNAME/.xinitrc
            chown -R $USERNAME:users /home/$USERNAME/.config
            chown $USERNAME:users /home/$USERNAME/.xinitrc
            #OPENBOX APPS {{{
            while [ 1 ]
            do
                print_title "OPENBOX APPS"
                echo " 1) $(checkbox_package "faenza-icon-theme") Icons [Faience, Faenza, Elementary]"
                echo " 2) $(checkbox_package "thunar") Thunar"
                echo " 3) $(checkbox_package "tint2") Tint2"
                echo " 4) $(checkbox_package "volwheel") Volwheel"
                echo " 5) $(checkbox_package "xfburn") Xfburn"
                echo ""
                echo " d) DONE"
                echo ""
                read -p "Please enter your choice: " OPTION
                case "$OPTION" in
                    1)
                        package_manager "faenza-icon-theme faience-icon-theme faenza-cupertino-icon-theme elementary-icons"
                        ;;
                    2)
                        package_manager "polkit-gnome gvfs-smb thunar"
                        ;;
                    3)
                        package_manager "tint2"
                        ;;
                    4)
                        package_manager "volwheel"
                        ;;
                    5)
                        package_manager "xfburn"
                        ;;
                    *)
                        break
                        ;;
                esac
            done
            #}}}
            install_status
            XFCE=1
            ;;
            #}}}
        *)
            CURRENT_STATUS=0
            ;;
    esac
    sumary "Desktop Environment Installation"
    pause_function
}
#}}}
#NETWORKMANAGER/WICD {{{
function install_nm_wicd(){
    print_title "NETWORK CONNECTION MANAGER"
    echo " 1) Networkmanager"
    echo " 2) Wicd"
    echo ""
    echo " s) SKIP"
    echo ""
    read -p "Please enter your choice: " OPTION
    case "$OPTION" in
        1)
            print_title "NETWORKMANAGER - https://wiki.archlinux.org/index.php/Networkmanager"
            if [ "$GNOME" -eq 1 ] || [ "$XFCE" -eq 1 ] || [ "$LXDE" -eq 1 ]; then
                pacman -S --noconfirm --needed networkmanager network-manager-applet
            elif [ "$KDE" -eq 1 ]; then
                pacman -S --noconfirm --needed networkmanager kdeplasma-applets-networkmanagement
            else
                pacman -S --noconfirm --needed networkmanager
            fi
            groupadd networkmanager
            gpasswd -a $USERNAME networkmanager
            remove_daemon "network"
            add_daemon "@networkmanager"
            install_status
            ;;
        2)
            print_title "WICD - https://wiki.archlinux.org/index.php/Wicd"
            if [ "$GNOME" -eq 1 ] || [ "$XFCE" -eq 1 ] || [ "$LXDE" -eq 1 ]; then
                pacman -S --noconfirm --needed wicd wicd-gtk
            elif [ "$KDE" -eq 1 ]; then
                package_manager "wicd wicd-kde"
            else
                pacman -S --noconfirm --needed wicd
            fi
            remove_daemon "network"
            add_daemon "@wicd"
            install_status
            ;;
        *)
            remove_daemon "@networkmanager"
            remove_daemon "@wicd"
            add_daemon "network"
            CURRENT_STATUS=0
            ;;
    esac
    sumary "Network Connection Manager installation"
    pause_function
}
#}}}
#ACCESSORIES {{{
function install_accessories_apps(){
while [ 1 ]
do
    print_title "ACCESSORIES APPS"
    echo " 1) $(checkbox_package "cairo-dock-bzr") Cairo Dock"
    echo " 2) $(checkbox_package "conky") Conky + CONKY-colors"
    echo " 3) $(checkbox_package "dockbarx") Dockbarx"
    echo " 4) $(checkbox_package "docky") Docky"
    echo " 5) $(if [ "$KDE" -eq 1 ]; then echo "$(checkbox_package "speedcrunch") Speedcrunch"; else echo "$(checkbox_package "galculator") Galculator"; fi)"
    echo " 6) $(checkbox_package "gnome-pie") Gnome-Pie"
    echo " 7) $(checkbox_package "guake") Guake"
    echo " 8) $(checkbox_package "kupfer") Kupfer"
    echo " 9) $(checkbox_package "pyrenamer") Pyrenamer"
    echo "10) $(checkbox_package "shutter") Shutter"
    echo "11) $(checkbox_package "synapse") Synapse"
    echo "12) $(checkbox_package "terminator") Terminator"
    echo ""
    echo " b) BACK"
    echo ""
    read -p "Please enter your choice: " OPTION
    case "$OPTION" in
        1)
            package_manager "cairo-dock-bzr cairo-dock-plugins-bzr"
            ;;
        2)
            package_manager "conky conky-colors"
            add_module "coretemp it87 acpi-cpufreq"
            ;;
        3)
            package_manager "dockbarx dockbarx-shinybar-theme"
            ;;
        4)
            package_manager "docky"
            ;;
        5)
            if [ "$KDE" -eq 1 ]; then
                package_manager "speedcrunch"
            else
                package_manager "galculator"
            fi
            ;;
        6)
            package_manager "gnome-pie"
            ;;
        7)
            package_manager "guake"
            ;;
        8)
            package_manager "kupfer"
            ;;
        9)
            package_manager "pyrenamer"
            ;;
        10)
            package_manager "shutter"
            ;;
        11)
            package_manager "zeitgeist libzeitgeist zeitgeist-datahub"
            package_manager "synapse"
            ;;
        12)
            package_manager "terminator python-keybinder"
            ;;
        *)
            break
            ;;
    esac
done
}
#}}}
#DEVELOPEMENT {{{
function install_development_apps(){
while [ 1 ]
do
    print_title "DEVELOPMENT APPS"
    echo " 1) $(checkbox_package "aptana-studio") Aptana Studio"
    echo " 2) $(checkbox_package "eclipse") Eclipse"
    echo " 3) $(checkbox_package "emacs") Emacs"
    echo " 4) $(checkbox_package "gvim") Gvim"
    echo " 5) $(checkbox_package "intellij-idea-community-edition") IntelliJ IDEA"
    echo " 6) $(checkbox_package "netbeans") Netbeans"
    echo " 7) $(checkbox_package "jdk") Oracle Java"
    echo " 8) $(checkbox_package "qtcreator") QT Creator"
    echo " 9) $(checkbox_package "sublime-text") Sublime Text 2"
    echo "10) $(checkbox_package "gdb") Debugger Tools [Valgrind, Gdb, Splint, Tidyhtml, Pyflakes, Jsl]"
    echo "11) $(checkbox_package "mysql-workbench") MySQL Workbench"
    echo "12) $(checkbox_package "meld") Meld"
    echo ""
    echo " b) BACK"
    echo ""
    read -p "Please enter your choice: " OPTION
    case "$OPTION" in
        1)
            package_manager "aptana-studio"
            ;;
        2)
            #ECLIPSE {{{
            while [ 1 ]
            do
                print_title "ECLIPSE - https://wiki.archlinux.org/index.php/Eclipse"
                echo " 1) $(checkbox_package "eclipse") Eclipse Classic"
                echo " 2) $(checkbox_package "eclipse-cdt") Eclipse IDE for C/C++ Developers "
                echo " 3) $(checkbox_package "eclipse-android") Android Development Tools for Eclipse"
                echo " 4) $(checkbox_package "eclipse-wtp-wst") Web Development Tools for Eclipse"
                echo " 5) $(checkbox_package "eclipse-pdt") PHP Development Tools for Eclipse"
                echo " 6) $(checkbox_package "eclipse-pydev") Python Development Tools for Eclipse"
                echo " 7) $(checkbox_package "eclipse-aptana") Aptana Studio plugin for Eclipse"
                echo " 8) $(checkbox_package "eclipse-vrapper") Vim-like editing plugin for Eclipse"
                echo " 9) $(checkbox_package "eclipse-egit") Git support plugin for Eclipse"
                echo ""
                echo " b) BACK"
                echo ""
                read -p "Please enter your choice: " OPTION
                case "$OPTION" in
                    1)
                        package_manager "eclipse"
                        ;;
                    2)
                        package_manager "eclipse-cdt"
                        ;;
                    3)
                        package_manager "eclipse-android android-apktool android-sdk android-sdk-platform-tools android-udev"
                        ;;
                    4)
                        package_manager "eclipse-wtp-wst"
                        ;;
                    5)
                        package_manager "eclipse-pdt"
                        ;;
                    6)
                        package_manager "eclipse-pydev"
                        ;;
                    7)
                        package_manager "eclipse-aptana"
                        ;;
                    8)
                        package_manager "eclipse-vrapper"
                        ;;
                    9)
                        package_manager "eclipse-egit"
                        ;;
                    *)
                        break
                        ;;
                esac
            done
            #}}}
            ;;
        3)
            package_manager "emacs"
            ;;
        4)
            pacman -Rdd --noconfirm vim
            package_manager "gvim wmctrl ctags discount"
            #HELMUTHDU'S VIMRC {{{
            pacman -S --noconfirm --needed git
            git clone git://github.com/helmuthdu/vim.git
            mv vim /home/$USERNAME/.vim
            git clone http://github.com/gmarik/vundle.git /home/$USERNAME/.vim/bundle/vundle
            ln -sf /home/$USERNAME/.vim/vimrc /home/$USERNAME/.vimrc
            chown -R $USERNAME:users /home/$USERNAME/.vim
            chown $USERNAME:users /home/$USERNAME/.vimrc
            #}}}
            ;;
        5)
            package_manager "intellij-idea-community-edition"
            ;;
        6)
            package_manager "netbeans"
            ;;
        7)
            pacman -Rdd --noconfirm jre7-openjdk
            pacman -Rdd --noconfirm jdk7-openjdk
            package_manager "jdk"
            ;;
        8)
            package_manager "qtcreator qt-doc"
            mkdir -p /home/$USERNAME/.config/Nokia/qtcreator/styles
            wget http://angrycoding.googlecode.com/svn/branches/qt-creator-monokai-theme/monokai.xml
            mv monokai.xml /home/$USERNAME/.config/Nokia/qtcreator/styles/
            chown -R $USERNAME:users /home/$USERNAME/.config
            ;;
        9)
            package_manager "sublime-text"
            ;;
        10)
            package_manager "valgrind gdb splint tidyhtml pyflakes jsl"
            ;;
        11)
            package_manager "mysql-workbench"
            ;;
        12)
            package_manager "meld"
            ;;
        *)
            break
            ;;
    esac
done
}
#}}}
#OFFICE {{{
function install_office_apps(){
while [ 1 ]
do
    print_title "OFFICE APPS"
    echo " 1) $(checkbox_package "libreoffice-base") LibreOffice"
    echo " 2) $(checkbox_package "goffice") GnomeOffice [Abiword, Gnumeric]"
    echo " 3) $(checkbox_package "texlive-core") Latex"
    echo " 4) $(if [ "$KDE" -eq 1 ]; then  echo "$(checkbox_package "kchmviewer") Kchmviewer"; else echo "$(checkbox_package "chmsee") Chmsee"; fi)"
    echo " 5) $(checkbox_package "gcstar") GCStar"
    echo " 6) $(checkbox_package "wunderlist") Wunderlist"
    echo " 7) $(checkbox_package "xmind") Xmind"
    echo " 8) $(checkbox_package "zathura") Zathura"
    echo " 9) $(checkbox_package "impressive") Impressive"
    echo ""
    echo " b) BACK"
    echo ""
    read -p "Please enter your choice: " OPTION
    case "$OPTION" in
        1)
            package_manager "libreoffice-base libreoffice-calc libreoffice-draw libreoffice-impress libreoffice-math libreoffice-writer libreoffice-extension-presenter-screen libreoffice-extension-pdfimport libreoffice-extension-diagram libreoffice-$LOCATION_LO"
            package_manager "hunspell-$LOCATION_HS"
            if [ "$KDE" -eq 1 ]; then
                package_manager "libreoffice-kde4"
            else
                package_manager "libreoffice-gnome"
            fi
            ;;
        2)
            package_manager "gnumeric abiword abiword-plugins"
            ;;
        3)
            print_title "LATEX - https://wiki.archlinux.org/index.php/LaTeX"
            package_manager "texlive-most"
            package_manager "texmaker"
            package_manager "latex-template-springer latex-template-ieee latex-beamer"
            if [ $LOCATION = "pt_BR" ]; then
                package_manager "abntex"
            fi
            ;;
        4)
            if [ "$KDE" -eq 1 ]; then
                package_manager "kchmviewer"
            else
                package_manager "chmsee"
            fi
            ;;
        5)
            package_manager "gcstar"
            ;;
        6)
            package_manager "wunderlist"
            ;;
        7)
            package_manager "xmind"
            ;;
        8)
            package_manager "zathura"
            ;;
        9)
            package_manager "impressive"
            ;;
        *)
            break
            ;;
    esac
done
}
#}}}
#SYSTEM TOOLS {{{
function install_system_apps(){
while [ 1 ]
do
    print_title "SYSTEM TOOLS APPS"
    echo " 1) $(checkbox_package "grsync") Grsync"
    echo " 2) $(checkbox_package "htop") Htop"
    echo " 3) $(checkbox_package "virtualbox") Virtualbox"
    echo " 4) $(checkbox_package "wine") Wine"
    echo ""
    echo " b) BACK"
    echo ""
    read -p "Please enter your choice: " OPTION
    case "$OPTION" in
        1)
            package_manager "grsync"
            ;;
        2)
            package_manager "htop"
            ;;
        3)
            package_manager "virtualbox virtualbox-additions virtualbox-ext-oracle"
            modprobe vboxdrv
            groupadd vboxusers
            gpasswd -a $USERNAME vboxusers
            add_module "vboxdrv"
            ;;
        4)
            package_manager "wine wine_gecko winetricks"
            ;;
        *)
            break
            ;;
    esac
done
}
#}}}
#GRAPHICS {{{
function install_graphics_apps(){
while [ 1 ]
do
    print_title "GRAPHICS APPS"
    echo " 1) $(checkbox_package "blender") Blender"
    echo " 2) $(checkbox_package "gimp") Gimp"
    echo " 3) $(checkbox_package "gimp-paint-studio") Gimp-plugins"
    echo " 4) $(checkbox_package "gthumb") Gthumb"
    echo " 5) $(checkbox_package "inkscape") Inkscape"
    echo " 6) $(checkbox_package "mcomix") MComix"
    echo " 7) $(checkbox_package "shotwell") Shotwell"
    echo ""
    echo " b) BACK"
    echo ""
    read -p "Please enter your choice: " OPTION
    case "$OPTION" in
        1)
            package_manager "blender"
            ;;
        2)
            package_manager "gimp"
            ;;
        3)
            package_manager "gimp-paint-studio gimp-resynth gimpfx-foundry gimp-plugin-pandora gimp-plugin-saveforweb"
            ;;
        4)
            package_manager "gthumb"
            ;;
        5)
            package_manager "inkscape uniconvertor python2-numpy python-lxml sozi"
            ;;
        6)
            package_manager "mcomix"
            ;;
        7)
            package_manager "shotwell"
            ;;
        *)
            break
            ;;
    esac
done
}
#}}}
#INTERNET {{{
function install_internet_apps(){
while [ 1 ]
do
    print_title "INTERNET APPS"
    echo " 1) $(checkbox_package "dropbox") Dropbox"
    echo " 2) $(checkbox_package "google-earth") Google Earth"
    echo " 3) $(checkbox_package "google-chrome") Google Chrome"
    echo " 4) $(checkbox_package "chromium") Google Chromium"
    echo " 5) $(checkbox_package "jdownloader") Jdownloader"
    echo " 6) $(checkbox_package "irssi") Irssi"
    echo " 7) $(checkbox_package "firefox") Mozilla Firefox"
    echo " 8) $(checkbox_package "thunderbird") Mozilla Thunderbird"
    echo " 9) $(checkbox_package "pidgin") Pidgin"
    echo "10) $(checkbox_package "skype") Skype"
    echo "11) $(checkbox_package "teamspeak3") TeamSpeak"
    echo "12) $(checkbox_package "teamviewer") Teamviewer"
    echo "13) $(if [ "$KDE" -eq 1 ]; then echo "$(checkbox_package "transmission-qt")"; else echo "$(checkbox_package "transmission-gtk")"; fi) Trasmission"
    echo "14) $(if [ "$KDE" -eq 1 ]; then echo "$(checkbox_package "konversation") Konversation"; else echo "$(checkbox_package "xchat") X-Chat"; fi)"
    echo ""
    echo " b) BACK"
    echo ""
    read -p "Please enter your choice: " OPTION
    case "$OPTION" in
        1)
            package_manager "dropbox"
            if [ "$GNOME" -eq 1 ]; then
                package_manager "nautilus-dropbox"
            elif [ "$XFCE" -eq 1 ]; then
                package_manager "thunar-dropbox"
            elif [ "$KDE" -eq 1 ]; then
                package_manager "kfilebox"
            else
                package_manager "dropbox-cli"
            fi
            ;;
        2)
            package_manager "google-earth"
            ;;
        3)
            package_manager "google-chrome flashplugin"
            ;;
        4)
            package_manager "chromium flashplugin"
            ;;
        5)
            package_manager "jdownloader"
            ;;
        6)
            package_manager "irssi"
            ;;
        7)
            package_manager "firefox firefox-i18n-$LOCATION_FF flashplugin "
            ;;
        8)
            package_manager "thunderbird thunderbird-i18n-$LOCATION_FF"
            ;;
        9)
            package_manager "pidgin"
            ;;
        10)
            package_manager "skype"
            ;;
        11)
            package_manager "teamspeak3"
            ;;
        12)
            package_manager "teamviewer"
            ;;
        13)
            if [ "$KDE" -eq 1 ]; then
                package_manager "transmission-qt"
            else
                package_manager "transmission-gtk"
            fi
            ;;
        14)
            if [ "$KDE" -eq 1 ]; then
                package_manager "konversation"
            else
                package_manager "xchat"
            fi
            ;;
        *)
            break
            ;;
    esac
done
}
#}}}
#LAMP #{{{
function install_lamp(){
print_title "LAMP SERVER - APACHE, MYSQL & PHP + ADMINER\n# https://wiki.archlinux.org/index.php/LAMP"
question_for_answer "Install LAMP"
case "$OPTION" in
    "y")
        pacman -S --noconfirm --needed apache mysql php php-apache php-mcrypt php-gd
        if ! checkpackage "adminer" ; then
            package_install "adminer"
            rc.d start httpd mysqld
            #CONFIGURE LAMP SERVER {{{
            /usr/bin/mysql_secure_installation
            echo -e '\n# adminer configuration\nInclude conf/extra/httpd-adminer.conf' >> /etc/httpd/conf/httpd.conf
            echo -e 'application/x-httpd-php        php' >> /etc/httpd/conf/mime.types
            sed -i '/LoadModule dir_module modules\/mod_dir.so/a\LoadModule php5_module modules\/libphp5.so' /etc/httpd/conf/httpd.conf
            echo -e '\n# Use for PHP 5.x:\nInclude conf/extra/php5_module.conf\nAddHandler php5-script php' >> /etc/httpd/conf/httpd.conf
            sed -i 's/DirectoryIndex\ index.html/DirectoryIndex\ index.html\ index.php/g' /etc/httpd/conf/httpd.conf
            sed -i 's/public_html/Sites/g' /etc/httpd/conf/extra/httpd-userdir.conf
            sed -i '/mysqli.so/s/^;//' /etc/php/php.ini
            sed -i '/mysql.so/s/^;//' /etc/php/php.ini
            sed -i '/mcrypt.so/s/^;//' /etc/php/php.ini
            sed -i '/gd.so/s/^;//' /etc/php/php.ini
            sed -i '/display_errors[=]/s/off/on/' /etc/php/php.ini
            sed -i '/skip-networking/s/^/#/' /etc/mysql/my.cnf
            #}}}
        fi
        su -l $USERNAME --command="mkdir -p ~/Sites"
        su -l $USERNAME --command="chmod o+x ~/ && chmod -R g+xr-w ~/Sites"
        rc.d restart httpd mysqld
        add_daemon "httpd @mysqld"
        install_status
        print_line
        echo "The folder \"Sites\" has been created in your home"
        echo "You can access your projects at \"http://localhost/~username\""
        ;;
    *)
        CURRENT_STATUS=0
        ;;
esac
sumary "LAMP installation"
pause_function
}
#}}}
#AUDIO {{{
function install_audio_apps(){
while [ 1 ]
do
    print_title "AUDIO APPS "
    echo " 1) $(checkbox_package "amarok") Amarok"
    echo " 2) $(checkbox_package "banshee") Banshee"
    echo " 3) $(checkbox_package "beatbox-bzr") Beatbox"
    echo " 4) $(checkbox_package "clementine") Clementine"
    echo " 5) $(checkbox_package "decibel-audio-player2") Decibel"
    echo " 6) $(checkbox_package "exaile") Exaile"
    echo " 7) $(checkbox_package "gmusicbrowser-development") Gmusicbrowser"
    echo " 8) $(checkbox_package "musique") Musique"
    echo " 9) $(checkbox_package "nuvola-bzr-stable") Nuvola"
    echo "10) $(checkbox_package "rhythmbox") Rhythmbox"
    echo "11) $(checkbox_package "spotify") Spotify"
    echo "12) $(checkbox_package "puddletag") Puddletag"
    echo "13) $(checkbox_package "timidity++") MIDI"
    echo "14) $(checkbox_package "gstreamer0.10-ugly") Codecs"
    echo "15) $(checkbox_package "audacity") Audacity"
    echo ""
    echo " b) BACK"
    echo ""
    read -p "Please enter your choice: " OPTION
    case "$OPTION" in
        1)
            package_manager "amarok"
            ;;
        2)
            package_manager "banshee"
            ;;
        3)
            package_manager "beatbox-bzr"
            ;;
        4)
            package_manager "clementine"
            ;;
        5)
            package_manager "decibel-audio-player2"
            ;;
        6)
            package_manager "exaile"
            ;;
        7)
            package_manager "gmusicbrowser-development"
            ;;
        8)
            package_manager "musique"
            ;;
        9)
            package_manager "nuvola-bzr-stable"
            ;;
        10)
            package_manager "rhythmbox"
            ;;
        11)
            package_manager "spotify"
            ;;
        12)
            package_manager "puddletag"
            ;;
        13)
            package_manager "timidity++ fluidr3"
            echo -e 'soundfont /usr/share/soundfonts/fluidr3/FluidR3GM.SF2' >> /etc/timidity++/timidity.cfg
            ;;
        14)
            package_manager "gstreamer0.10-plugins"
            ;;
        15)
            package_manager "audacity"
            ;;
        *)
            break
            ;;
    esac
done
}
#}}}
#VIDEO {{{
function install_video_apps(){
while [ 1 ]
do
    print_title "VIDEO APPS "
    echo " 1) $(checkbox_package "gnome-mplayer") Gnome Mplayer"
    echo " 2) $(checkbox_package "parole") Parole"
    echo " 3) $(checkbox_package "minitube") Minitube"
    echo " 4) $(checkbox_package "rosa-media-player-bin") Rosa Media Player"
    echo " 5) $(checkbox_package "smplayer") SMplayer"
    echo " 6) $(checkbox_package "vlc") VLC"
    echo " 7) $(checkbox_package "xbmc") XBMC"
    echo " 8) $(checkbox_package "arista-transcoder") Arista"
    echo " 9) $(checkbox_package "transmageddon") Transmageddon"
    echo "10) $(if [ "$ARCHI" = "i686" ]; then echo "$(checkbox_package "codecs")"; else echo "$(checkbox_package "codecs64")"; fi) Codecs"
    echo "11) $(checkbox_package "kdenlive") Kdenlive"
    echo "12) $(checkbox_package "openshot") Openshot"
    echo "13) $(checkbox_package "pitivi") Pitivi"
    echo "14) $(checkbox_package "kazam-bzr") Kazam"
    echo ""
    echo " b) BACK"
    echo ""
    read -p "Please enter your choice: " OPTION
    case "$OPTION" in
        1)
            package_manager "gnome-mplayer"
            ;;
        2)
            package_manager "parole"
            ;;
        3)
            package_manager "minitube"
            ;;
        4)
            package_manager "rosa-media-player-bin"
            ;;
        5)
            package_manager "smplayer smplayer-themes"
            ;;
        6)
            package_manager "vlc"
            if [ "$KDE" -eq 1 ]; then
                package_manager "phonon-vlc"
            fi
            ;;
        7)
            package_manager "xbmc"
            ;;
        8)
            package_manager "arista-transcoder"
            ;;
        9)
            package_manager "transmageddon"
            ;;
        10)
            package_manager "libquicktime libdvdread libdvdnav libdvdcss cdrdao"
            if [ "$ARCHI" = "i686" ]; then
                package_manager "codecs"
            else
                package_manager "codecs64"
            fi
            ;;
        11)
            package_manager "kdenlive"
            ;;
        12)
            package_manager "openshot"
            ;;
        13)
            package_manager "pitivi"
            ;;
        14)
            package_manager "python-rsvg"
            package_manager "kazam-bzr"
            ;;
        *)
            break
            ;;
    esac
done
}
#}}}
#GAMES {{{
function install_games(){
while [ 1 ]
do
    print_title "GAMES - https://wiki.archlinux.org/index.php/Games"
    echo " 1) Action/Adventure"
    echo " 2) Arcade/Platformer"
    echo " 3) Dungeon"
    echo " 4) Emulators"
    echo " 5) FPS"
    echo " 6) MMO"
    echo " 7) Puzzle"
    echo " 8) RPG"
    echo " 9) Racing"
    echo "10) Simulation"
    echo "11) Strategy"
    echo ""
    echo " b) BACK"
    echo ""
    read -p "Please enter your choice: " OPTION
    case "$OPTION" in
        1)
            #ACTION/ADVENTURE {{{
            while [ 1 ]
            do
                print_title "ACTION AND ADVENTURE"
                echo " 1) $(checkbox_package "astromenace") Astromenace"
                echo " 2) $(checkbox_package "opentyrian-hg") OpenTyrian"
                echo " 3) $(checkbox_package "mars-shooter") M.A.R.S."
                echo " 4) $(checkbox_package "yofrankie") Yo Frankie!"
                echo " 5) $(checkbox_package "counter-strike-2d") Counter-Strike 2D"
                echo ""
                echo " b) BACK"
                echo ""
                read -p "Please enter your choice: " OPTION
                case "$OPTION" in
                    1)
                        package_manager "astromenace"
                        ;;
                    2)
                        package_manager "opentyrian-hg"
                        ;;
                    3)
                        package_manager "mars-shooter"
                        ;;
                    4)
                        package_manager "yofrankie"
                        ;;
                    5)
                        package_manager "counter-strike-2d"
                        ;;
                    *)
                        break
                        ;;
                esac
            done
            ;;
            #}}}
            2)
            #ARCADE/PLATFORMER {{{
            while [ 1 ]
            do
                print_title "ARCADE AND PLATFORMER"
                echo " 1) $(checkbox_package "opensonic") Opensonic"
                echo " 2) $(checkbox_package "frogatto") Frogatto"
                echo " 3) $(checkbox_package "bomberclone") Bomberclone"
                echo " 4) $(checkbox_package "goonies") Goonies"
                echo " 5) $(checkbox_package "neverball") Neverball"
                echo " 6) $(checkbox_package "smc") Super Mario Chronicles"
                echo " 7) $(checkbox_package "xmoto") X-Moto"
                echo ""
                echo " b) BACK"
                echo ""
                read -p "Please enter your choice: " OPTION
                case "$OPTION" in
                    1)
                        package_manager "opensonic"
                        ;;
                    2)
                        package_manager "frogatto"
                        ;;
                    3)
                        package_manager "bomberclone"
                        ;;
                    4)
                        package_manager "goonies"
                        ;;
                    5)
                        package_manager "neverball"
                        ;;
                    6)
                        package_manager "smc"
                        ;;
                    7)
                        package_manager "xmoto"
                        ;;
                    *)
                        break
                        ;;
                esac
            done
            ;;
            #}}}
            3)
            #DUNGEON {{{
            while [ 1 ]
            do
                print_title "DUNGEON"
                echo " 1) $(checkbox_package "tome4") Tales of MajEyal"
                echo " 2) $(checkbox_package "lostlabyrinth") Lost Labyrinth"
                echo " 3) $(checkbox_package "scourge") S.C.O.U.R.G.E."
                echo ""
                echo " b) BACK"
                echo ""
                read -p "Please enter your choice: " OPTION
                case "$OPTION" in
                    1)
                        package_manager "tome4"
                        ;;
                    2)
                        package_manager "lostlabyrinth"
                        ;;
                    3)
                        package_manager "scourge"
                        ;;
                    *)
                        break
                        ;;
                esac
            done
            ;;
            #}}}
            4)
            #EMULATORS {{{
            while [ 1 ]
            do
                print_title "EMULATORS"

                echo " 1) $(checkbox_package "vba-m-gtk-svn") VisualBoyAdvanced"
                echo " 2) $(checkbox_package "zsnes") ZSNES"
                echo ""
                echo " b) BACK"
                echo ""
                read -p "Please enter your choice: " OPTION
                case "$OPTION" in
                    1)
                        package_manager "vba-m-gtk-svn"
                        ;;
                    2)
                        package_manager "zsnes"
                        ;;
                    *)
                        break
                        ;;
                esac
            done
            ;;
            #}}}
            5)
            #FPS {{{
            while [ 1 ]
            do
                print_title "FPS"
                echo " 1) $(checkbox_package "alienarena") AlienArena"
                echo " 2) $(checkbox_package "enemy-territory") Wolfenstein: Enemy Territory"
                echo " 3) $(checkbox_package "worldofpadman") World of Padman"
                echo " 4) $(checkbox_package "warsow") Warsow"
                echo ""
                echo " b) BACK"
                echo ""
                read -p "Please enter your choice: " OPTION
                case "$OPTION" in
                    1)
                        package_manager "alienarena"
                        ;;
                    2)
                        package_manager "enemy-territory"
                        ;;
                    3)
                        package_manager "worldofpadman"
                        ;;
                    4)
                        package_manager "warsow"
                        ;;
                    *)
                        break
                        ;;
                esac
            done
            ;;
            #}}}
            6)
            #MMO {{{
            while [ 1 ]
            do
                print_title "MMO"
                echo " 1) $(checkbox_package "hon") Heroes of Newerth"
                echo " 2) $(checkbox_package "savage2") Savage II"
                echo " 3) $(checkbox_package "spiral-knights") Spiral Knights"
                echo ""
                echo " b) BACK"
                echo ""
                read -p "Please enter your choice: " OPTION
                case "$OPTION" in
                    1)
                        package_manager "hon"
                        ;;
                    2)
                        package_manager "savage2"
                        ;;
                    3)
                        package_manager "spiral-knights"
                        ;;
                    *)
                        break
                        ;;
                esac
            done
            ;;
            #}}}
            7)
            #PUZZLE {{{
            while [ 1 ]
            do
                print_title "PUZZLE"
                echo " 1) $(checkbox_package "numptyphysics-svn") Numptyphysics"
                echo ""
                echo " b) BACK"
                echo ""
                read -p "Please enter your choice: " OPTION
                case "$OPTION" in
                    1)
                        package_manager "numptyphysics-svn"
                        ;;
                    *)
                        break
                        ;;
                esac
            done
            ;;
            #}}}
            8)
            #RPG {{{
            while [ 1 ]
            do
                print_title "RPG"
                echo " 1) $(checkbox_package "ardentryst") Ardentryst"
                echo ""
                echo " b) BACK"
                echo ""
                read -p "Please enter your choice: " OPTION
                case "$OPTION" in
                    1)
                        package_manager "ardentryst"
                        ;;
                    *)
                        break
                        ;;
                esac
            done
            ;;
            #}}}
            9)
            #RACING {{{
            while [ 1 ]
            do
                print_title "RACING"
                echo " 1) $(checkbox_package "maniadrive") Maniadrive"
                echo " 2) $(checkbox_package "death-rally") Death Rally"
                echo " 3) $(checkbox_package "supertuxkart") SupertuxKart"
                echo " 4) $(checkbox_package "speed-dreams") Speed Dreams"
                echo ""
                echo " b) BACK"
                echo ""
                read -p "Please enter your choice: " OPTION
                case "$OPTION" in
                    1)
                        package_manager "maniadrive"
                        ;;
                    2)
                        package_manager "death-rally"
                        ;;
                    3)
                        package_manager "supertuxkart"
                        ;;
                    4)
                        package_manager "speed-dreams"
                        ;;
                    *)
                        break
                        ;;
                esac
            done
            ;;
            #}}}
            10)
            #SIMULATION {{{
            while [ 1 ]
            do
                print_title "SIMULATION"
                echo " 1) $(checkbox_package "simutrans") Simultrans"
                echo " 2) $(checkbox_package "corsix-th") Theme Hospital"
                echo " 3) $(checkbox_package "openttd") OpenTTD"
                echo ""
                echo " b) BACK"
                echo ""
                read -p "Please enter your choice: " OPTION
                case "$OPTION" in
                    1)
                        package_manager "simutrans"
                        ;;
                    2)
                        package_manager "corsix-th"
                        ;;
                    3)
                        package_manager "openttd"
                        ;;
                    *)
                        break
                        ;;
                esac
            done
            ;;
            #}}}
            11)
            #STRATEGY {{{
            while [ 1 ]
            do
                print_title "STRATEGY"
                echo " 1) $(checkbox_package "wesnoth") Wesnoth"
                echo " 3) $(checkbox_package "0ad") 0ad"
                echo " 4) $(checkbox_package "hedgewars") Hedgewars"
                echo " 5) $(checkbox_package "warzone2100") Warzone 2100"
                echo " 6) $(checkbox_package "megaglest") MegaGlest"
                echo " 7) $(checkbox_package "zod") Zod"
                echo ""
                echo " b) BACK"
                echo ""
                read -p "Please enter your choice: " OPTION
                case "$OPTION" in
                    1)
                        package_manager "wesnoth"
                        ;;
                    3)
                        package_manager "0ad"
                        ;;
                    4)
                        package_manager "hedgewars"
                        ;;
                    5)
                        package_manager "warzone2100"
                        ;;
                    6)
                        package_manager "megaglest"
                        ;;
                    7)
                        package_manager "commander-zod"
                        ;;
                    *)
                        break
                        ;;
                esac
            done
            ;;
            #}}}
            *)
            break
            ;;
    esac
done
}
#}}}
#FONTS {{{
function install_fonts(){
while [ 1 ]
do
    print_title "FONTS - https://wiki.archlinux.org/index.php/Fonts"
    echo " 1) $(checkbox_package "ttf-dejavu") ttf-dejavu"
    echo " 2) $(checkbox_package "ttf-google-webfonts") ttf-google-webfonts (This may take a while)"
    echo " 3) $(checkbox_package "ttf-kochi-substitute") ttf-kochi-substitute (Japanese Support)"
    echo " 4) $(checkbox_package "ttf-liberation") ttf-liberation"
    echo " 5) $(checkbox_package "ttf-ms-fonts") ttf-ms-fonts"
    echo " 6) $(checkbox_package "ttf-roboto") ttf-roboto"
    echo " 7) $(checkbox_package "ttf-vista-fonts") ttf-vista-fonts"
    echo " 8) $(checkbox_package "ttf-mac-fonts") ttf-mac-fonts"
    echo ""
    echo " a) ALL"
    echo " b) BACK"
    echo ""
    read -p "Please enter your choice: " OPTION
    case "$OPTION" in
        1)
            package_manager "ttf-dejavu"
            ;;
        2)
            pacman -Rdd --noconfirm ttf-droid
            pacman -Rdd --noconfirm ttf-ubuntu-font-family
            package_manager "ttf-google-webfonts"
            ;;
        3)
            package_manager "ttf-kochi-substitute"
            ;;
        4)
            package_manager "ttf-liberation"
            ;;
        5)
            package_manager "ttf-ms-fonts"
            ;;
        6)
            package_manager "ttf-roboto"
            ;;
        7)
            package_manager "ttf-vista-fonts"
            ;;
        8)
            package_manager "ttf-mac-fonts"
            ;;
        "a")
            pacman -Rdd --noconfirm ttf-droid
            pacman -Rdd --noconfirm ttf-ubuntu-font-family
            package_manager "ttf-ms-fonts ttf-dejavu ttf-liberation ttf-kochi-substitute ttf-roboto ttf-google-webfonts ttf-vista-fonts ttf-mac-fonts"
            ;;
        *)
            break
            ;;
    esac
done
}
#}}}
#FONTS CONFIGURATION {{{
function configure_fonts(){
    print_title "FONTS CONFIGURATION - https://wiki.archlinux.org/index.php/Font_Configuration"
    echo " 1) Ubuntu patched packages"
    echo " 2) Cleartype patched packages"
    echo ""
    echo " b) BACK"
    echo ""
    read -p "Please enter your choice: " OPTION
    case "$OPTION" in
        1)
            pacman -Rdd --noconfirm cairo fontconfig freetype2 libxft
            package_install "cairo-ubuntu fontconfig-ubuntu freetype2-ubuntu"
            install_status
            ;;
        2)
            pacman -Rdd --noconfirm cairo fontconfig freetype2 libxft
            package_install "freetype2-cleartype libxft-cleartype cairo-cleartype"
            install_status
            ;;
        *)
            CURRENT_STATUS=0
            ;;
    esac
    sumary "Patched Fonts Configuration installation"
    pause_function
}
#}}}
#CLEAN ORPHAN PACKAGES {{{
    function clean_orphan_packages(){
    print_title "CLEAN ORPHAN PACKAGES"
    pacman -Rsc --noconfirm $(pacman -Qqdt)
    #pacman -Sc --noconfirm
    pacman-optimize
}
#}}}
#FINISH {{{
function finish(){
    print_title "INSTALL COMPLETED"
    reboot_now
    echo "Thanks for using the Archlinux Ultimate Install script by helmuthdu"
    exit 0
}
#}}}

#MAIN {{{
welcome
check_root
language_selector
system_upgrade
select_user
choose_aurhelper

while [ 1 ]
do
    print_title "ARCHLINUX ULTIMATE INSTALL - https://github.com/helmuthdu/aui"
    echo " 1) $(checkbox $BASICSETUP) Basic Setup"
    echo " 2) $(checkbox $DESKTOPENVIRONMENT) Desktop Environment"
    echo " 3) $(checkbox $ACCESSORIESAPPS) Accessories Apps"
    echo " 4) $(checkbox $DEVELOPMENTAPPS) Development Apps"
    echo " 5) $(checkbox $OFFICEAPPS) Office Apps"
    echo " 6) $(checkbox $SYSTEMAPPS) System Apps"
    echo " 7) $(checkbox $GRAPHICSAPPS) Graphics Apps"
    echo " 8) $(checkbox $INTERNETAPPS) Internet Apps"
    echo " 9) $(checkbox $AUDIOAPPS) Audio Apps"
    echo "10) $(checkbox $VIDEOAPPS) Video Apps"
    echo "11) $(checkbox $LAMP) LAMP"
    echo "12) $(checkbox $GAMES) Games"
    echo "13) $(checkbox $FONTS) Fonts"
    echo "14) $(checkbox $FONTSCONFIG) Fonts Configuration"
    echo "15) $(checkbox $CLEANPACKAGES) Clean Orphan Packages"
    echo ""
    echo " q) Quit"
    echo ""
    read -p "Please enter your choice: " OPTION
    case "$OPTION" in
        1)
            rankmirror
            pacman_package_signing
            install_basic_setup
            install_tlp
            install_xorg
            install_video_cards
            install_cups
            install_additional_firmwares
            install_git_tor
            install_status
            sumary "Basic setup installation"
            pause_function
            BASICSETUP=1
            ;;
        2)
            if [ $BASICSETUP -eq 0 ]; then
                echo -e "\nWARNING: YOU MUST RUN THE BASIC SETUP FIRST"
                question_for_answer "Are you sure you want to continue?"
                if [ $OPTION = "n" ]; then continue; fi
            fi
            install_desktop_environment
            install_nm_wicd
            DESKTOPENVIRONMENT=1
            ;;
        3)
            install_accessories_apps
            ACCESSORIESAPPS=1
            ;;
        4)
            install_development_apps
            DEVELOPMENTAPPS=1
            ;;
        5)
            install_office_apps
            OFFICEAPPS=1
            ;;
        6)
            install_system_apps
            SYSTEMAPPS=1
            ;;
        7)
            install_graphics_apps
            GRAPHICSAPPS=1
            ;;
        8)
            install_internet_apps
            INTERNETAPPS=1
            ;;
        9)
            install_audio_apps
            AUDIOAPPS=1
            ;;
        10)
            install_video_apps
            VIDEOAPPS=1
            ;;
        11)
            install_lamp
            LAMP=1
            ;;
        12)
            install_games
            GAMES=1
            ;;
        13)
            install_fonts
            FONTS=1
            ;;
        14)
            configure_fonts
            FONTSCONFIG=1
            ;;
        15)
            clean_orphan_packages
            CLEANPACKAGES=1
            ;;
        "q")
            finish
            ;;
        *)
            print_line
            echo "Invalid option. Try another one."
            pause_function
            ;;
    esac
done
#}}}
