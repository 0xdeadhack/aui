#!/bin/bash
#-------------------------------------------------------------------------------
#Created by helmuthdu mailto: helmuthdu[at]gmail[dot]com
#Inspired by Andreas Freitag, aka nexxx script
#-------------------------------------------------------------------------------
#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with this program.  If not, see <http://www.gnu.org/licenses/>.
#-------------------------------------------------------------------------------
# Run this script after your first boot with archlinux (as root)

KDE=0
LXDE=0
XFCE=0
GNOME=0
OPENBOX=0

YAOURT=0
PACKER=0

BASICSETUP=0
DESKTOPENVIRONMENT=0
DEVELOPMENTAPPS=0
OFFICEAPPS=0
SYSTEMAPPS=0
GRAPHICSAPPS=0
INTERNETAPPS=0
AUDIOAPPS=0
VIDEOAPPS=0
LAMP=0
GAMES=0
FONTS=0
FONTSCONFIG=0
CLEANPACKAGES=0

ARCHI=`uname -m`

# Automatically detects the system language based on your rc.conf#{{{
LOCATION=`cat /etc/rc.conf | sed -n '/LOCALE=/p' | sed '1!d' | cut -c9-13`
#KDE #{{{
    if [ $LOCATION = "pt_BR" ] || [ $LOCATION = "en_GB" ] || [ $LOCATION = "zh_CN" ]; then
        LOCATION_KDE=`echo $LOCATION | tr '[:upper:]' '[:lower:]'`
    elif [ $LOCATION = "en_US" ]; then
        LOCATION_KDE="en_gb"
    else
        LOCATION_KDE=`echo $LOCATION | cut -d\_ -f1`
    fi
#}}}
#FIREFOX #{{{
    if [ $LOCATION = "pt_BR" ] || [ $LOCATION = "pt_PT" ] || [ $LOCATION = "en_GB" ] || [ $LOCATION = "es_AR" ] || [ $LOCATION = "es_ES" ] || [ $LOCATION = "zh_CN" ]; then
        LOCATION_FF=`echo $LOCATION | tr '[:upper:]' '[:lower:]' | sed 's/_/-/'`
    elif [ $LOCATION = "en_US" ]; then
        LOCATION_FF="en-gb"
    else
        LOCATION_FF=`echo $LOCATION | cut -d\_ -f1`
    fi
#}}}
#HUNSPELL #{{{
    if [ $LOCATION = "pt_BR" ]; then
        LOCATION_HS=`echo $LOCATION | tr '[:upper:]' '[:lower:]' | sed 's/_/-/'`
    elif [ $LOCATION = "pt_PT" ]; then
        LOCATION_HS="pt_pt"
    else
        LOCATION_HS=`echo $LOCATION | cut -d\_ -f1`
    fi
#}}}
#LIBREOFFICE #{{{
    if [ $LOCATION = "pt_BR" ] || [ $LOCATION = "en_GB" ] || [ $LOCATION = "en_US" ] || [ $LOCATION = "zh_CN" ]; then
        LOCATION_LO=`echo $LOCATION | sed 's/_/-/'`
    else
        LOCATION_LO=`echo $LOCATION | cut -d\_ -f1`
    fi
#}}}
#}}}

function question_for_answer(){ #{{{
    read -p "$1 [y][N]: " OPTION
    OPTION=`echo "$OPTION" | tr '[:upper:]' '[:lower:]'`
    echo ""
} #}}}
function print_line(){ #{{{
    printf "%$(tput cols)s\n"|tr ' ' '-'
} #}}}
function print_title (){ #{{{
    clear
    print_line
    echo -e "# $1"
    print_line
    echo ""
} #}}}
function checkbox(){ #{{{
    if [[ $1 -eq 1 ]]; then
        echo "[X]"
    else
        echo "[ ]"
    fi
} #}}}
function add_daemon(){ #{{{
    remove_daemon "$1"
    sed -i '/DAEMONS[=]/s/\(.*\)\>/& '"$1"'/' /etc/rc.conf
} #}}}
function remove_daemon(){ #{{{
    sed -i '/DAEMONS[=]/s/'"$1"' //' /etc/rc.conf
} #}}}
function add_module(){ #{{{
    remove_module "$1"
    sed -i '/MODULES[=]/s/\(.*\)\>/& '"$1"'/' /etc/rc.conf
    #sed -i '/MODULES[=]/s/^[^ ]*\>/& '"$1"'/' /etc/rc.conf
} #}}}
function remove_module(){ #{{{
    sed -i '/MODULES[=]/s/'"$1"' //' /etc/rc.conf
} #}}}
function aurhelper_install(){ #{{{
    for PACKAGE in $1; do
        if !(pacman -Q $PACKAGE &>/dev/null) ; then
            if [ "$YAOURT" -eq 1 ]; then
                su -l $USERNAME --command="yaourt -S --noconfirm $PACKAGE"
            else
                su -l $USERNAME --command="packer -S --noconfirm $PACKAGE"
            fi
        else
            echo -e "Package $PACKAGE already installed"
        fi
    done
    for PACKAGE in $1; do
        if !(pacman -Q $PACKAGE &>/dev/null) ; then
            question_for_answer "Package $PACKAGE not installed, try install again?"
            if [ $OPTION = "y" ]; then
                if [ "$YAOURT" -eq 1 ]; then
                    su -l $USERNAME --command="yaourt -S $PACKAGE"
                else
                    su -l $USERNAME --command="packer -S --skipinteg $PACKAGE"
                fi
            fi
        fi
    done
} #}}}
function install_status(){ #{{{
    if [ $? -ne 0 ] ; then
        CURRENT_STATUS=-1
    else
        CURRENT_STATUS=1
    fi
} #}}}
function pause_function(){ #{{{
    print_line
    read -e -sn 1 -p "Press any key to continue..."
} #}}}
function sumary(){ #{{{
    case $CURRENT_STATUS in
        0)
            print_line
            echo "$1 not successfull (Canceled)"
            ;;
        -1)
            print_line
            echo "$1 not successfull (Error)"
            ;;
        1)
            print_line
            echo "$1 successfull"
            ;;
        *)
            print_line
            echo "WRONG ARG GIVEN"
            ;;
    esac
} #}}}
function reboot_now(){ #{{{
    question_for_answer "Reboot now?"
    case "$OPTION" in
        "y")
            echo "Thanks for using the Archlinux Ultimate Install script by helmuthdu"
            echo "Your Computer will now restart"
            pause_function
            reboot
            exit 0
            ;;
        *)
            ;;
    esac
} #}}}

#WELCOME {{{
function welcome(){
    clear
    echo "Welcome to the Archlinux Ultimate install script by helmuthdu"
    print_line
    echo "Requirements:"
    echo "-> Archlinux installation"
    echo "-> Run script as root user"
    echo "-> Working internet connection"
    print_line
    echo "Script can be canceled all the time with CTRL+C"
    print_line
    echo "it's highly recommended you read this script before use it"
    echo "This version is still in BETA. Send bugreports to: "
    echo "helmuthdu at gmail dot com"
    pause_function

}
#}}}
#CHECK ROOT {{{
function check_root() {
    CURRENTUSER="$(whoami)"
    if [ $CURRENTUSER != "root" ]; then
        echo "Current user is NOT 'root'. EXIT now"
        pause_function
        exit 1
    fi
}
#}}}
#LANGUAGE SELECTOR {{{
function language_selector(){
    print_title "LANGUAGE - https://wiki.archlinux.org/index.php/Locale"
    question_for_answer "Default system language: \"$LOCATION\""
    case "$OPTION" in
        "n")
            read -p "New system language [ex: en_US]: " LOCATION
            #KDE #{{{
            if [ $LOCATION = "pt_BR" ] || [ $LOCATION = "en_GB" ] || [ $LOCATION = "zh_CN" ]; then
                LOCATION_KDE=`echo $LOCATION | tr '[:upper:]' '[:lower:]'`
            elif [ $LOCATION = "en_US" ]; then
                LOCATION_KDE="en_gb"
            else
                LOCATION_KDE=`echo $LOCATION | cut -d\_ -f1`
            fi
            #}}}
            #FIREFOX #{{{
            if [ $LOCATION = "pt_BR" ] || [ $LOCATION = "pt_PT" ] || [ $LOCATION = "en_GB" ] || [ $LOCATION = "es_AR" ] || [ $LOCATION = "es_ES" ] || [ $LOCATION = "zh_CN" ]; then
                LOCATION_FF=`echo $LOCATION | tr '[:upper:]' '[:lower:]' | sed 's/_/-/'`
            elif [ $LOCATION = "en_US" ]; then
                LOCATION_FF="en-gb"
            else
                LOCATION_FF=`echo $LOCATION | cut -d\_ -f1`
            fi
            #}}}
            #HUNSPELL #{{{
            if [ $LOCATION = "pt_BR" ]; then
                LOCATION_HS=`echo $LOCATION | tr '[:upper:]' '[:lower:]' | sed 's/_/-/'`
            elif [ $LOCATION = "pt_PT" ]; then
                LOCATION_HS="pt_pt"
            else
                LOCATION_HS=`echo $LOCATION | cut -d\_ -f1`
            fi
            #}}}
            #LIBREOFFICE #{{{
            if [ $LOCATION = "pt_BR" ] || [ $LOCATION = "en_GB" ] || [ $LOCATION = "en_US" ] || [ $LOCATION = "zh_CN" ]; then
                LOCATION_LO=`echo $LOCATION | sed 's/_/-/'`
            else
                LOCATION_LO=`echo $LOCATION | cut -d\_ -f1`
            fi
            #}}}
            ;;
        *)
            ;;
    esac
    pause_function
}
#}}}
#CUSTOM REPOSITORIES {{{
function custom_repositories(){
    print_title "CUSTOM REPOSITORIES - https://wiki.archlinux.org/index.php/Unofficial_User_Repositories"
    question_for_answer "Add custom repositories"
    case "$OPTION" in
        "y")
        #CUSTOM REPOSITORIES {{{
            LOOP=1
            while [ "$LOOP" -ne 0 ]
            do
                print_title "CUSTOM REPOSITORIES - https://wiki.archlinux.org/index.php/Unofficial_User_Repositories"
                echo " 1) Ayatana"
                echo " 2) Archlinuxfr"
                if [ "$ARCHI" = "x86_64" ]; then echo " 3) Multilib"; fi
                echo ""
                echo " a) \"Add Custom\""
                echo ""
                echo " d) DONE"
                echo ""
                read -p "Option: " OPTION
                case "$OPTION" in
                    1)
                        echo -e '\n[ayatana]\nServer = http://repo.ayatana.info/' >> /etc/pacman.conf
                        pause_function
                        ;;
                    2)
                        echo -e '\n[archlinuxfr]\nServer = http://repo.archlinux.fr/$arch' >> /etc/pacman.conf
                        pause_function
                        ;;
                    3)
                        echo -e "\n[multilib]\nInclude = /etc/pacman.d/mirrorlist" >> /etc/pacman.conf
                        pause_function
                        ;;
                    "a")
                        read -p "Repository Name [ex: custom]: " REPONAME
                        read -p "Repository Address [ex: file:///media/backup/Archlinux/]: " REPOADDRESS
                        echo -e '\n['"$REPONAME"']\nServer = '"$REPOADDRESS"'$arch' >> /etc/pacman.conf
                        pause_function
                        ;;
                    *)
                        LOOP=0
                        ;;
                esac
            done
            pacman -Sy
            install_status
            ;;
        #}}}
        *)
            CURRENT_STATUS=0
            ;;
    esac
    sumary "Custom repositories installation"
    pause_function
}
#}}}
#RANKMIRROR {{{
function rankmirror(){
    print_title "RANKMIRROR - https://wiki.archlinux.org/index.php/Improve_Pacman_Performance"
    question_for_answer "Choosing the fastest mirror using rankmirror (this can take a while)"
    case "$OPTION" in
        "y")
            cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.backup
            sed -i '/^#\S/ s|#||' /etc/pacman.d/mirrorlist.backup
            rankmirrors -n 5 /etc/pacman.d/mirrorlist.backup > /etc/pacman.d/mirrorlist
            install_status
            ;;
        *)
            CURRENT_STATUS=0
            ;;
    esac
    sumary "New mirrorlist creation"
    pause_function
}
#}}}
#SYSTEM UPDATE {{{
function system_upgrade(){
    print_title "UPDATING YOUR SYSTEM"
    pacman -Syuf
    reboot_now
}
#}}}
#CREATE A NEW USER {{{
function create_user(){
    print_title "CREATE USER ACCOUNT - https://wiki.archlinux.org/index.php/Users_and_Groups"
    read -p "New username: " USERNAME
    useradd -m -g users -G audio,lp,optical,storage,video,wheel,games,power,scanner,network -s /bin/bash $USERNAME
    passwd $USERNAME
    #SET USER AS SUDO #{{{
        print_title "SUDO - https://wiki.archlinux.org/index.php/Sudo"
        pacman -S --noconfirm --needed sudo
        ## Uncomment to allow members of group wheel to execute any command
        sed -i '/%wheel ALL=(ALL) ALL/s/^#//' /etc/sudoers
        ## Same thing without a password (not secure)
        #sed -i '/%wheel ALL=(ALL) NOPASSWD: ALL/s/^#//' /etc/sudoers
    #}}}
}
#}}}
#AUR HELPER {{{
function choose_aurhelper(){
    LOOP=1
    while [ "$LOOP" -ne 0 ]
    do
        print_title "AUR HELPER - https://wiki.archlinux.org/index.php/AUR_Helpers"
        echo "Choose your default AUR helper to install"
        echo " 1) Yaourt"
        echo " 2) Packer"
        echo ""
        read -p "Option: " OPTION
        case "$OPTION" in
            1)
                if !(pacman -Q yaourt &>/dev/null) ; then
                    pacman -S --noconfirm --needed base-devel yajl
                    su -l $USERNAME --command="
                        wget http://aur.archlinux.org/packages/package-query/package-query.tar.gz;
                        tar zxvf package-query.tar.gz;
                        cd package-query;
                        makepkg -si --noconfirm;
                        cd ..;
                        rm -fr package-query*
                    "
                    su -l $USERNAME --command="
                        wget http://aur.archlinux.org/packages/yaourt/yaourt.tar.gz;
                        tar zxvf yaourt.tar.gz;
                        cd yaourt;
                        makepkg -si --noconfirm;
                        cd ..;
                        rm -fr yaourt*
                    "
                    if !(pacman -Q yaourt &>/dev/null) ; then
                        echo "Yaourt not installed. EXIT now"
                        pause_function
                        exit 0
                    fi
                fi
                install_status
                YAOURT=1
                LOOP=0
                ;;
            2)
                if !(pacman -Q packer &>/dev/null) ; then
                    pacman -S --noconfirm --needed git jshon curl
                    su -l $USERNAME --command="
                        wget http://aur.archlinux.org/packages/pa/packer/packer.tar.gz;
                        tar zxvf packer.tar.gz;
                        cd packer;
                        makepkg -si --noconfirm;
                        cd ..;
                        rm -fr packer*
                    "
                    if !(pacman -Q packer &>/dev/null) ; then
                        echo "Packer not installed. EXIT now"
                        pause_function
                        exit 0
                    fi
                fi
                install_status
                PACKER=1
                LOOP=0
                ;;
            *)
                echo "Wrong option"
                pause_function
                LOOP=1
                ;;
        esac
    done
    sumary "AUR Helper installation"
    pause_function
}
#}}}
#PACKMAN PACKAGE SIGNING {{{
function pacman_package_signing(){
    print_title "PACMAN PACKAGE SIGNING - https://wiki.archlinux.org/index.php/Pacman-key"
    question_for_answer "Automatically configure pacman package signing"
    case "$OPTION" in
        "y")
            pacman -S --noconfirm --needed base-devel
            aurhelper_install "rng-tools"
            sed -i '/timeout/s/0/10/' /etc/conf.d/rngd
            rngd -f -r /dev/urandom &
            pacman-key --init
            killall rngd
            pacman -Rns --noconfirm rng-tools
            #DEVELOPER AND TU KEYS {{{
            curl https://www.archlinux.org/{developers,trustedusers}/ |
            awk -F\" '(/pgp.mit.edu/) {sub(/.*search=0x/,"");print $1}' |
            xargs pacman-key --recv-keys
            #}}}
            sed -i '/SigLevel\ [=]\ Optional\ TrustAll/s/^#//' /etc/pacman.conf
            sed -i '/SigLevel\ [=]\ Never/s/^/#/' /etc/pacman.conf
            install_status
            ;;
        *)
            CURRENT_STATUS=0
            ;;
    esac
    sumary "Pacman signing configuration"
    pause_function
}
#}}}
#BASIC SETUP{{{
function install_basic_setup(){
    print_title "BASH TOOLS - https://wiki.archlinux.org/index.php/Bash"
    pacman -S --noconfirm --needed curl bc rsync mlocate bash-completion vim net-tools
    print_title "(UN)COMPRESS TOOLS - https://wiki.archlinux.org/index.php/P7zip"
    pacman -S --noconfirm --needed zip unzip unrar p7zip
    aurhelper_install "rar"
    print_title "DBUS - https://wiki.archlinux.org/index.php/D-Bus"
    pacman -S --noconfirm --needed dbus
    add_daemon "dbus"
    rc.d start dbus
    print_title "ACPI - https://wiki.archlinux.org/index.php/ACPI_modules"
    pacman -S --noconfirm --needed acpi acpid
    add_daemon "acpid"
    print_title "NTFS/FAT - https://wiki.archlinux.org/index.php/Ntfs"
    pacman -S --noconfirm --needed ntfs-3g ntfsprogs dosfstools
    print_title "SSH - https://wiki.archlinux.org/index.php/Ssh"
    pacman -S --noconfirm --needed rssh openssh
    add_daemon "@sshd"
    #CONFIGURE SSH #{{{
        echo -e "sshd: ALL\n# End of file" > /etc/hosts.allow
        echo -e "ALL: ALL: DENY\n# End of file" > /etc/hosts.deny
        #SSHD_CONF #{{{
            sed -i '/ListenAddress/s/^#//' /etc/ssh/sshd_config
            sed -i '/SyslogFacility/s/^#//' /etc/ssh/sshd_config
            sed -i '/LogLevel/s/^#//' /etc/ssh/sshd_config
            sed -i '/LoginGraceTime/s/^#//' /etc/ssh/sshd_config
            sed -i '/PermitRootLogin/s/^#//' /etc/ssh/sshd_config
            sed -i '/StrictModes/s/^#//' /etc/ssh/sshd_config
            sed -i '/RSAAuthentication/s/^#//' /etc/ssh/sshd_config
            sed -i '/PubkeyAuthentication/s/^#//' /etc/ssh/sshd_config
            sed -i '/IgnoreRhosts/s/^#//' /etc/ssh/sshd_config
            sed -i '/PermitEmptyPasswords/s/^#//' /etc/ssh/sshd_config
            sed -i '/X11Forwarding/s/^#//' /etc/ssh/sshd_config
            sed -i '/X11Forwarding/s/no/yes/' /etc/ssh/sshd_config
            sed -i '/X11DisplayOffset/s/^#//' /etc/ssh/sshd_config
            sed -i '/X11UseLocalhost/s/^#//' /etc/ssh/sshd_config
            sed -i '/PrintMotd/s/^#//' /etc/ssh/sshd_config
            sed -i '/PrintMotd/s/yes/no/' /etc/ssh/sshd_config
            sed -i '/PrintLastLog/s/^#//' /etc/ssh/sshd_config
            sed -i '/TCPKeepAlive/s/^#//' /etc/ssh/sshd_config
            sed -i '/the setting of/s/^/#/' /etc/ssh/sshd_config
            sed -i '/RhostsRSAAuthentication and HostbasedAuthentication/s/^/#/' /etc/ssh/sshd_config
            sed -i '/ListenAddress\ ::/s/^/#/' /etc/ssh/sshd_config
        #}}}
    #}}}
    print_title "SAMBA - https://wiki.archlinux.org/index.php/Samba"
    pacman -S --noconfirm --needed samba
    cp /etc/samba/smb.conf.default /etc/samba/smb.conf
    add_daemon "@samba"
    print_title "ALSA - https://wiki.archlinux.org/index.php/Alsa"
    pacman -S --noconfirm --needed alsa-utils alsa-plugins
    sed -i '/MODULES[=]/s/snd-usb-audio//' /etc/rc.conf
    sed -i '/MODULES[=]/s/MODULES[=](/&snd-usb-audio/' /etc/rc.conf
    add_daemon "@alsa"
}
#}}}
#TLP #{{{
function install_tlp(){
    print_title "TLP - https://wiki.archlinux.org/index.php/TLP"
    question_for_answer "Install TLP (great battery improvement on laptops)"
    case "$OPTION" in
        "y")
            aurhelper_install "tlp"
            pacman -S --noconfirm --needed upower
            add_daemon "@tlp"
            install_status
            ;;
        *)
            CURRENT_STATUS=0
            ;;
    esac
    sumary "TLP installation"
    pause_function
}
#}}}
#XORG {{{
function install_xorg(){
    print_title "XORG - https://wiki.archlinux.org/index.php/Xorg"
    echo "Installing X-Server (req. for Desktopenvironment, GPU Drivers, Keyboardlayout,...)"
    pacman -S --noconfirm --needed xorg-server xorg-xinit xorg-xkill
    pacman -S --noconfirm --needed xf86-input-synaptics xf86-input-mouse xf86-input-keyboard
    pacman -S --noconfirm --needed mesa
    pacman -S --noconfirm --needed gamin
}
#}}}
#VIDEO CARDS {{{
function install_video_cards(){
    print_title "VIDEO CARD"
    echo "Select your GPU:"
    echo " 1) Intel"
    echo " 2) ATI"
    echo " 3) nVidia"
    echo " 4) Nouveau"
    echo " 5) Virtualbox"
    echo " 6) Vesa"
    echo ""
    echo " s) SKIP"
    echo ""
    read -p "Option: " OPTION
    case "$OPTION" in
        1)
            pacman -S --noconfirm --needed libgl xf86-video-intel
            install_status
            sumary "Intel GPU driver installation"
            ;;
        2)
            aurhelper_install "catalyst catalyst-utils"
            install_status
            sumary "ATI GPU driver installation"
            ;;
        3)
            pacman -Rdd --noconfirm libgl
            pacman -S --noconfirm --needed nvidia nvidia-utils
            install_status
            sumary "nVidia GPU driver installation"
            ;;
        4)
            pacman -S --noconfirm --needed libgl xf86-video-nouveau nouveau-dri
            modprobe nouveau
            add_module "nouveau"
            install_status
            sumary "Nouveau GPU driver installation"
            ;;
        5)
            pacman -S --noconfirm --needed virtualbox-archlinux-additions
            modprobe -a vboxguest vboxsf vboxvideo
            add_module "vboxguest vboxsf vboxvideo"
            groupadd vboxsf
            gpasswd -a $USERNAME vboxsf
            install_status
            sumary "Virtualbox guest additions (incl. video drivers) installation"
            ;;
        6)
            pacman -S --noconfirm --needed xf86-video-vesa
            install_status
            sumary "Vesa GPU driver installation"
            ;;
        *)
            CURRENT_STATUS=0
            sumary "GPU drivers installation"
            ;;
    esac
    pause_function
}
#}}}
#CUPS {{{
function install_cups(){
    print_title "CUPS - https://wiki.archlinux.org/index.php/Cups"
    pacman -S --noconfirm --needed cups ghostscript gsfonts
    pacman -S --noconfirm --needed gutenprint foomatic-db foomatic-db-engine foomatic-db-nonfree foomatic-filters hplip splix cups-pdf
    add_daemon "@cupsd"
}
#}}}
#ADDITIONAL FIRMWARE {{{
function install_additional_firmwares(){
    print_title "INSTALL ADDITIONAL FIRMWARES"
    question_for_answer "Install additional firmwares [Wireless,Bluetooth]"
    case "$OPTION" in
        "y")
        #ADDITIONAL FIRMWARE {{{
            LOOP=1
            while [ "$LOOP" -ne 0 ]
            do
                print_title "INSTALL ADDITIONAL FIRMWARES"
                echo " 1) ipw2100"
                echo " 2) ipw2200"
                echo " 3) b43"
                echo " 4) b43legacy"
                echo " 5) broadcom-wl"
                echo " 6) bluez-firmware"
                echo " 7) Wireless Tools"
                echo ""
                echo " d) DONE"
                echo ""
                read -p "Option: " OPTION
                case "$OPTION" in
                    1)
                        aurhelper_install "ipw2100-fw"
                        pause_function
                        ;;
                    2)
                        aurhelper_install "ipw2200-fw"
                        pause_function
                        ;;
                    3)
                        aurhelper_install "b43-firmware"
                        pause_function
                        ;;
                    4)
                        aurhelper_install "b43-firmware-legacy"
                        pause_function
                        ;;
                    5)
                        aurhelper_install "broadcom-wl"
                        pause_function
                        ;;
                    6)
                        aurhelper_install "bluez-firmware"
                        pause_function
                        ;;
                    7)
                        aurhelper_install "wireless-regdb rfkill crda wpa_supplicant"
                        pause_function
                        ;;
                    *)
                        LOOP=0
                        ;;
                esac
            done
            install_status
            ;;
        #}}}
        *)
            CURRENT_STATUS=0
            ;;
    esac
    sumary "Additional Firmware"
    pause_function
}
#}}}
#GIT ACCESS THRU A FIREWALL {{{
function install_git_tor(){
    print_title "GIT-TOR - https://wiki.archlinux.org/index.php/Tor"
    question_for_answer "Ensuring access to GIT through a firewall (bypass college firewall)"
    case "$OPTION" in
        "y")
            aurhelper_install "gtk-doc openbsd-netcat vidalia privoxy git"
            if [ ! -f /usr/bin/proxy-wrapper ]; then
                echo 'forward-socks5   /               127.0.0.1:9050 .' >> /etc/privoxy/config
                echo -e '#!/bin/bash\nnc.openbsd -xlocalhost:9050 -X5 $*' > /usr/bin/proxy-wrapper
                chmod +x /usr/bin/proxy-wrapper
                echo -e '\nexport GIT_PROXY_COMMAND="/usr/bin/proxy-wrapper"' >> /etc/bash.bashrc
                export GIT_PROXY_COMMAND="/usr/bin/proxy-wrapper"
                su -l $USERNAME --command="export GIT_PROXY_COMMAND=\"/usr/bin/proxy-wrapper\""
            fi
            groupadd -g 42 privoxy
            useradd -u 42 -g privoxy -s /bin/false -d /etc/privoxy privoxy
            pacman -S --noconfirm tor privoxy
            rc.d start tor privoxy
            su -l $USERNAME --command="sudo /etc/rc.d/tor restart"
            su -l $USERNAME --command="sudo /etc/rc.d/privoxy restart"
            add_daemon "@tor @privoxy"
            install_status
            ;;
        *)
            CURRENT_STATUS=0
            ;;
    esac
    sumary "GIT-TOR installation"
    pause_function
}
#}}}
#DESKTOP ENVIRONMENT {{{
function install_desktop_environment(){
    print_title "DESKTOP ENVIRONMENT - https://wiki.archlinux.org/index.php/Desktop_Environment"
    echo "Choose your desktop-environment:"
    echo " 1) GNOME"
    echo " 2) KDE"
    echo " 3) XFCE"
    echo " 4) LXDE"
    echo " 5) OpenBox"
    echo ""
    echo " b) BACK"
    read -p "Option: " OPTION
    case "$OPTION" in
        1)
            #GNOME {{{
            print_title "GNOME - https://wiki.archlinux.org/index.php/GNOME"
            pacman -S --noconfirm --needed gnome gnome-extra
            gpasswd -a $USERNAME camera
            pacman -S --noconfirm --needed gedit-plugins gnome-tweak-tool
            pacman -S --noconfirm --needed gksu gvfs-smb xdg-user-dirs
            pacman -S --noconfirm --needed pulseaudio-gnome telepathy deja-dup
            pacman -S --noconfirm --needed system-config-printer-gnome
            aurhelper_install "zeitgeist libzeitgeist zeitgeist-datahub"
            aurhelper_install "automounter nautilus-open-terminal gnome-defaults-list"
            #FAVORITE GNOME APPS {{{
            LOOP=1
            while [ "$LOOP" -ne 0 ]
            do
                print_title "FAVORITE GNOME APPS"
                echo " 1) Cairo Dock"
                echo " 2) Conky + CONKY-colors"
                echo " 3) Gnome Icons [Faience, Faenza, Elementary]"
                echo " 4) Gnome Themes [Zukitwo, Orion, eGTK, Light, Aldabra]"
                echo " 5) GnomeShell Extensions"
                echo " 6) GnomeShell Themes [eOS, Nord, Faience, Dark Shine]"
                echo " 7) Gnome Activity Journal "
                echo " 8) Packagekit"
                echo " 9) Shutter"
                echo "10) Synapse"
                echo "11) Terminator"
                echo ""
                echo " a) ALL"
                echo " d) DONE"
                echo ""
                read -p "Option: " OPTION
                case "$OPTION" in
                    1)
                        aurhelper_install "cairo-dock-bzr cairo-dock-plugins-bzr"
                        ;;
                    2)
                        aurhelper_install "conky conky-colors"
                        add_module "coretemp it87 acpi-cpufreq"
                        ;;
                    3)
                        aurhelper_install "faenza-icon-theme faience-icon-theme faenza-cupertino-icon-theme elementary-icons"
                        ;;
                    4)
                        aurhelper_install "egtk-bzr"
                        aurhelper_install "zukitwo-themes orion-gtk-theme light-themes gtk-theme-aldabra"
                        ;;
                    5)
                        aurhelper_install "libkeybinder3"
                        aurhelper_install "gpaste gnome-shell-system-monitor-applet-git gnome-shell-extension-noa11y-git gnome-shell-extension-weather-git gnome-shell-extension-user-theme gnome-shell-extension-pomodoro gnome-shell-extension-mediaplayer-git gnome-shell-extension-gtile-git"
                        ;;
                    6)
                        aurhelper_install "gnome-shell-theme-faience gnome-shell-theme-nord gnome-shell-theme-eos gnome-shell-theme-dark-shine"
                        ;;
                    7)
                        aurhelper_install "gnome-activity-journal"
                        ;;
                    8)
                        pacman -S --noconfirm --needed gnome-packagekit gnome-settings-daemon-updates
                        ;;
                    9)
                        aurhelper_install "shutter"
                        ;;
                    10)
                        aurhelper_install "synapse"
                        ;;
                    11)
                        aurhelper_install "python-keybinder"
                        pacman -S --noconfirm --needed terminator
                        ;;
                    "a")
                        pacman -S --noconfirm --needed gnome-packagekit gnome-settings-daemon-updates
                        pacman -S --noconfirm --needed terminator
                        aurhelper_install "cairo-dock-bzr cairo-dock-plugins-bzr"
                        aurhelper_install "conky conky-colors"
                        aurhelper_install "faenza-icon-theme faience-icon-theme faenza-cupertino-icon-theme elementary-icons"
                        aurhelper_install "gnome-activity-journal"
                        aurhelper_install "gnome-shell-theme-faience gnome-shell-theme-nord gnome-shell-theme-eos"
                        aurhelper_install "libkeybinder3"
                        aurhelper_install "gpaste gnome-shell-system-monitor-applet-git gnome-shell-extension-noa11y-git gnome-shell-extension-weather-git gnome-shell-extension-user-theme gnome-shell-extension-pomodoro gnome-shell-extension-mediaplayer-git gnome-shell-extension-gtile-git"
                        aurhelper_install "python-keybinder"
                        aurhelper_install "shutter"
                        aurhelper_install "synapse"
                        aurhelper_install "egtk-bzr"
                        aurhelper_install "zukitwo-themes orion-gtk-theme light-themes gtk-theme-aldabra"
                        add_module "coretemp it87 acpi-cpufreq"
                        LOOP=0
                        ;;
                    *)
                        LOOP=0
                        ;;
                esac
                pause_function
            done
            #}}}
            add_daemon "gdm"
            install_status
            GNOME=1
            ;;
            #}}}
        2)
            #KDE {{{
            print_title "KDE - https://wiki.archlinux.org/index.php/KDE"
            pacman -S --noconfirm --needed kde kde-l10n-$LOCATION_KDE kipi-plugins
            pacman -Rcsn kdemultimedia-kscd kdemultimedia-juk kdemultimedia-dragonplayer
            pacman -S --noconfirm --needed kdeadmin-system-config-printer-kde xdg-user-dirs
            aurhelper_install "kde-gtk-config-git"
            aurhelper_install "oxygen-gtk2 oxygen-gtk3 qtcurve-gtk2 qtcurve-kde4 bespin-svn"
            #FAVORITE KDE APPS {{{
            LOOP=1
            while [ "$LOOP" -ne 0 ]
            do
                print_title "FAVORITE KDE APPS"
                echo " 1) Apper"
                echo " 2) Bangarang"
                echo " 3) Choqok"
                echo " 4) Digikam"
                echo " 5) K3b"
                echo " 6) KDE Icons [KFaenza]"
                echo " 7) Minitube"
                echo " 8) Musique"
                echo " 9) Plasma Themes [Caledonia, Produkt]"
                echo "10) QtCurve Themes [Kawai, Sweet]"
                echo "11) Speedcrunch"
                echo "12) Yakuake"
                echo ""
                echo " a) ALL"
                echo " d) DONE"
                echo ""
                read -p "Option: " OPTION
                case "$OPTION" in
                    1)
                        aurhelper_install "apper"
                        ;;
                    2)
                        aurhelper_install "bangarang"
                        ;;
                    3)
                        pacman -S --noconfirm --needed choqok
                        ;;
                    4)
                        pacman -S --noconfirm --needed digikam
                        ;;
                    5)
                        pacman -S --noconfirm --needed k3b dvd+rw-tools
                        ;;
                    6)
                        aurhelper_install "kfaenza-icon-theme"
                        ;;
                    7)
                        aurhelper_install "minitube"
                        ;;
                    8)
                        aurhelper_install "musique"
                        ;;
                    9)
                        aurhelper_install "caledonia-bundle plasma-theme-produkt"
                        ;;
                    10)
                        #QtCurve Themes #{{{
                        wget http://kde-look.org/CONTENT/content-files/144205-Sweet.tar.gz
                        wget http://kde-look.org/CONTENT/content-files/141920-Kawai.tar.gz
                        tar zxvf 144205-Sweet.tar.gz
                        tar zxvf 141920-Kawai.tar.gz
                        rm 144205-Sweet.tar.gz
                        rm 141920-Kawai.tar.gz
                        mkdir -p /home/$USERNAME/.kde4/share/apps/color-schemes
                        mv Sweet/Sweet.colors /home/$USERNAME/.kde4/share/apps/color-schemes
                        mv Kawai/Kawai.colors /home/$USERNAME/.kde4/share/apps/color-schemes
                        mkdir -p /home/$USERNAME/.kde4/share/apps/QtCurve
                        mv Sweet/Sweet.qtcurve /home/$USERNAME/.kde4/share/apps/QtCurve
                        mv Kawai/Kawai.qtcurve /home/$USERNAME/.kde4/share/apps/QtCurve
                        chown -R $USERNAME:users /home/$USERNAME/.kde4
                        rm -fr Kawai Sweet
                        #}}}
                        ;;
                    11)
                        aurhelper_install "speedcrunch"
                        ;;
                    12)
                        pacman -S --noconfirm --needed yakuake
                        aurhelper_install "yakuake-skin-plasma-oxygen-panel"
                        ;;
                    "a")
                        pacman -S --noconfirm --needed choqok
                        pacman -S --noconfirm --needed digikam
                        pacman -S --noconfirm --needed k3b dvd+rw-tools
                        pacman -S --noconfirm --needed yakuake
                        aurhelper_install "apper"
                        aurhelper_install "bangarang"
                        aurhelper_install "caledonia-bundle plasma-theme-produkt"
                        aurhelper_install "kfaenza-icon-theme"
                        aurhelper_install "minitube"
                        aurhelper_install "musique"
                        aurhelper_install "speedcrunch"
                        aurhelper_install "yakuake-skin-plasma-oxygen-panel"
                        #QTCURVE THEMES #{{{
                        wget http://kde-look.org/CONTENT/content-files/144205-Sweet.tar.gz
                        wget http://kde-look.org/CONTENT/content-files/141920-Kawai.tar.gz
                        tar zxvf 144205-Sweet.tar.gz
                        tar zxvf 141920-Kawai.tar.gz
                        rm 144205-Sweet.tar.gz
                        rm 141920-Kawai.tar.gz
                        mkdir -p /home/$USERNAME/.kde4/share/apps/color-schemes
                        mv Sweet/Sweet.colors /home/$USERNAME/.kde4/share/apps/color-schemes
                        mv Kawai/Kawai.colors /home/$USERNAME/.kde4/share/apps/color-schemes
                        mkdir -p /home/$USERNAME/.kde4/share/apps/QtCurve
                        mv Sweet/Sweet.qtcurve /home/$USERNAME/.kde4/share/apps/QtCurve
                        mv Kawai/Kawai.qtcurve /home/$USERNAME/.kde4/share/apps/QtCurve
                        chown -R $USERNAME:users /home/$USERNAME/.kde4
                        rm -fr Kawai Sweet
                        #}}}
                        LOOP=0
                        ;;
                    *)
                        LOOP=0
                        ;;
                esac
                pause_function
            done
            #}}}
            add_daemon "kdm"
            install_status
            KDE=1
            ;;
            #}}}
        3)
            #XFCE {{{
            print_title "XFCE - https://wiki.archlinux.org/index.php/Xfce"
            pacman -S --noconfirm --needed xfce4 xfce4-goodies
            pacman -S --noconfirm --needed polkit-gnome gvfs-smb xdg-user-dirs
            aurhelper_install "automounter"
            aurhelper_install "gnome-defaults-list"
            #FAVORITE XFCE APPS {{{
            LOOP=1
            while [ "$LOOP" -ne 0 ]
            do
                print_title "FAVORITE GNOME APPS"
                echo " 1) Cairo Dock"
                echo " 2) Conky + CONKY-colors"
                echo " 3) Icons [Faience, Faenza, Elementary]"
                echo " 4) Kupfer"
                echo " 5) Shutter"
                echo " 6) Terminator"
                echo " 7) Themes [Zukitwo]"
                echo ""
                echo " d) DONE"
                echo ""
                read -p "Option: " OPTION
                case "$OPTION" in
                    1)
                        aurhelper_install "cairo-dock-bzr cairo-dock-plugins-bzr"
                        ;;
                    2)
                        aurhelper_install "conky conky-colors"
                        add_module "coretemp it87 acpi-cpufreq"
                        ;;
                    3)
                        aurhelper_install "faenza-icon-theme faience-icon-theme faenza-cupertino-icon-theme elementary-icons"
                        ;;
                    4)
                        aurhelper_install "kupfer"
                        ;;
                    5)
                        aurhelper_install "shutter"
                        ;;
                    6)
                        pacman -S --noconfirm --needed terminator
                        aurhelper_install "python-keybinder"
                        ;;
                    7)
                        aurhelper_install "zukitwo-themes"
                        ;;
                    *)
                        LOOP=0
                        ;;
                esac
                pause_function
            done
            #}}}
            install_status
            XFCE=1
            ;;
            #}}}
        4)
            #LXDE {{{
            print_title "LXDE - http://wiki.archlinux.org/index.php/lxde"
            pacman -S --noconfirm --needed lxde obconf
            pacman -S --noconfirm --needed leafpad xarchiver epdfview
            pacman -S --noconfirm --needed pm-utils upower
            pacman -S --noconfirm --needed polkit-gnome gvfs gvfs-smb xdg-user-dirs
            aurhelper_install "gnome-defaults-list"
            #FAVORITE LXDE APPS {{{
            LOOP=1
            while [ "$LOOP" -ne 0 ]
            do
                print_title "FAVORITE LXDE APPS"
                echo " 1) Conky + CONKY-colors"
                echo " 2) Galculator"
                echo " 3) Icons [Faience, Faenza, Elementary]"
                echo " 4) Irssi"
                echo " 5) Kupfer"
                echo " 6) Shutter"
                echo " 7) Terminator"
                echo " 8) Xfburn"
                echo ""
                echo " d) DONE"
                echo ""
                read -p "Option: " OPTION
                case "$OPTION" in
                    1)
                        aurhelper_install "conky conky-colors"
                        add_module "coretemp it87 acpi-cpufreq"
                        ;;
                    2)
                        pacman -S --noconfirm --needed galculator
                        ;;
                    3)
                        aurhelper_install "faenza-icon-theme faience-icon-theme faenza-cupertino-icon-theme elementary-icons"
                        ;;
                    4)
                        pacman -S --noconfirm --needed irssi
                        ;;
                    5)
                        aurhelper_install "kupfer"
                        ;;
                    6)
                        aurhelper_install "shutter"
                        ;;
                    7)
                        pacman -S --noconfirm --needed terminator
                        aurhelper_install "python-keybinder"
                        ;;
                    8)
                        pacman -S --noconfirm --needed xfburn
                        ;;
                    *)
                        LOOP=0
                        ;;
                esac
                pause_function
            done
            #}}}
            add_daemon "lxdm"
            install_status
            LXDE=1
            ;;
            #}}}
        5)
            #OPENBOX {{{
            print_title "OPENBOX - http://wiki.archlinux.org/index.php/Openbox"
            pacman -S --noconfirm --needed openbox obconf obmenu menumaker
            pacman -S --noconfirm --needed lxappearance consolekit
            pacman -S --noconfirm --needed xdg-user-dirs
            pacman -S --noconfirm --needed leafpad xarchiver epdfview nitrogen
            aurhelper_install "gnome-defaults-list"
            mkdir -p /home/$USERNAME/.config/openbox/
            cp /etc/xdg/openbox/rc.xml /home/$USERNAME/.config/openbox/
            cp /etc/xdg/openbox/menu.xml /home/$USERNAME/.config/openbox/
            cp /etc/xdg/openbox/autostart /home/$USERNAME/.config/openbox/
            echo -e 'exec ck-launch-session dbus-launch openbox-session' >> /home/$USERNAME/.xinitrc
            chown -R $USERNAME:users /home/$USERNAME/.config
            chown $USERNAME:users /home/$USERNAME/.xinitrc
            #FAVORITE OPENBOX APPS {{{
            LOOP=1
            while [ "$LOOP" -ne 0 ]
            do
                print_title "FAVORITE OPENBOX APPS"
                echo " 1) Conky + CONKY-colors"
                echo " 2) Galculator"
                echo " 3) Gthumb"
                echo " 4) Icons [Faience, Faenza, Elementary]"
                echo " 5) Irssi"
                echo " 6) Kupfer"
                echo " 7) Shutter"
                echo " 8) Terminator"
                echo " 9) Thunar"
                echo "10) Tint2"
                echo "11) Volwheel"
                echo "12) Xfburn"
                echo ""
                echo " d) DONE"
                echo ""
                read -p "Option: " OPTION
                case "$OPTION" in
                    1)
                        aurhelper_install "conky conky-colors"
                        add_module "coretemp it87 acpi-cpufreq"
                        ;;
                    2)
                        pacman -S --noconfirm --needed galculator
                        ;;
                    3)
                        pacman -S --noconfirm --needed gthumb
                        ;;
                    4)
                        aurhelper_install "faenza-icon-theme faience-icon-theme faenza-cupertino-icon-theme elementary-icons"
                        ;;
                    5)
                        pacman -S --noconfirm --needed irssi
                        ;;
                    6)
                        aurhelper_install "kupfer"
                        ;;
                    7)
                        aurhelper_install "shutter"
                        ;;
                    8)
                        pacman -S --noconfirm --needed terminator
                        aurhelper_install "python-keybinder"
                        ;;
                    9)
                        pacman -S --noconfirm --needed polkit-gnome gvfs-smb thunar
                        ;;
                    10)
                        pacman -S --noconfirm --needed tint2
                        ;;
                    11)
                        pacman -S --noconfirm --needed volwheel
                        ;;
                    12)
                        pacman -S --noconfirm --needed xfburn
                        ;;
                    *)
                        LOOP=0
                        ;;
                esac
                pause_function
            done
            #}}}
            install_status
            XFCE=1
            ;;
            #}}}
        *)
            CURRENT_STATUS=0
            ;;
    esac
    sumary "Desktop Environment Installation"
    pause_function
}
#}}}
#NETWORKMANAGER/WICD {{{
function install_nm_wicd(){
    print_title "NETWORK CONNECTION MANAGER"
    echo " 1) Networkmanager"
    echo " 2) Wicd"
    echo ""
    echo " s) SKIP"
    echo ""
    read -p "Option: " OPTION
    case "$OPTION" in
        1)
            print_title "NETWORKMANAGER - https://wiki.archlinux.org/index.php/Networkmanager"
            if [ "$GNOME" -eq 1 ] || [ "$XFCE" -eq 1 ] || [ "$LXDE" -eq 1 ]; then
                pacman -S --noconfirm --needed networkmanager network-manager-applet
            elif [ "$KDE" -eq 1 ]; then
                pacman -S --noconfirm --needed networkmanager kdeplasma-applets-networkmanagement
            else
                pacman -S --noconfirm --needed networkmanager
            fi
            groupadd networkmanager
            gpasswd -a $USERNAME networkmanager
            remove_daemon "network"
            add_daemon "@networkmanager"
            install_status
            ;;
        2)
            print_title "WICD - https://wiki.archlinux.org/index.php/Wicd"
            if [ "$GNOME" -eq 1 ] || [ "$XFCE" -eq 1 ] || [ "$LXDE" -eq 1 ]; then
                pacman -S --noconfirm --needed wicd wicd-gtk
            elif [ "$KDE" -eq 1 ]; then
                aurhelper_install "wicd wicd-kde"
            else
                pacman -S --noconfirm --needed wicd
            fi
            remove_daemon "network"
            add_daemon "@wicd"
            install_status
            ;;
        *)
            CURRENT_STATUS=0
            ;;
    esac
    sumary "Network Connection Manager installation"
    pause_function
}
#}}}
#DEVELOPEMENT {{{
function install_development_apps(){
LOOP=1
while [ "$LOOP" -ne 0 ]
do
    print_title "DEVELOPMENT APPS"
    echo " 1) Aptana Studio"
    echo " 2) Eclipse"
    echo " 3) Emacs"
    echo " 4) Gvim"
    echo " 5) IntelliJ IDEA"
    echo " 6) Netbeans"
    echo " 7) Oracle Java"
    echo " 8) QT Creator"
    echo " 9) Sublime Text 2"
    echo "10) Debugger Tools [Valgrind, Gdb, Splint, Tidyhtml, Pyflakes, Jsl]"
    echo "11) MySQL Workbench"
    echo "12) Meld"
    echo ""
    echo " b) BACK"
    echo ""
    read -p "Option: " OPTION
    case "$OPTION" in
        1)
            aurhelper_install "aptana-studio"
            pause_function
            ;;
        2)
            #ECLIPSE {{{
            while [ "$LOOP" -ne 0 ]
            do
                print_title "ECLIPSE - https://wiki.archlinux.org/index.php/Eclipse"
                echo " 1) Eclipse Classic"
                echo " 2) Eclipse IDE for C/C++ Developers "
                echo " 3) Android Development Tools for Eclipse"
                echo " 4) Web Development Tools for Eclipse"
                echo " 5) PHP Development Tools for Eclipse"
                echo " 6) Python Development Tools for Eclipse"
                echo " 7) Aptana Studio plugin for Eclipse"
                echo " 8) Vim-like editing plugin for Eclipse"
                echo " 9) Git support plugin for Eclipse"
                echo ""
                echo " b) BACK"
                echo ""
                read -p "Option: " OPTION
                case "$OPTION" in
                    1)
                        pacman -S --noconfirm --needed eclipse
                        pause_function
                        ;;
                    2)
                        pacman -S --noconfirm --needed eclipse-cdt
                        pause_function
                        ;;
                    3)
                        aurhelper_install "eclipse-android android-apktool android-sdk android-sdk-platform-tools android-udev"
                        pause_function
                        ;;
                    4)
                        aurhelper_install "eclipse-wtp-wst"
                        pause_function
                        ;;
                    5)
                        aurhelper_install "eclipse-pdt"
                        pause_function
                        ;;
                    6)
                        aurhelper_install "eclipse-pydev"
                        pause_function
                        ;;
                    7)
                        aurhelper_install "eclipse-aptana"
                        pause_function
                        ;;
                    8)
                        aurhelper_install "eclipse-vrapper"
                        pause_function
                        ;;
                    9)
                        aurhelper_install "eclipse-egit"
                        pause_function
                        ;;
                    *)
                        LOOP=0
                        ;;
                esac
            done
            LOOP=1
            #}}}
            ;;
        3)
            pacman -S --noconfirm --needed emacs
            pause_function
            ;;
        4)
            pacman -Rdd --noconfirm vim
            pacman -S --noconfirm --needed gvim wmctrl ctags
            aurhelper_install "discount"
            #HELMUTHDU'S VIMRC {{{
                pacman -S --noconfirm --needed git
                git clone git://github.com/helmuthdu/vim.git
                mv vim /home/$USERNAME/.vim
                git clone http://github.com/gmarik/vundle.git /home/$USERNAME/.vim/bundle/vundle
                ln -sf /home/$USERNAME/.vim/vimrc /home/$USERNAME/.vimrc
                chown -R $USERNAME:users /home/$USERNAME/.vim
                chown $USERNAME:users /home/$USERNAME/.vimrc
            #}}}
            pause_function
            ;;
        5)
            pacman -S --noconfirm --needed intellij-idea-community-edition
            pause_function
            ;;
        6)
            pacman -S --noconfirm --needed netbeans
            pause_function
            ;;
        7)
            pacman -Rdd --noconfirm jre7-openjdk
            pacman -Rdd --noconfirm jdk7-openjdk
            aurhelper_install "jdk"
            pause_function
            ;;
        8)
            pacman -S --noconfirm --needed qtcreator qt-doc
            mkdir -p /home/$USERNAME/.config/Nokia/qtcreator/styles
            wget http://angrycoding.googlecode.com/svn/branches/qt-creator-monokai-theme/monokai.xml
            mv monokai.xml /home/$USERNAME/.config/Nokia/qtcreator/styles/
            chown -R $USERNAME:users /home/$USERNAME/.config
            pause_function
            ;;
        9)
            aurhelper_install "sublime-text"
            pause_function
            ;;
        10)
            pacman -S --noconfirm --needed valgrind gdb splint tidyhtml pyflakes
            aurhelper_install "jsl"
            pause_function
            ;;
        11)
            aurhelper_install "mysql-workbench"
            pause_function
            ;;
        12)
            pacman -S --noconfirm --needed meld
            pause_function
            ;;
        *)
            LOOP=0
            ;;
    esac
done
}
#}}}
#OFFICE {{{
function install_office_apps(){
LOOP=1
while [ "$LOOP" -ne 0 ]
do
    print_title "OFFICE APPS"
    echo " 1) LibreOffice"
    echo " 2) GnomeOffice [Abiword, Gnumeric]"
    echo " 3) Latex"
    if [ "$KDE" -eq 1 ]; then echo " 4) Kchmviewer"; else echo " 4) Chmsee"; fi
    echo " 5) GCStar"
    echo " 6) Wunderlist"
    echo " 7) Xmind"
    echo " 8) Zathura"
    echo " 9) Impressive"
    echo ""
    echo " b) BACK"
    echo ""
    read -p "Option: " OPTION
    case "$OPTION" in
        1)
            pacman -S --noconfirm --needed libreoffice-$LOCATION_LO libreoffice-{base,calc,draw,impress,math,writer} libreoffice-extension-presenter-screen libreoffice-extension-pdfimport libreoffice-extension-diagram
            aurhelper_install "hunspell-$LOCATION_HS"
            if [ "$KDE" -eq 1 ]; then
                pacman -S --noconfirm --needed libreoffice-kde4
            else
                pacman -S --noconfirm --needed libreoffice-gnome
            fi
            pause_function
            ;;
        2)
            pacman -S --noconfirm --needed gnumeric abiword abiword-plugins
            pause_function
            ;;
        3)
            pacman -S --noconfirm --needed texlive-latexextra texlive-langextra
            aurhelper_install "texmaker"
            aurhelper_install "latex-template-springer latex-template-ieee latex-beamer"
            if [ $LOCATION = "pt_BR" ]; then
                aurhelper_install "abntex"
            fi
            pause_function
            ;;
        4)
            if [ "$KDE" -eq 1 ]; then
                pacman -S --noconfirm --needed kchmviewer
            else
                pacman -S --noconfirm --needed chmsee
            fi
            pause_function
            ;;
        5)
            pacman -S --noconfirm --needed gcstar
            pause_function
            ;;
        6)
            aurhelper_install "wunderlist"
            pause_function
            ;;
        7)
            aurhelper_install "xmind"
            pause_function
            ;;
        8)
            pacman -S --noconfirm --needed zathura
            pause_function
            ;;
        9)
            pacman -S --noconfirm --needed impressive
            pause_function
            ;;
        *)
            LOOP=0
            ;;
    esac
done
}
#}}}
#SYSTEM TOOLS {{{
function install_system_apps(){
LOOP=1
while [ "$LOOP" -ne 0 ]
do
    print_title "SYSTEM TOOLS APPS"
    echo " 1) Grsync"
    echo " 2) Htop"
    echo " 3) Virtualbox"
    echo " 4) Wine"
    echo ""
    echo " b) BACK"
    echo ""
    read -p "Option: " OPTION
    case "$OPTION" in
        1)
            pacman -S --noconfirm --needed grsync
            pause_function
            ;;
        2)
            pacman -S --noconfirm --needed htop
            pause_function
            ;;
        3)
            pacman -S --noconfirm --needed virtualbox virtualbox-additions
            aurhelper_install "virtualbox-ext-oracle"
            modprobe vboxdrv
            groupadd vboxusers
            gpasswd -a $USERNAME vboxusers
            add_module "vboxdrv"
            pause_function
            ;;
        4)
            pacman -S --noconfirm --needed wine wine_gecko winetricks
            pause_function
            ;;
        *)
            LOOP=0
            ;;
    esac
done
}
#}}}
#GRAPHICS {{{
function install_graphics_apps(){
LOOP=1
while [ "$LOOP" -ne 0 ]
do
    print_title "GRAPHICS APPS"
    echo " 1) Blender"
    echo " 2) Gimp"
    echo " 3) Gimp-plugins"
    echo " 4) Inkscape"
    echo " 5) MComix"
    echo " 6) Shotwell"
    echo ""
    echo " b) BACK"
    echo ""
    read -p "Option: " OPTION
    case "$OPTION" in
        1)
            pacman -S --noconfirm --needed blender
            pause_function
            ;;
        2)
            pacman -S --noconfirm --needed gimp
            pause_function
            ;;
        3)
            aurhelper_install "gimp-paint-studio gimp-resynth gimpfx-foundry gimp-plugin-pandora gimp-plugin-saveforweb"
            pause_function
            ;;
        4)
            pacman -S --noconfirm --needed inkscape uniconvertor python2-numpy python-lxml
            aurhelper_install "sozi"
            pause_function
            ;;
        5)
            pacman -S --noconfirm --needed mcomix
            pause_function
            ;;
        6)
            pacman -S --noconfirm --needed shotwell
            pause_function
            ;;
        *)
            LOOP=0
            ;;
    esac
done
}
#}}}
#INTERNET {{{
function install_internet_apps(){
LOOP=1
while [ "$LOOP" -ne 0 ]
do
    print_title "INTERNET APPS"
    echo " 1) Dropbox"
    echo " 2) Google Earth"
    echo " 3) Google Chrome"
    echo " 4) Jdownloader"
    echo " 5) Mozilla Firefox"
    echo " 6) Mozilla Thunderbird"
    echo " 7) Pidgin"
    echo " 8) Skype"
    echo " 9) TeamSpeak"
    echo "10) Teamviewer"
    echo "11) Trasmission"
    if [ "$KDE" -eq 1 ]; then echo "12) Konversation"; else echo "12) X-Chat"; fi
    echo ""
    echo " b) BACK"
    echo ""
    read -p "Option: " OPTION
    case "$OPTION" in
        1)
            aurhelper_install "dropbox"
            if [ "$GNOME" -eq 1 ]; then
                aurhelper_install "nautilus-dropbox"
            elif [ "$XFCE" -eq 1 ]; then
                aurhelper_install "thunar-dropbox"
            elif [ "$KDE" -eq 1 ]; then
                aurhelper_install "kfilebox"
            else
                aurhelper_install "dropbox-cli"
            fi
            pause_function
            ;;
        2)
            aurhelper_install "google-earth"
            pause_function
            ;;
        3)
            pacman -S --noconfirm --needed flashplugin
            aurhelper_install "google-chrome"
            pause_function
            ;;
        4)
            aurhelper_install "jdownloader"
            pause_function
            ;;
        5)
            pacman -S --noconfirm --needed firefox flashplugin firefox-i18n-$LOCATION_FF
            pause_function
            ;;
        6)
            pacman -S --noconfirm --needed thunderbird thunderbird-i18n-$LOCATION_FF
            pause_function
            ;;
        7)
            pacman -S --noconfirm --needed pidgin
            pause_function
            ;;
        8)
            pacman -S --noconfirm --needed skype
            pause_function
            ;;
        9)
            aurhelper_install "teamspeak3"
            pause_function
            ;;
        10)
            aurhelper_install "teamviewer"
            pause_function
            ;;
        11)
            if [ "$KDE" -eq 1 ]; then
                aurhelper_install "transmission-qt"
            else
                aurhelper_install "transmission-gtk"
            fi
            pause_function
            ;;
        12)
            if [ "$KDE" -eq 1 ]; then
                pacman -S --noconfirm --needed konversation
            else
                pacman -S --noconfirm --needed xchat
            fi
            pause_function
            ;;
        *)
            LOOP=0
            ;;
    esac
done
}
#}}}
#LAMP #{{{
function install_lamp(){
    print_title "LAMP SERVER - APACHE, MYSQL & PHP + ADMINER\n# https://wiki.archlinux.org/index.php/LAMP"
    question_for_answer "Install LAMP"
    case "$OPTION" in
        "y")
            pacman -S --noconfirm --needed apache mysql php php-apache php-mcrypt php-gd
            if !(pacman -Q adminer &>/dev/null) ; then
                aurhelper_install "adminer"
                rc.d start httpd mysqld
                #CONFIGURE LAMP SERVER {{{
                /usr/bin/mysql_secure_installation
                echo -e '\n# adminer configuration\nInclude conf/extra/httpd-adminer.conf' >> /etc/httpd/conf/httpd.conf
                echo -e 'application/x-httpd-php        php' >> /etc/httpd/conf/mime.types
                sed -i '/LoadModule dir_module modules\/mod_dir.so/a\LoadModule php5_module modules\/libphp5.so' /etc/httpd/conf/httpd.conf
                echo -e '\n# Use for PHP 5.x:\nInclude conf/extra/php5_module.conf\nAddHandler php5-script php' >> /etc/httpd/conf/httpd.conf
                sed -i 's/DirectoryIndex\ index.html/DirectoryIndex\ index.html\ index.php/g' /etc/httpd/conf/httpd.conf
                sed -i 's/public_html/Sites/g' /etc/httpd/conf/extra/httpd-userdir.conf
                sed -i '/mysqli.so/s/^;//' /etc/php/php.ini
                sed -i '/mysql.so/s/^;//' /etc/php/php.ini
                sed -i '/mcrypt.so/s/^;//' /etc/php/php.ini
                sed -i '/gd.so/s/^;//' /etc/php/php.ini
                sed -i '/display_errors[=]/s/off/on/' /etc/php/php.ini
                sed -i '/skip-networking/s/^/#/' /etc/mysql/my.cnf
                #}}}
            fi
            su -l $USERNAME --command="mkdir -p ~/Sites"
            su -l $USERNAME --command="chmod o+x ~/ && chmod -R g+xr-w ~/Sites"
            rc.d restart httpd mysqld
            add_daemon "httpd @mysqld"
            install_status
            print_line
            echo "The folder \"Sites\" has been created in your home"
            echo "You can access your projects at \"http://localhost/~username\""
            ;;
        *)
            CURRENT_STATUS=0
            ;;
    esac
    sumary "LAMP installation"
}
#}}}
#AUDIO {{{
function install_audio_apps(){
LOOP=1
while [ "$LOOP" -ne 0 ]
do
    print_title "AUDIO APPS "
    echo " 1) Amarok"
    echo " 2) Banshee"
    echo " 3) Beatbox"
    echo " 4) Clementine"
    echo " 5) Decibel"
    echo " 6) Exaile"
    echo " 7) Gmusicbrowser"
    echo " 8) Nuvola"
    echo " 9) Rhythmbox"
    echo "10) Puddletag"
    echo "11) MIDI"
    echo "12) Codecs"
    echo "13) Audacity"
    echo ""
    echo " b) BACK"
    echo ""
    read -p "Option: " OPTION
    case "$OPTION" in
        1)
            pacman -S --noconfirm --needed amarok
            pause_function
            ;;
        2)
            pacman -S --noconfirm --needed banshee
            pause_function
            ;;
        3)
            aurhelper_install "beatbox-bzr"
            pause_function
            ;;
        4)
            pacman -S --noconfirm --needed clementine
            pause_function
            ;;
        5)
            aurhelper_install "decibel-audio-player2"
            pause_function
            ;;
        6)
            aurhelper_install "exaile"
            pause_function
            ;;
        7)
            aurhelper_install "gmusicbrowser-development"
            pause_function
            ;;
        8)
            aurhelper_install "nuvola-bzr-stable"
            pause_function
            ;;
        9)
            pacman -S --noconfirm --needed rhythmbox
            pause_function
            ;;
        10)
            aurhelper_install "puddletag"
            pause_function
            ;;
        11)
            aurhelper_install "timidity++ fluidr3"
            echo -e 'soundfont /usr/share/soundfonts/fluidr3/FluidR3GM.SF2' >> /etc/timidity++/timidity.cfg
            pause_function
            ;;
        12)
            pacman -S --noconfirm --needed gstreamer0.10-plugins
            pause_function
            ;;
        13)
            pacman -S --noconfirm --needed audacity
            pause_function
            ;;
        *)
            LOOP=0
            ;;
    esac
done
}
#}}}
#VIDEO {{{
function install_video_apps(){
LOOP=1
while [ "$LOOP" -ne 0 ]
do
    print_title "VIDEO APPS "
    echo " 1) Gnome Mplayer"
    echo " 2) Parole"
    echo " 3) Rosa Media Player"
    echo " 4) SMplayer"
    echo " 5) VLC"
    echo " 6) XBMC"
    echo " 7) Arista"
    echo " 8) Transmageddon"
    echo " 9) Codecs"
    echo "10) Kdenlive"
    echo "11) Openshot"
    echo "12) Pitivi"
    echo "13) Kazam"
    echo ""
    echo " b) BACK"
    echo ""
    read -p "Option: " OPTION
    case "$OPTION" in
        1)
            pacman -S --noconfirm --needed gnome-mplayer
            pause_function
            ;;
        2)
            pacman -S --noconfirm --needed parole
            pause_function
            ;;
        3)
            aurhelper_install "rosa-media-player-bin"
            pause_function
            ;;
        4)
            pacman -S --noconfirm --needed smplayer smplayer-themes
            pause_function
            ;;
        5)
            pacman -S --noconfirm --needed vlc
            if [ "$KDE" -eq 1 ]; then
                pacman -S --noconfirm --needed phonon-vlc
            fi
            pause_function
            ;;
        6)
            pacman -S --noconfirm --needed xbmc
            pause_function
            ;;
        7)
            aurhelper_install "arista-transcoder"
            pause_function
            ;;
        8)
            aurhelper_install "transmageddon"
            pause_function
            ;;
        9)
            aurhelper_install "libquicktime libdvdread libdvdnav libdvdcss cdrdao"
            if [ "$ARCHI" = "i686" ]; then
                aurhelper_install "codecs"
            else
                aurhelper_install "codecs64"
            fi
            pause_function
            ;;
        10)
            pacman -S --noconfirm --needed kdenlive
            pause_function
            ;;
        11)
            pacman -S --noconfirm --needed openshot
            pause_function
            ;;
        12)
            pacman -S --noconfirm --needed pitivi
            pause_function
            ;;
        13)
            pacman -S --noconfirm --needed python-rsvg
            aurhelper_install "kazam-bzr"
            pause_function
            ;;
        *)
            LOOP=0
            ;;
    esac
done
}
#}}}
#GAMES {{{
function install_games(){
LOOP=1
while [ "$LOOP" -ne 0 ]
do
    print_title "GAMES - https://wiki.archlinux.org/index.php/Games"
    echo " 1) Action/Adventure"
    echo " 2) Arcade/Platformer"
    echo " 3) Dungeon"
    echo " 4) Emulators"
    echo " 5) FPS"
    echo " 6) MMO"
    echo " 7) Puzzle"
    echo " 8) RPG"
    echo " 9) Racing"
    echo "10) Simulation"
    echo "11) Strategy"
    echo ""
    echo " b) BACK"
    echo ""
    read -p "Option: " OPTION
    case "$OPTION" in
        1)
        #ACTION/ADVENTURE {{{
        while [ "$LOOP" -ne 0 ]
        do
            print_title "ACTION AND ADVENTURE"
            echo " 1) Astromenace"
            echo " 2) OpenTyrian"
            echo " 3) M.A.R.S."
            echo " 4) Yo Frankie!"
            echo " 5) Counter-Strike 2D"
            echo ""
            echo " b) BACK"
            echo ""
            read -p "Option: " OPTION
            case "$OPTION" in
                1)
                    aurhelper_install "astromenace"
                    pause_function
                    ;;
                2)
                    aurhelper_install "opentyrian-hg"
                    pause_function
                    ;;
                3)
                    aurhelper_install "mars-shooter"
                    pause_function
                    ;;
                4)
                    aurhelper_install "yofrankie"
                    pause_function
                    ;;
                5)
                    aurhelper_install "counter-strike-2d"
                    pause_function
                    ;;
                *)
                    LOOP=0
                    ;;
            esac
        done
        LOOP=1
        ;;
        #}}}
        2)
        #ARCADE/PLATFORMER {{{
        while [ "$LOOP" -ne 0 ]
        do
            print_title "ARCADE AND PLATFORMER"
            echo " 1) Opensonic"
            echo " 2) Frogatto"
            echo " 3) Bomberclone"
            echo " 4) Goonies"
            echo " 5) Neverball"
            echo " 6) Super Mario Chronicles"
            echo " 7) X-Moto"
            echo ""
            echo " b) BACK"
            echo ""
            read -p "Option: " OPTION
            case "$OPTION" in
                1)
                    aurhelper_install "opensonic"
                    pause_function
                    ;;
                2)
                    pacman -S --noconfirm --needed frogatto
                    pause_function
                    ;;
                3)
                    pacman -S --noconfirm --needed bomberclone
                    pause_function
                    ;;
                4)
                    aurhelper_install "goonies"
                    pause_function
                    ;;
                5)
                    pacman -S --noconfirm --needed neverball
                    pause_function
                    ;;
                6)
                    pacman -S --noconfirm --needed smc
                    pause_function
                    ;;
                7)
                    pacman -S --noconfirm --needed xmoto
                    pause_function
                    ;;
                *)
                    LOOP=0
                    ;;
            esac
        done
        LOOP=1
        ;;
        #}}}
        3)
        #DUNGEON {{{
        while [ "$LOOP" -ne 0 ]
        do
            print_title "DUNGEON"
            echo " 1) Tales of Maj'Eyal"
            echo " 2) Lost Labyrinth"
            echo " 3) S.C.O.U.R.G.E."
            echo ""
            echo " b) BACK"
            echo ""
            read -p "Option: " OPTION
            case "$OPTION" in
                1)
                    aurhelper_install "tome4"
                    pause_function
                    ;;
                2)
                    aurhelper_install "lostlabyrinth"
                    pause_function
                    ;;
                3)
                    aurhelper_install "scourge"
                    pause_function
                    ;;
                *)
                    LOOP=0
                    ;;
            esac
        done
        LOOP=1
        ;;
        #}}}
        4)
        #EMULATORS {{{
        while [ "$LOOP" -ne 0 ]
        do
            print_title "EMULATORS"
            echo " 1) ZSNES"
            echo ""
            echo " b) BACK"
            echo ""
            read -p "Option: " OPTION
            case "$OPTION" in
                1)
                    pacman -S --noconfirm --needed zsnes
                    pause_function
                    ;;
                *)
                    LOOP=0
                    ;;
            esac
        done
        LOOP=1
        ;;
        #}}}
        5)
        #FPS {{{
        while [ "$LOOP" -ne 0 ]
        do
            print_title "FPS"
            echo " 1) World of Padman"
            echo " 2) Warsow"
            echo ""
            echo " b) BACK"
            echo ""
            read -p "Option: " OPTION
            case "$OPTION" in
                1)
                    aurhelper_install "worldofpadman"
                    pause_function
                    ;;
                2)
                    pacman -S --noconfirm --needed warsow
                    pause_function
                    ;;
                3)
                    pacman -S --noconfirm --needed alienarena
                    pause_function
                    ;;
                *)
                    LOOP=0
                    ;;
            esac
        done
        LOOP=1
        ;;
        #}}}
        6)
        #MMO {{{
        while [ "$LOOP" -ne 0 ]
        do
            print_title "MMO"
            echo " 1) Heroes of Newerth"
            echo " 2) Spiral Knights"
            echo ""
            echo " b) BACK"
            echo ""
            read -p "Option: " OPTION
            case "$OPTION" in
                1)
                    aurhelper_install "hon"
                    pause_function
                    ;;
                2)
                    aurhelper_install "spiral-knights"
                    pause_function
                    ;;
                *)
                    LOOP=0
                    ;;
            esac
        done
        LOOP=1
        ;;
        #}}}
        7)
        #PUZZLE {{{
        while [ "$LOOP" -ne 0 ]
        do
            print_title "PUZZLE"
            echo " 1) Numptyphysics"
            echo ""
            echo " b) BACK"
            echo ""
            read -p "Option: " OPTION
            case "$OPTION" in
                1)
                    aurhelper_install "numptyphysics-svn"
                    pause_function
                    ;;
                *)
                    LOOP=0
                    ;;
            esac
        done
        LOOP=1
        ;;
        #}}}
        8)
        #RPG {{{
        while [ "$LOOP" -ne 0 ]
        do
            print_title "RPG"
            echo " 1) Ardentryst"
            echo ""
            echo " b) BACK"
            echo ""
            read -p "Option: " OPTION
            case "$OPTION" in
                1)
                    aurhelper_install "ardentryst"
                    pause_function
                    ;;
                *)
                    LOOP=0
                    ;;
            esac
        done
        LOOP=1
        ;;
        #}}}
        9)
        #RACING {{{
        while [ "$LOOP" -ne 0 ]
        do
            print_title "RACING"
            echo " 1) Maniadrive"
            echo " 2) Death Rally"
            echo " 3) SupertuxKart"
            echo " 4) Speed Dreams"
            echo ""
            echo " b) BACK"
            echo ""
            read -p "Option: " OPTION
            case "$OPTION" in
                1)
                    aurhelper_install "maniadrive"
                    pause_function
                    ;;
                2)
                    aurhelper_install "death-rally"
                    pause_function
                    ;;
                3)
                    pacman -S --noconfirm --needed supertuxkart
                    pause_function
                    ;;
                4)
                    pacman -S --noconfirm --needed speed-dreams
                    pause_function
                    ;;
                *)
                    LOOP=0
                    ;;
            esac
        done
        LOOP=1
        ;;
        #}}}
        10)
        #SIMULATION {{{
        while [ "$LOOP" -ne 0 ]
        do
            print_title "SIMULATION"
            echo " 1) Simultrans"
            echo " 2) Theme Hospital"
            echo " 3) OpenTTD"
            echo ""
            echo " b) BACK"
            echo ""
            read -p "Option: " OPTION
            case "$OPTION" in
                1)
                    aurhelper_install "simutrans"
                    pause_function
                    ;;
                2)
                    aurhelper_install "corsix-th"
                    pause_function
                    ;;
                3)
                    pacman -S --noconfirm --needed openttd
                    pause_function
                    ;;
                *)
                    LOOP=0
                    ;;
            esac
        done
        LOOP=1
        ;;
        #}}}
        11)
        #STRATEGY {{{
        while [ "$LOOP" -ne 0 ]
        do
            print_title "STRATEGY"
            echo " 1) Wesnoth"
            echo " 3) 0ad"
            echo " 4) Hedgewars"
            echo " 5) Warzone 2100"
            echo " 6) MegaGlest"
            echo " 7) Zod"
            echo ""
            echo " b) BACK"
            echo ""
            read -p "Option: " OPTION
            case "$OPTION" in
                1)
                    pacman -S --noconfirm --needed wesnoth
                    pause_function
                    ;;
                3)
                    aurhelper_install "0ad"
                    pause_function
                    ;;
                4)
                    pacman -S --noconfirm --needed hedgewars
                    pause_function
                    ;;
                5)
                    pacman -S --noconfirm --needed warzone2100
                    pause_function
                    ;;
                6)
                    pacman -S --noconfirm --needed megaglest
                    pause_function
                    ;;
                7)
                    aurhelper_install "commander-zod"
                    pause_function
                    ;;
                *)
                    LOOP=0
                    ;;
            esac
        done
        LOOP=1
        ;;
        #}}}
        *)
        LOOP=0
        ;;
    esac
done
}
#}}}
#FONTS {{{
function install_fonts(){
LOOP=1
while [ "$LOOP" -ne 0 ]
do
    print_title "FONTS - https://wiki.archlinux.org/index.php/Fonts"
    echo " 1) ttf-dejavu"
    echo " 2) ttf-google-webfonts"
    echo " 3) ttf-kochi-substitute (Japanese Support)"
    echo " 4) ttf-liberation"
    echo " 5) ttf-ms-fonts"
    echo " 6) ttf-roboto"
    echo " 7) ttf-vista-fonts"
    echo " 8) ttf-mac-fonts"
    echo ""
    echo " a) ALL"
    echo " b) BACK"
    echo ""
    read -p "Option: " OPTION
    case "$OPTION" in
        1)
            pacman -S --noconfirm --needed ttf-dejavu
            pause_function
            ;;
        2)
            pacman -Rdd --noconfirm ttf-droid
            pacman -Rdd --noconfirm ttf-ubuntu-font-family
            aurhelper_install "ttf-google-webfonts"
            pause_function
            ;;
        3)
            aurhelper_install "ttf-kochi-substitute"
            pause_function
            ;;
        4)
            pacman -S --noconfirm --needed ttf-liberation
            pause_function
            ;;
        5)
            aurhelper_install "ttf-ms-fonts"
            pause_function
            ;;
        6)
            aurhelper_install "ttf-roboto"
            pause_function
            ;;
        7)
            aurhelper_install "ttf-vista-fonts"
            pause_function
            ;;
        8)
            aurhelper_install "ttf-mac-fonts"
            pause_function
            ;;
        "a")
            pacman -Rdd --noconfirm ttf-droid
            pacman -Rdd --noconfirm ttf-ubuntu-font-family
            aurhelper_install "ttf-ms-fonts ttf-dejavu ttf-liberation ttf-kochi-substitute ttf-roboto ttf-google-webfonts ttf-vista-fonts ttf-mac-fonts"
            pause_function
            LOOP=0
            ;;
        *)
            LOOP=0
            ;;
    esac
done
}
#}}}
#FONTS CONFIGURATION {{{
function configure_fonts(){
    print_title "FONTS CONFIGURATION - https://wiki.archlinux.org/index.php/Font_Configuration"
    echo " 1) Ubuntu patched packages"
    echo " 2) Cleartype patched packages"
    echo ""
    echo " b) BACK"
    echo ""
    read -p "Option: " OPTION
    case "$OPTION" in
        1)
            pacman -Rdd --noconfirm cairo fontconfig freetype2 libxft
            aurhelper_install "cairo-ubuntu fontconfig-ubuntu freetype2-ubuntu"
            install_status
            ;;
        2)
            pacman -Rdd --noconfirm cairo fontconfig freetype2 libxft
            aurhelper_install "freetype2-cleartype libxft-cleartype cairo-cleartype"
            install_status
            ;;
        *)
            CURRENT_STATUS=0
            ;;
    esac
    sumary "Patched Fonts Configuration installation"
}
#}}}
#CLEAN ORPHAN PACKAGES {{{
function clean_orphan_packages(){
    print_title "CLEAN ORPHAN PACKAGES"
    pacman -Rsc --noconfirm $(pacman -Qqdt)
    #pacman -Sc --noconfirm
    pacman-optimize
}
#}}}
#FINISH {{{
function finish(){
    print_title "INSTALL COMPLETED"
    reboot_now
    echo "Thanks for using the Archlinux Ultimate Install script by helmuthdu"
    exit 0
}
#}}}

#MAIN {{{
welcome
check_root
language_selector
system_upgrade
create_user
choose_aurhelper

MAINLOOP=1
while [ "$MAINLOOP" -ne 0 ]
do
    print_title "ARCHLINUX ULTIMATE INSTALL - https://github.com/helmuthdu/aui"
    echo " 1) `checkbox "$BASICSETUP"` Basic Setup"
    echo " 2) `checkbox "$DESKTOPENVIRONMENT"` Desktop Environment"
    echo " 3) `checkbox "$DEVELOPMENTAPPS"` Development Apps"
    echo " 4) `checkbox "$OFFICEAPPS"` Office Apps"
    echo " 5) `checkbox "$SYSTEMAPPS"` System Apps"
    echo " 6) `checkbox "$GRAPHICSAPPS"` Graphics Apps"
    echo " 7) `checkbox "$INTERNETAPPS"` Internet Apps"
    echo " 8) `checkbox "$AUDIOAPPS"` Audio Apps"
    echo " 9) `checkbox "$VIDEOAPPS"` Video Apps"
    echo "10) `checkbox "$LAMP"` LAMP"
    echo "11) `checkbox "$GAMES"` Games"
    echo "12) `checkbox "$FONTS"` Fonts"
    echo "13) `checkbox "$FONTCONFIG"` Fonts Configuration"
    echo "14) `checkbox "$CLEANPACKAGES"` Clean Orphan Packages"
    echo ""
    echo " q) Quit"
    echo ""
    read -p "Option: " OPTION
    case "$OPTION" in
        1)
            rankmirror
            pacman_package_signing
            install_basic_setup
            install_tlp
            install_xorg
            install_video_cards
            install_cups
            install_additional_firmwares
            install_git_tor
            install_status
            sumary "Basic setup installation"
            pause_function
            BASICSETUP=1
            ;;
        2)
            if [ $BASICSETUP -eq 0 ] && !(pacman -Q xorg-server &>/dev/null); then
                echo -e "\nWARNING: YOU MUST RUN THE BASIC SETUP FIRST"
                pause_function
                continue
            fi
            install_desktop_environment
            install_nm_wicd
            DESKTOPENVIRONMENT=1
            ;;
        3)
            install_development_apps
            DEVELOPMENTAPPS=1
            ;;
        4)
            install_office_apps
            OFFICEAPPS=1
            ;;
        5)
            install_system_apps
            SYSTEMAPPS=1
            ;;
        6)
            install_graphics_apps
            GRAPHICSAPPS=1
            ;;
        7)
            install_internet_apps
            INTERNETAPPS=1
            ;;
        8)
            install_audio_apps
            AUDIOAPPS=1
            ;;
        9)
            install_video_apps
            VIDEOAPPS=1
            ;;
        10)
            install_lamp
            LAMP=1
            ;;
        11)
            install_games
            GAMES=1
            ;;
        12)
            install_fonts
            FONTS=1
            ;;
        13)
            configure_fonts
            FONTSCONFIG=1
            ;;
        14)
            clean_orphan_packages
            CLEANPACKAGES=1
            ;;
        "q")
            finish
            ;;
        *)
            print_line
            echo "WRONG OPTION"
            pause_function
            ;;
    esac
done
#}}}
