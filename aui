#!/bin/bash
#-------------------------------------------------------------------------------
#Created by helmuthdu mailto: helmuthdu[at]gmail[dot]com
#-------------------------------------------------------------------------------
#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with this program.  If not, see <http://www.gnu.org/licenses/>.
#-------------------------------------------------------------------------------
# Run this script after your first boot with archlinux (as root)

#This script is used to active the automatic mode
source auiscript

#VARIABLES {{{
# Desktop Environment
E17=0
GNOME=0
KDE=0
LXDE=0
OPENBOX=0
XFCE=0

# Aur Helper
YAOURT=0
PACKER=0

# Main menu
BASICSETUP=0
DESKTOPENVIRONMENT=0
ACCESSORIES=0
DEVELOPMENT=0
OFFICE=0
SYSTEM=0
GRAPHICS=0
INTERNET=0
AUDIO=0
VIDEO=0
LAMP=0
GAMES=0
FONTS=0
FONTSCONFIG=0
CLEANPACKAGES=0

# Arch
ARCHI=`uname -m`

# Prompt
prompt1="Enter your option: "
prompt2="Enter nÂ° of options (ex: 1 2 3 or 1-3): "

# Colors
# Regular Colors
Black='\e[0;30m'        # Black
Blue='\e[0;34m'         # Blue
Cyan='\e[0;36m'         # Cyan
Green='\e[0;32m'        # Green
Purple='\e[0;35m'       # Purple
Red='\e[0;31m'          # Red
White='\e[0;37m'        # White
Yellow='\e[0;33m'       # Yellow
# Bold
BBlack='\e[1;30m'       # Black
BBlue='\e[1;34m'        # Blue
BCyan='\e[1;36m'        # Cyan
BGreen='\e[1;32m'       # Green
BPurple='\e[1;35m'      # Purple
BRed='\e[1;31m'         # Red
BWhite='\e[1;37m'       # White
BYellow='\e[1;33m'      # Yellow
# Background
On_Blue='\e[37;44m'        # Blue

AUR=`echo -e "(${BPurple}aur${White})"`
#}}}

function read_input(){ #{{{
    if [[ $AUTOMATIC_MODE -eq 1 ]]; then
        OPTION=$1
    else
        read -p "$prompt1" OPTION
    fi
} #}}}
function read_input_text(){ #{{{
    if [[ $AUTOMATIC_MODE -eq 1 ]]; then
        OPTION=$2
    else
        read -p "$1 [y][N]: " OPTION
        echo ""
    fi
    OPTION=`echo "$OPTION" | tr '[:upper:]' '[:lower:]'`
} #}}}
function read_input_options(){ #{{{
    local line
    local packages
    if [[ $AUTOMATIC_MODE -eq 1 ]]; then
        array=("$1")
    else
        read -p "$prompt2" OPTION
        array=("$OPTION")
    fi
    for line in ${array[@]/,/ }; do
        if [[ ${line/-/} != $line ]]; then
            for ((i=${line%-*}; i<=${line#*-}; i++)); do
                packages+=($i);
            done
        else
            packages+=($line)
        fi
    done
    OPTIONS=("${packages[@]}")
} #}}}
function print_line(){ #{{{
    printf "%$(tput cols)s\n"|tr ' ' '-'
} #}}}
function print_title (){ #{{{
    clear
    print_line
    echo -e "# ${BWhite}$1${White}"
    print_line
    echo ""
} #}}}
function print_info (){ #{{{
    T_COLS=`tput cols`
    echo -e "${BWhite}$1${White}\n" | fold -sw $(( $T_COLS - 18 )) | sed 's/^/\t/'
} #}}}
function print_warning (){ #{{{
    echo -e "${BRed}$1${White}\n"
} #}}}
function remove_daemon(){ #{{{
    sed -i '/DAEMONS[=]/s/ '"$1"'//' /etc/rc.conf
} #}}}
function replace_daemon(){ #{{{
    sed -i '/DAEMONS[=]/s/'"$1"'/'"$2"'/' /etc/rc.conf
} #}}}
function start_daemon(){ #{{{
    DAEMON_LIST=`echo "$1" | sed 's/@//g'`
    for DAEMON in $DAEMON_LIST; do
        ! ls -1 /var/run/daemons/$DAEMON &> /dev/null && rc.d start $DAEMON;
    done
} #}}}
function add_daemon(){ #{{{
    remove_daemon "$1"
    sed -i '/DAEMONS[=]/s/\(.*\)\>/& '"$1"'/' /etc/rc.conf
    start_daemon "$1"
} #}}}
function remove_module(){ #{{{
    sed -i '/MODULES[=]/s/ '"$1"'//' /etc/rc.conf
} #}}}
function start_module(){ #{{{
    for MODULE in $1; do
        modprobe $MODULE;
    done
} #}}}
function add_module(){ #{{{
    remove_module "$1"
    sed -i '/MODULES[=]/s/\(.*\)\>/& '"$1"'/' /etc/rc.conf
    #sed -i '/MODULES[=]/s/^[^ ]*\>/& '"$1"'/' /etc/rc.conf
    start_module "$1"
} #}}}
function config_dm(){ #{{{
    sed -i '/'"$1"'/s/^#//' /etc/inittab
    sed -i '/xdm/s/^#//' /etc/inittab
    sed -i '/xdm/s/^/#/' /etc/inittab
    sed -i '/id:3:initdefault/s/^#//' /etc/inittab
    sed -i '/id:3:initdefault/s/^/#/' /etc/inittab
    sed -i '/id:5:initdefault/s/^#//' /etc/inittab
} #}}}
function check_package(){ #{{{
    for PACKAGE in $1; do
        pacman -Q $PACKAGE &> /dev/null && return 0;
    done
    return 1
} #}}}
function checkbox(){ #{{{
    [[ $1 -eq 1 ]] && echo -e "${BBlue}[${BWhite}X${BBlue}]${White}" || echo -e "${BBlue}[${White} ${BBlue}]${White}";
} #}}}
function checkbox_package(){ #{{{
    check_package "$1" && checkbox 1 || checkbox 0
} #}}}
function aur_package_install(){ #{{{
    for PACKAGE in $1; do
        if ! check_package "$PACKAGE" ; then
            if [[ $YAOURT -eq 1 ]]; then
                su -l $USERNAME --command="yaourt -S --noconfirm $PACKAGE"
            else
                su -l $USERNAME --command="packer -S --noconfirm $PACKAGE"
            fi
            #RECHECK #{{{
            if ! check_package "$PACKAGE" ; then
                if [[ $AUTOMATIC_MODE -eq 1 ]]; then
                    echo "$PACKAGE" >> packages_not_installed.txt
                else
                    read_input_text "Package $PACKAGE not installed, try install again?"
                    if [[ $OPTION == y ]]; then
                        if [[ $YAOURT -eq 1 ]]; then
                            su -l $USERNAME --command="yaourt -S $PACKAGE"
                        else
                            su -l $USERNAME --command="packer -S $PACKAGE"
                        fi
                    fi
                fi
            fi
            #}}}
        else
            echo -e "Warning: $PACKAGE is up to date --skipping"
        fi
    done
} #}}}
function package_install(){ #{{{
    if [[ $AUTOMATIC_MODE -eq 1 ]]; then
        pacman -S --noconfirm --needed $1
    else
        pacman -S --needed $1
    fi
} #}}}
function package_remove(){ #{{{
    if [[ $AUTOMATIC_MODE -eq 1 ]]; then
        pacman -Rcsn --noconfirm $1
    else
        pacman -Rcsn $1
    fi
} #}}}
function contains_element(){ #{{{
    for e in "${@:2}"; do [[ $e == $1 ]] && break; done;
} #}}}
function create_xinitrc(){ #{{{
    echo -e ' #!/bin/sh\n
if [ -d /etc/X11/xinit/xinitrc.d ]; then
  for f in /etc/X11/xinit/xinitrc.d/*; do
    [ -x "$f" ] && . "$f"
  done
  unset f
fi\n' > /home/$USERNAME/.xinitrc
    echo -e "exec ck-launch-session $1" >> /home/$USERNAME/.xinitrc
    chown -R $USERNAME:users /home/$USERNAME/.xinitrc
} #}}}
function invalid_option(){ #{{{
    print_line
    echo "Invalid option. Try another one."
    pause_function
} #}}}
function pause_function(){ #{{{
    print_line
    if [[ $AUTOMATIC_MODE -ne 1 ]]; then
        read -e -sn 1 -p "Press any key to continue..."
    fi
} #}}}
function sumary(){ #{{{
    case $CURRENT_STATUS in
        1)
            print_line
            echo "$1 successful"
            ;;
        *)
            print_line
            echo "$1 not successful (Canceled)"
            ;;
    esac
} #}}}
function menu_item(){ #{{{
    [[ $# -lt 2 ]] && PACKAGE_NAME="$1" || PACKAGE_NAME="$2";
    CHARS_TO_REMOVE=("Ttf-" "-bzr" "-hg" "-svn" "-git" "-bin" "-stable" "Gnome-shell-theme-" "Gnome-shell-extension-");
    for CHARS in ${CHARS_TO_REMOVE[@]}; do PACKAGE_NAME=`echo ${PACKAGE_NAME^} | sed 's/'$CHARS'//'`; done
    echo -e "$(checkbox_package "$1") ${BWhite}$PACKAGE_NAME${White}"
} #}}}
function mainmenu_item(){ #{{{
    echo -e "$(checkbox "$1") ${BWhite}$2${White}"
} #}}}
function elihw() { #{{{
    [[ $OPT == b || $OPT == d ]] && break;
} #}}}

#WELCOME {{{
function welcome(){
    clear
    echo -e "${BWhite}Welcome to the Archlinux Ultimate install script by helmuthdu${White}"
    print_line
    echo "Requirements:"
    echo "-> Archlinux installation"
    echo "-> Run script as root user"
    echo "-> Working internet connection"
    print_line
    echo "Script can be cancelled at any time with CTRL+C"
    print_line
    echo "it's highly recommended that you read this script before using it"
    echo "This version is still in BETA. Send bugreports to: "
    echo "http://www.github.com/helmuthdu/aui"
    print_line
    echo -e "\nSystem config backups:"
    print_line
    [[ ! -f /etc/rc.conf.aui ]] && cp -v /etc/rc.conf /etc/rc.conf.aui || echo "/etc/rc.conf.aui";
    [[ ! -f /etc/pacman.conf.aui ]] && cp -v /etc/pacman.conf /etc/pacman.conf.aui || echo "/etc/pacman.conf.aui";
    [[ ! -f /etc/inittab.aui ]] && cp -v /etc/inittab /etc/inittab.aui || echo "/etc/inittab.aui";
    [[ -f /etc/ssh/sshd_config.aui ]] && echo "/etc/ssh/sshd_conf.aui";
    [[ -f /etc/X11/xorg.conf.d/10-evdev.conf.aui ]] && echo "/etc/X11/xorg.conf.d/10-evdev.conf.aui";
    [[ -f /etc/php/php.ini.aui ]] && echo "/etc/php/php.ini.aui";
    pause_function
}
#}}}
#CHECK ROOT {{{
function check_root() {
    CURRENTUSER="$(whoami)"
    if [[ $CURRENTUSER != root ]]; then
        echo "Current user is NOT 'root'. EXIT now"
        pause_function
        exit 1
    fi
}
#}}}
#LANGUAGE SELECTOR {{{
function language_selector(){
    #DETECTS THE SYSTEM LANGUAGE {{{
    #automatically detects the system language based on your rc.conf
    LANGUAGE=`cat /etc/rc.conf | sed -n '/LOCALE=/p' | sed '1!d' | sed 's/.*"\(.*\)".*/\1/g' | cut -c1-5`
    #KDE #{{{
    if [[ $LANGUAGE == pt_BR || $LANGUAGE == en_GB || $LANGUAGE == zh_CN ]]; then
        LANGUAGE_KDE=`echo $LANGUAGE | tr '[:upper:]' '[:lower:]'`
    elif [[ $LANGUAGE == en_US ]]; then
        LANGUAGE_KDE="en_gb"
    else
        LANGUAGE_KDE=`echo $LANGUAGE | cut -d\_ -f1`
    fi
    #}}}
    #FIREFOX #{{{
    if [[ $LANGUAGE == pt_BR || $LANGUAGE == pt_PT || $LANGUAGE == en_GB || $LANGUAGE == es_AR || $LANGUAGE == es_ES || $LANGUAGE == zh_CN ]]; then
        LANGUAGE_FF=`echo $LANGUAGE | tr '[:upper:]' '[:lower:]' | sed 's/_/-/'`
    elif [[ $LANGUAGE == en_US ]]; then
        LANGUAGE_FF="en-gb"
    else
        LANGUAGE_FF=`echo $LANGUAGE | cut -d\_ -f1`
    fi
    #}}}
    #HUNSPELL #{{{
    if [[ $LANGUAGE == pt_BR ]]; then
        LANGUAGE_HS=`echo $LANGUAGE | tr '[:upper:]' '[:lower:]' | sed 's/_/-/'`
    elif [[ $LANGUAGE == pt_PT ]]; then
        LANGUAGE_HS="pt_pt"
    else
        LANGUAGE_HS=`echo $LANGUAGE | cut -d\_ -f1`
    fi
    #}}}
    #ASPELL #{{{
        LANGUAGE_AS=`echo $LANGUAGE | cut -d\_ -f1`
    #}}}
    #LIBREOFFICE #{{{
    if [[ $LANGUAGE == pt_BR || $LANGUAGE == en_GB || $LANGUAGE == en_US || $LANGUAGE == zh_CN ]]; then
        LANGUAGE_LO=`echo $LANGUAGE | sed 's/_/-/'`
    else
        LANGUAGE_LO=`echo $LANGUAGE | cut -d\_ -f1`
    fi
    #}}}
    #}}}
    print_title "LANGUAGE - https://wiki.archlinux.org/index.php/Locale"
    read_input_text "Default system language: \"$LANGUAGE\"" $LANGSELECT
    case "$OPTION" in
        "n")
            read -p "New system language [ex: en_US]: " LANGUAGE
            #KDE #{{{
            if [[ $LANGUAGE == pt_BR || $LANGUAGE == en_GB || $LANGUAGE == zh_CN ]]; then
                LANGUAGE_KDE=`echo $LANGUAGE | tr '[:upper:]' '[:lower:]'`
            elif [[ $LANGUAGE == en_US ]]; then
                LANGUAGE_KDE="en_gb"
            else
                LANGUAGE_KDE=`echo $LANGUAGE | cut -d\_ -f1`
            fi
            #}}}
            #FIREFOX #{{{
            if [[ $LANGUAGE == pt_BR || $LANGUAGE == pt_PT || $LANGUAGE == en_GB || $LANGUAGE == es_AR || $LANGUAGE == es_ES || $LANGUAGE == zh_CN ]]; then
                LANGUAGE_FF=`echo $LANGUAGE | tr '[:upper:]' '[:lower:]' | sed 's/_/-/'`
            elif [[ $LANGUAGE == en_US ]]; then
                LANGUAGE_FF="en-gb"
            else
                LANGUAGE_FF=`echo $LANGUAGE | cut -d\_ -f1`
            fi
            #}}}
            #HUNSPELL #{{{
            if [[ $LANGUAGE == pt_BR ]]; then
                LANGUAGE_HS=`echo $LANGUAGE | tr '[:upper:]' '[:lower:]' | sed 's/_/-/'`
            elif [[ $LANGUAGE == pt_PT ]]; then
                LANGUAGE_HS="pt_pt"
            else
                LANGUAGE_HS=`echo $LANGUAGE | cut -d\_ -f1`
            fi
            #}}}
            #ASPELL #{{{
            LANGUAGE_AS=`echo $LANGUAGE | cut -d\_ -f1`
            #}}}
            #LIBREOFFICE #{{{
            if [[ $LANGUAGE == pt_BR || $LANGUAGE == en_GB || $LANGUAGE == en_US || $LANGUAGE == zh_CN ]]; then
                LANGUAGE_LO=`echo $LANGUAGE | sed 's/_/-/'`
            else
                LANGUAGE_LO=`echo $LANGUAGE | cut -d\_ -f1`
            fi
            #}}}
            ;;
        *)
            ;;
    esac
    pause_function
}
#}}}
#CUSTOM REPOSITORIES {{{
function add_custom_repositories(){
    # ENABLE MULTILIB REPOSITORY {{{
    # this option will avoid any problem with packages install
    if [[ $ARCHI == x86_64 ]]; then
        local multilib=`grep -n "\[multilib\]" /etc/pacman.conf | cut -f1 -d:`
        sed -i "${multilib}s/^#//g" /etc/pacman.conf
        local multilib=$(( $multilib + 2 ))
        sed -i "${multilib}s/^#//g" /etc/pacman.conf
        pacman -Sy
    fi
    #}}}
    print_title "CUSTOM REPOSITORIES - https://wiki.archlinux.org/index.php/Unofficial_User_Repositories"
    read_input_text "Add custom repositories" $CUSTOMREPO
    case "$OPTION" in
        "y")
            #CUSTOM REPOSITORIES {{{
            while [[ 1 ]]
            do
                print_title "CUSTOM REPOSITORIES - https://wiki.archlinux.org/index.php/Unofficial_User_Repositories"
                echo " 1) \"Add new repository\""
                echo ""
                echo " d) DONE"
                echo ""
                CUSTOMREPO+=" d"
                read_input_options "$CUSTOMREPO"
                for OPT in ${OPTIONS[@]}; do
                    case $OPT in
                        1)
                            read -p "Repository Name [ex: custom]: " REPONAME
                            read -p "Repository Address [ex: file:///media/backup/Archlinux]: " REPOADDRESS
                            echo -e '\n['"$REPONAME"']\nServer = '"$REPOADDRESS"/'$arch' >> /etc/pacman.conf
                            echo -e '\nCustom repository added into pacman.conf file'
                            pause_function
                            ;;
                        "d")
                            break
                            ;;
                        *)
                            invalid_option
                            ;;
                    esac
                done
            elihw
            done
            pacman -Sy
            CURRENT_STATUS=1
            ;;
            #}}}
        *)
            CURRENT_STATUS=0
            ;;
    esac
    sumary "Custom repositories configuration"
    pause_function
}
#}}}
#REFLECTOR {{{
function install_reflector(){
    print_title "REFLECTOR - https://wiki.archlinux.org/index.php/Reflector"
    print_info "Reflector is a script which can retrieve the latest mirror list from the MirrorStatus page, filter the most up-to-date mirrors, sort them by speed and overwrite the file /etc/pacman.d/mirrorlist."
    read_input_text "Install and configure reflector" $REFLECTOR
    case "$OPTION" in
        "y")
            package_install "reflector"
            cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.backup
            reflector -l 5 --sort rate --save /etc/pacman.d/mirrorlist
            CURRENT_STATUS=1
            ;;
        *)
            CURRENT_STATUS=0
            ;;
    esac
    sumary "New mirrorlist creation"
    pause_function
}
#}}}
#SYSTEM UPDATE {{{
function system_upgrade(){
    print_title "UPDATING YOUR SYSTEM"
    pacman -Syu
}
#}}}
#SELECT/CREATE USER {{{
function select_user(){
    create_new_user(){ #{{{
        read -p "Username: " USERNAME
        useradd -m -g users -G audio,lp,optical,storage,video,wheel,games,power,scanner,network -s /bin/bash $USERNAME
        passwd $USERNAME
        cp /etc/skel/.* /home/$USERNAME/
        #BASHRC {{{
            print_title "BASHRC - https://wiki.archlinux.org/index.php/Bashrc"
            package_install "git"
            git clone https://github.com/helmuthdu/dotfiles
            cp dotfiles/.* ~/
            cp dotfiles/.* /home/$USERNAME/
            rm -fr dotfiles
            print_title "DEFAULT EDITOR"
            EDITOR=("Emacs" "Joe" "Nano" "Vim");
            PS3="$prompt1"
            echo -e "Choose default editor\n"
            select OPT in "${EDITOR[@]}"; do
                case "$REPLY" in
                    1)
                        package_install "emacs"
                        sed -i '/EDITOR/s/vim/emacs\ -nw/' /home/$USERNAME/.bashrc
                        sed -i '/VISUAL/s/vim/emacs\ -nw/' /home/$USERNAME/.bashrc
                        sed -i '/EDITOR/s/vim/emacs\ -nw/' ~/.bashrc
                        sed -i '/VISUAL/s/vim/emacs\ -nw/' ~/.bashrc
                        break
                        ;;
                    2)
                        if ! check_package "joe" ; then
                            su -l $USERNAME --command="
                                wget http://aur.archlinux.org/packages/jo/joe/joe.tar.gz;
                                tar zxvf joe.tar.gz;
                                cd joe;
                                makepkg -si --noconfirm;
                                cd ..;
                                rm -fr joe*
                            "
                        fi
                        sed -i '/EDITOR/s/vim/joe/' /home/$USERNAME/.bashrc
                        sed -i '/VISUAL/s/vim/joe/' /home/$USERNAME/.bashrc
                        sed -i '/EDITOR/s/vim/joe/' ~/.bashrc
                        sed -i '/VISUAL/s/vim/joe/' ~/.bashrc
                        break
                        ;;
                    3)
                        sed -i '/EDITOR/s/vim/nano/' /home/$USERNAME/.bashrc
                        sed -i '/VISUAL/s/vim/nano/' /home/$USERNAME/.bashrc
                        sed -i '/EDITOR/s/vim/nano/' ~/.bashrc
                        sed -i '/VISUAL/s/vim/nano/' ~/.bashrc
                        break
                        ;;
                    4)
                        # VIM
                        package_install "vim ctags ack"
                        if ! check_package "discount" ; then
                            su -l $USERNAME --command="
                                wget http://aur.archlinux.org/packages/discount/discount.tar.gz;
                                tar zxvf discount.tar.gz;
                                cd discount;
                                makepkg -si --noconfirm;
                                cd ..;
                                rm -fr discount*
                            "
                        fi
                        # VIMRC
                        git clone https://github.com/helmuthdu/vim
                        mv vim /home/$USERNAME/.vim
                        ln -sf /home/$USERNAME/.vim/vimrc /home/$USERNAME/.vimrc
                        # PENTADACTYL [FIREFOX]
                        git clone https://github.com/helmuthdu/pentadactyl
                        mv pentadactyl /home/$USERNAME/.pentadactyl
                        ln -sf /home/$USERNAME/.pentadactyl/pentadactylrc /home/$USERNAME/.pentadactylrc
                        break
                        ;;
                    *)
                        invalid_option
                        ;;
                esac
            done
            chown -R $USERNAME:users /home/$USERNAME/.*
        #}}}
    } #}}}
    print_title "SELECT USER ACCOUNT - https://wiki.archlinux.org/index.php/Users_and_Groups"
    users=(`cat /etc/passwd | grep "/home" | cut -d: -f1`);
    PS3="$prompt1"
    echo "Avaliable Users:"
    if [[ $(( ${#users[@]} )) -gt 0 ]]; then
        print_warning "WARNING: THE SELECTED USER MUST HAVE SUDO PRIVILEGES"
    else
        echo ""
    fi
    select OPT in "${users[@]}" "Create new user"; do
        if [ "$OPT" == "Create new user" ]; then
            create_new_user
            break
        elif contains_element "$OPT" "${users[@]}"; then
            USERNAME=$OPT
            break
        else
            invalid_option
        fi
    done
    #ENABLE SUDO {{{
    if ! check_package "sudo" ; then
        print_title "SUDO - https://wiki.archlinux.org/index.php/Sudo"
        package_install "sudo"
    fi
    ## Uncomment to allow members of group wheel to execute any command
    sed -i '/%wheel ALL=(ALL) ALL/s/^#//' /etc/sudoers
    ## Same thing without a password (not secure)
    #sed -i '/%wheel ALL=(ALL) NOPASSWD: ALL/s/^#//' /etc/sudoers
    #}}}
}
#}}}
#AUR HELPER {{{
function choose_aurhelper(){
    print_title "AUR HELPER - https://wiki.archlinux.org/index.php/AUR_Helpers"
    print_info "AUR Helpers are written to make using the Arch User Repository more comfortable."
    print_warning "\tNone of these tools are officially supported by Arch devs."
    aurhelper=("Yaourt" "Packer")
    PS3="$prompt1"
    echo -e "Choose your default AUR helper to install\n"
    select OPT in "${aurhelper[@]}"; do
        case "$REPLY" in
            1)
                if ! check_package "yaourt" ; then
                    package_install "base-devel yajl"
                    su -l $USERNAME --command="
                        wget http://aur.archlinux.org/packages/package-query/package-query.tar.gz;
                        tar zxvf package-query.tar.gz;
                        cd package-query;
                        makepkg -si --noconfirm;
                        cd ..;
                        rm -fr package-query*
                    "
                    su -l $USERNAME --command="
                        wget http://aur.archlinux.org/packages/yaourt/yaourt.tar.gz;
                        tar zxvf yaourt.tar.gz;
                        cd yaourt;
                        makepkg -si --noconfirm;
                        cd ..;
                        rm -fr yaourt*
                    "
                    if ! check_package "yaourt" ; then
                        echo "Yaourt not installed. EXIT now"
                        pause_function
                        exit 0
                    fi
                fi
                CURRENT_STATUS=1
                YAOURT=1
                break
                ;;
            2)
                if ! check_package "packer" ; then
                    package_install "base-devel git jshon curl"
                    su -l $USERNAME --command="
                        wget http://aur.archlinux.org/packages/pa/packer/packer.tar.gz;
                        tar zxvf packer.tar.gz;
                        cd packer;
                        makepkg -si --noconfirm;
                        cd ..;
                        rm -fr packer*
                    "
                    if ! check_package "packer" ; then
                        echo "Packer not installed. EXIT now"
                        pause_function
                        exit 0
                    fi
                fi
                CURRENT_STATUS=1
                PACKER=1
                break
                ;;
            *)
                invalid_option
                ;;
        esac
    done
    sumary "AUR Helper installation"
    pause_function
}
#}}}
#PACKMAN PACKAGE SIGNING {{{
function configure_pacman_package_signing(){
    print_title "PACMAN PACKAGE SIGNING - https://wiki.archlinux.org/index.php/Pacman-key"
    print_info "Pacman-key is a new tool available with pacman 4. It allows the user to manage pacman's list of trusted keys in the new package signing implementation."
    read_input_text "Automatically configure pacman package signing" $PACKAGESIGN
    case "$OPTION" in
        "y")
            package_install "base-devel"
            aur_package_install "rng-tools"
            sed -i '/timeout/s/0/10/' /etc/conf.d/rngd
            rngd -f -r /dev/urandom &
            pacman-key --init --keyserver pgp.mit.edu
            killall rngd
            package_remove "rng-tools"
            package_install "archlinux-keyring"
            #DEVELOPER AND TU KEYS {{{
            KEYS="y"
            read_input_text "Install Developer and TU Keys" $KEYS
            if [[ $OPTION == n ]]; then
                curl https://www.archlinux.org/{developers,trustedusers}/ |
                awk -F\" '(/pgp.mit.edu/) {sub(/.*search=0x/,"");print $1}' |
                xargs pacman-key --recv-keys
            fi
            #}}}
            sed -i '/SigLevel\ [=]\ Optional\ TrustAll/s/^#//' /etc/pacman.conf
            sed -i '/SigLevel\ [=]\ Never/s/^/#/' /etc/pacman.conf
            CURRENT_STATUS=1
            ;;
        *)
            CURRENT_STATUS=0
            ;;
    esac
    sumary "Pacman signing configuration"
    pause_function
}
#}}}
#BASIC SETUP{{{
function install_basic_setup(){
    print_title "BASH TOOLS - https://wiki.archlinux.org/index.php/Bash"
    package_install "bc rsync mlocate bash-completion net-tools"
    print_title "(UN)COMPRESS TOOLS - https://wiki.archlinux.org/index.php/P7zip"
    package_install "zip unzip unrar p7zip"
    aur_package_install "rar"
    print_title "DBUS - https://wiki.archlinux.org/index.php/D-Bus"
    print_info "D-Bus is a message bus system that provides an easy way for inter-process communication. It consists of a daemon, which can be run both system-wide and for each user session, and a set of libraries to allow applications to use D-Bus."
    package_install "dbus"
    add_daemon "dbus"
    print_title "AVAHI - https://wiki.archlinux.org/index.php/Avahi"
    print_info "Avahi is a free Zero Configuration Networking (Zeroconf) implementation, including a system for multicast DNS/DNS-SD service discovery. It allows programs to publish and discover services and hosts running on a local network with no specific configuration."
    package_install "avahi nss-mdns"
    add_daemon "avahi-daemon avahi-dnsconfd"
    print_title "ACPI - https://wiki.archlinux.org/index.php/ACPI_modules"
    print_info "acpid is a flexible and extensible daemon for delivering ACPI events."
    package_install "acpi acpid"
    add_daemon "acpid"
    print_title "ALSA - https://wiki.archlinux.org/index.php/Alsa"
    print_info "The Advanced Linux Sound Architecture (ALSA) is a Linux kernel component intended to replace the original Open Sound System (OSSv3) for providing device drivers for sound cards."
    package_install "alsa-utils alsa-plugins"
    sed -i '/MODULES[=]/s/snd-usb-audio//' /etc/rc.conf
    sed -i '/MODULES[=]/s/MODULES[=](/&snd-usb-audio/' /etc/rc.conf
    add_daemon "@alsa"
    print_title "NTFS/FAT/exFAT - https://wiki.archlinux.org/index.php/Windows"
    print_info "NTFS-3G is an open source implementation of Microsoft's NTFS file system that includes read and write support."
    package_install "ntfs-3g ntfsprogs dosfstools exfat-utils fuse fuse-exfat"
    add_module "fuse"
    print_title "SSH - https://wiki.archlinux.org/index.php/Ssh"
    print_info "Secure Shell (SSH) is a network protocol that allows data to be exchanged over a secure channel between two computers."
    package_install "rssh openssh"
    add_daemon "@sshd"
    [[ ! -f /etc/ssh/sshd_config.aui ]] && cp -v /etc/ssh/sshd_config /etc/ssh/sshd_config.aui;
    #CONFIGURE SSHD_CONF #{{{
        sed -i '/ListenAddress/s/^#//' /etc/ssh/sshd_config
        sed -i '/SyslogFacility/s/^#//' /etc/ssh/sshd_config
        sed -i '/LogLevel/s/^#//' /etc/ssh/sshd_config
        sed -i '/LoginGraceTime/s/^#//' /etc/ssh/sshd_config
        sed -i '/PermitRootLogin/s/^#//' /etc/ssh/sshd_config
        sed -i '/StrictModes/s/^#//' /etc/ssh/sshd_config
        sed -i '/RSAAuthentication/s/^#//' /etc/ssh/sshd_config
        sed -i '/PubkeyAuthentication/s/^#//' /etc/ssh/sshd_config
        sed -i '/IgnoreRhosts/s/^#//' /etc/ssh/sshd_config
        sed -i '/PermitEmptyPasswords/s/^#//' /etc/ssh/sshd_config
        sed -i '/X11Forwarding/s/^#//' /etc/ssh/sshd_config
        sed -i '/X11Forwarding/s/no/yes/' /etc/ssh/sshd_config
        sed -i '/X11DisplayOffset/s/^#//' /etc/ssh/sshd_config
        sed -i '/X11UseLocalhost/s/^#//' /etc/ssh/sshd_config
        sed -i '/PrintMotd/s/^#//' /etc/ssh/sshd_config
        sed -i '/PrintMotd/s/yes/no/' /etc/ssh/sshd_config
        sed -i '/PrintLastLog/s/^#//' /etc/ssh/sshd_config
        sed -i '/TCPKeepAlive/s/^#//' /etc/ssh/sshd_config
        sed -i '/the setting of/s/^/#/' /etc/ssh/sshd_config
        sed -i '/RhostsRSAAuthentication and HostbasedAuthentication/s/^/#/' /etc/ssh/sshd_config
        sed -i '/ListenAddress\ ::/s/^/#/' /etc/ssh/sshd_config
    #}}}
    #SAMBA #{{{
    print_title "SAMBA - https://wiki.archlinux.org/index.php/Samba"
    print_info "Samba is a re-implementation of the SMB/CIFS networking protocol, it facilitates file and printer sharing among Linux and Windows systems as an alternative to NFS."
    read_input_text "Install Samba" $SAMBA
    case "$OPTION" in
        "y")
            package_install "samba"
            cp /etc/samba/smb.conf.default /etc/samba/smb.conf
            add_daemon "@samba"
            CURRENT_STATUS=1
            ;;
        *)
            CURRENT_STATUS=0
            ;;
    esac
    sumary "Samba installation"
    pause_function
    #}}}
    #NFS #{{{
    print_title "NFS - https://wiki.archlinux.org/index.php/Nfs"
    print_info "NFS allowing a user on a client computer to access files over a network in a manner similar to how local storage is accessed."
    read_input_text "Install nfs" $NFS
    case "$OPTION" in
        "y")
            package_install "nfs-utils"
            add_daemon "rpcbind nfs-common @netfs nfs-server"
            CURRENT_STATUS=1
            ;;
        *)
            CURRENT_STATUS=0
            ;;
    esac
    sumary "Nfs installation"
    pause_function
    #}}}
}
#}}}
#TLP #{{{
function install_tlp(){
    print_title "TLP - https://wiki.archlinux.org/index.php/TLP"
    print_info "TLP is a set of scripts that bring you the benefits of advanced power management for Linux without the need to understand every technical detail. The default configuration provides optimized power saving out of the box."
    read_input_text "Install TLP" $TLP
    case "$OPTION" in
        "y")
            package_install "upower"
            aur_package_install "tlp"
            add_daemon "@tlp"
            CURRENT_STATUS=1
            ;;
        *)
            CURRENT_STATUS=0
            ;;
    esac
    sumary "TLP installation"
    pause_function
}
#}}}
#XORG {{{
function install_xorg(){
    print_title "XORG - https://wiki.archlinux.org/index.php/Xorg"
    print_info "Xorg is the public, open-source implementation of the X window system version 11."
    echo "Installing X-Server (req. for Desktopenvironment, GPU Drivers, Keyboardlayout,...)"
    package_install "xorg-server xorg-xinit xorg-xkill"
    package_install "xf86-input-synaptics xf86-input-mouse xf86-input-keyboard"
    package_install "mesa"
    package_install "gamin"
    [[ ! -f /etc/X11/xorg.conf.d/10-evdev.conf.aui ]] && cp -v /etc/X11/xorg.conf.d/10-evdev.conf /etc/X11/xorg.conf.d/10-evdev.conf.aui;
    #CONFIGURE QWERTY KEYBOARD IN XORG {{{
    local file="/etc/X11/xorg.conf.d/10-evdev.conf"
    local line=`grep -n "keyboard" $file | cut -f1 -d:`
    local line=$(( $line + 2 ))
    local patch=`cat $file | sed ''$(( $line + 1 ))'!d'`
    local keymap=`cat /etc/rc.conf | sed -n '/KEYMAP[=]/p' | sed 's/.*"\(.*\)".*/\1/g'`

    if [[ $patch != *"XkbLayout"* ]]; then
        if [[ $keymap == us-acentos ]]; then
            kblayout="\\\tOption \"XkbLayout\" \"us_intl\""
            sed -i "${line}a $kblayout" $file
        else
            if [[ $LANGUAGE == pt_BR ]]; then
                kblayout="\\\tOption \"XkbLayout\" \"br\""
                kblayout+="\n\\tOption \"XkbVariant\" \"abnt2\""
                sed -i "${line}a $kblayout" $file
            elif [[ $LANGUAGE == fr_FR ]]; then
                kblayout="\\\tOption \"XkbLayout\" \"fr\""
                sed -i "${line}a $kblayout" $file
            fi
        fi
    fi
    #}}}
}
#}}}
#VIDEO CARDS {{{
function install_video_cards(){
    print_title "VIDEO CARD"
    echo "Select your GPU:"
    echo " 1) Intel"
    echo " 2) ATI"
    echo " 3) nVidia"
    echo " 4) Nouveau"
    echo " 5) Virtualbox"
    echo " 6) Vesa"
    echo ""
    echo " s) SKIP"
    echo ""
    read_input $VIDEOCARD
    case "$OPTION" in
        1)
            package_install "libgl xf86-video-intel"
            CURRENT_STATUS=1
            sumary "Intel GPU driver installation"
            ;;
        2)
            package_install "libgl xf86-video-ati"
            add_module "radeon"
            CURRENT_STATUS=1
            sumary "ATI GPU driver installation"
            ;;
        3)
            package_remove "$(pacman -Qe | grep xf86-video | awk '{print $1}')"
            pacman -S --needed nvidia nvidia-utils
            CURRENT_STATUS=1
            sumary "nVidia GPU driver installation"
            ;;
        4)
            package_install "libgl xf86-video-nouveau nouveau-dri"
            add_module "nouveau"
            CURRENT_STATUS=1
            sumary "Nouveau GPU driver installation"
            ;;
        5)
            package_install "virtualbox-archlinux-additions"
            add_module "vboxguest vboxsf vboxvideo"
            groupadd vboxsf
            gpasswd -a $USERNAME vboxsf
            CURRENT_STATUS=1
            sumary "Virtualbox guest additions (incl. video drivers) installation"
            ;;
        6)
            package_install "xf86-video-vesa"
            CURRENT_STATUS=1
            sumary "Vesa GPU driver installation"
            ;;
        *)
            CURRENT_STATUS=0
            sumary "GPU drivers installation"
            ;;
    esac
    pause_function
}
#}}}
#CUPS {{{
function install_cups(){
    print_title "CUPS - https://wiki.archlinux.org/index.php/Cups"
    print_info "CUPS is the standards-based, open source printing system developed by Apple Inc. for Mac OSÂ® X and other UNIXÂ®-like operating systems."
    read_input_text "Install CUPS (aka Common Unix Printing System)" $CUPS
    case "$OPTION" in
        "y")
            package_install "cups ghostscript gsfonts"
            package_install "gutenprint foomatic-db foomatic-db-engine foomatic-db-nonfree foomatic-filters hplip splix cups-pdf"
            add_daemon "@cupsd"
            CURRENT_STATUS=1
            ;;
        *)
            CURRENT_STATUS=0
            ;;
    esac
    sumary "CUPS installation"
    pause_function
}
#}}}
#ADDITIONAL FIRMWARE {{{
function install_additional_firmwares(){
    print_title "INSTALL ADDITIONAL FIRMWARES"
    read_input_text "Install additional firmwares [Audio,Bluetooth,Scanner,Wireless]" $FIRMWARE
    case "$OPTION" in
        "y")
            #ADDITIONAL FIRMWARE {{{
            while [[ 1 ]]
            do
                print_title "INSTALL ADDITIONAL FIRMWARES"
                echo " 1) $(menu_item "alsa-firmware")"
                echo " 2) $(menu_item "ipw2100-fw")"
                echo " 3) $(menu_item "ipw2200-fw")"
                echo " 4) $(menu_item "b43-firmware") $AUR"
                echo " 5) $(menu_item "b43-firmware-legacy") $AUR"
                echo " 6) $(menu_item "broadcom-wl") $AUR"
                echo " 7) $(menu_item "bluez-firmware") "
                echo " 8) $(menu_item "libffado") [Fireware Audio Devices]"
                echo " 9) $(menu_item "libraw1394") [IEEE1394 Driver]"
                echo "10) $(menu_item "sane-gt68xx-firmware")"
                echo ""
                echo " d) DONE"
                echo ""
                FIRMWARE_OPTIONS+=" d"
                read_input_options "FIRMWARE_OPTIONS"
                for OPT in ${OPTIONS[@]}; do
                    case "$OPT" in
                        1)
                            package_install "alsa-firmware"
                            ;;
                        2)
                            package_install "ipw2100-fw"
                            ;;
                        3)
                            package_install "ipw2200-fw"
                            ;;
                        4)
                            aur_package_install "b43-firmware"
                            ;;
                        5)
                            aur_package_install "b43-firmware-legacy"
                            ;;
                        6)
                            aur_package_install "broadcom-wl"
                            ;;
                        7)
                            package_install "bluez-firmware"
                            ;;
                        8)
                            package_install "libffado"
                            ;;
                        9)
                            package_install "libraw1394"
                            ;;
                        10)
                            package_install "sane-gt68xx-firmware"
                            ;;
                        "d")
                            break
                            ;;
                        *)
                            invalid_option
                            ;;
                    esac
                done
            elihw
            done
            CURRENT_STATUS=1
            ;;
            #}}}
        *)
            CURRENT_STATUS=0
            ;;
    esac
    sumary "Additional Firmware"
    pause_function
}
#}}}
#GIT ACCESS THRU A FIREWALL {{{
function install_git_tor(){
    print_title "GIT-TOR - https://wiki.archlinux.org/index.php/Tor"
    print_info "Tor is an open source implementation of 2nd generation onion routing that provides free access to an anonymous proxy network. Its primary goal is to enable online anonymity by protecting against traffic analysis attacks."
    read_input_text "Ensuring access to GIT through a firewall (bypass college/work firewall)" $GITTOR
    case "$OPTION" in
        "y")
            package_install "openbsd-netcat vidalia privoxy git"
            if [[ ! -f /usr/bin/proxy-wrapper ]]; then
                echo 'forward-socks5   /               127.0.0.1:9050 .' >> /etc/privoxy/config
                echo -e '#!/bin/bash\nnc.openbsd -xlocalhost:9050 -X5 $*' > /usr/bin/proxy-wrapper
                chmod +x /usr/bin/proxy-wrapper
                echo -e '\nexport GIT_PROXY_COMMAND="/usr/bin/proxy-wrapper"' >> /etc/bash.bashrc
                export GIT_PROXY_COMMAND="/usr/bin/proxy-wrapper"
                su -l $USERNAME --command='export GIT_PROXY_COMMAND="/usr/bin/proxy-wrapper"'
            fi
            groupadd -g 42 privoxy
            useradd -u 42 -g privoxy -s /bin/false -d /etc/privoxy privoxy
            pacman -S --noconfirm tor privoxy
            add_daemon "@tor @privoxy"
            CURRENT_STATUS=1
            ;;
        *)
            CURRENT_STATUS=0
            ;;
    esac
    sumary "GIT-TOR installation"
    pause_function
}
#}}}
#DESKTOP ENVIRONMENT {{{
function install_desktop_environment(){
    function install_icons() { #{{{
        while [[ 1 ]]
        do
            print_title "GNOME ICONS"
            echo " 1) $(menu_item "awoken-icons" "Awoken")"
            echo " 2) $(menu_item "faenza-icon-theme" "Faenza")"
            echo " 3) $(menu_item "faenza-cupertino-icon-theme" "Faenza-Cupertino")"
            echo " 4) $(menu_item "faience-icon-theme" "Faience")"
            echo " 5) $(menu_item "elementary-icons" "Elementary")"
            echo ""
            echo " b) BACK"
            echo ""
            GNOME_ICONS+=" b"
            read_input_options "$GNOME_ICONS"
            for OPT in ${OPTIONS[@]}; do
                case "$OPT" in
                    1)
                        aur_package_install "awoken-icons"
                        ;;
                    2)
                        aur_package_install "faenza-icon-theme"
                        ;;
                    3)
                        aur_package_install "faenza-cupertino-icon-theme"
                        ;;
                    4)
                        aur_package_install "faience-icon-theme"
                        ;;
                    5)
                        aur_package_install "elementary-icons"
                        ;;
                    "b")
                        break
                        ;;
                    *)
                        invalid_option
                        ;;
                esac
            done
        elihw
        done
    } #}}}
    function install_themes() { #{{{
        while [[ 1 ]]
        do
            print_title "GTK2/GTK3 THEMES"
            echo " 1) $(menu_item "xfce-theme-bluebird" "Bluebird")"
            echo " 2) $(menu_item "gtk-theme-boomerang" "Boomerang")"
            echo " 3) $(menu_item "egtk-bzr" "eGTK")"
            echo " 4) $(menu_item "xfce-theme-greybird" "Greybird")"
            echo " 5) $(menu_item "light-themes" "Light") (aka Ambiance/Radiance)"
            echo " 6) $(menu_item "orion-gtk-theme" "Orion")"
            echo " 7) $(menu_item "zukini-theme" "Zukini")"
            echo " 8) $(menu_item "zukitwo-themes" "Zukitwo")"
            echo ""
            echo " b) BACK"
            echo ""
            GTK_THEMES+=" b"
            read_input_options "$GTK_THEMES"
            for OPT in ${OPTIONS[@]}; do
                case "$OPT" in
                    1)
                        aur_package_install "xfce-theme-bluebird"
                        ;;
                    2)
                        aur_package_install "gtk-theme-boomerang"
                        ;;
                    3)
                        aur_package_install "egtk-bzr"
                        ;;
                    4)
                        aur_package_install "xfce-theme-greybird"
                        ;;
                    5)
                        aur_package_install "light-themes"
                        ;;
                    6)
                        aur_package_install "orion-gtk-theme"
                        ;;
                    7)
                        aur_package_install "zukini-theme"
                        ;;
                    8)
                        aur_package_install "zukitwo-themes"
                        ;;
                    "b")
                        break
                        ;;
                    *)
                        invalid_option
                        ;;
                esac
            done
            elihw
        done
    } #}}}
    print_title "DESKTOP ENVIRONMENT - https://wiki.archlinux.org/index.php/Desktop_Environment"
    print_info "Desktop environments provide a complete graphical user interface (GUI) for a system by bundling together a variety of X clients written using a common widget toolkit and set of libraries."
    echo -e "Choose your desktop-environment:\n"
    echo " 1) Cinnamon"
    echo " 2) E17"
    echo " 3) GNOME"
    echo " 4) KDE"
    echo " 5) LXDE"
    echo " 6) OpenBox"
    echo " 7) XFCE"
    echo ""
    echo " b) BACK"
    read_input $DESKTOPENV
    case "$OPTION" in
        1)
            #CINNAMON {{{
            print_title "CINNAMON - https://wiki.archlinux.org/index.php/Cinnamon"
            print_info "Cinnamon is a fork of GNOME Shell, initially developed by Linux Mint. It attempts to provide a more traditional user environment based on the desktop metaphor, like GNOME 2. Cinnamon uses Muffin, a fork of the GNOME 3 window manager Mutter, as its window manager."
            aur_package_install "cinnamon"
            package_install "gnome-extra gedit-plugins"
            package_install "telepathy"
            package_install "gksu nautilus-open-terminal xdg-user-dirs-gtk"
            package_install "gvfs-smb"
            package_install "pulseaudio"
            package_install "deja-dup"
            package_install "system-config-printer-gnome"
            aur_package_install "empathy-theme-ubuntu-adium-bzr"
            aur_package_install "automounter gnome-defaults-list"
            gpasswd -a $USERNAME camera
            create_xinitrc "gnome-session-cinnamon"
            #CINNAMON CUSTOMIZATION {{{
            while [[ 1 ]]
            do
                print_title "CINNAMON CUSTOMIZATION"
                echo " 1) $(menu_item "cinnamon-applets") $AUR"
                echo " 2) $(menu_item "cinnamon-themes") $AUR"
                echo " 3) $(menu_item "awoken-icons faenza-icon-theme faenza-cupertino-icon-theme faience-icon-theme elementary-icons" "Gnome Icons") $AUR"
                echo " 4) $(menu_item "zukini-theme gtk-theme-boomerang egtk-bzr light-themes orion-gtk-theme zukitwo-themes" "GTK2/GTK3 Themes") $AUR"
                echo " 5) $(menu_item "gnome-activity-journal") $AUR"
                echo " 6) $(menu_item "gloobus-sushi-bzr") $AUR"
                echo " 7) $(menu_item "gnome-packagekit")"
                echo ""
                echo " d) DONE"
                echo ""
                CINNAMON_OPTIONS+=" d"
                read_input_options "$CINNAMON_OPTIONS"
                for OPT in ${OPTIONS[@]}; do
                    case "$OPT" in
                        1)
                            aur_package_install "cinnamon-applets"
                            ;;
                        2)
                            aur_package_install "cinnamon-themes"
                            ;;
                        3)
                            install_icons
                            OPT=1
                            ;;
                        4)
                            install_themes
                            OPT=2
                            ;;
                        5)
                            aur_package_install "zeitgeist libzeitgeist python2-rdflib zeitgeist-datahub"
                            aur_package_install "gnome-activity-journal"
                            ;;
                        6)
                            aur_package_install "gloobus-sushi-bzr"
                            ;;
                        7)
                            package_install "gnome-packagekit gnome-settings-daemon-updates"
                            ;;
                        "d")
                            break
                            ;;
                        *)
                            invalid_option
                            ;;
                    esac
                done
            elihw
            done
            #}}}
            config_dm "gdm"
            CURRENT_STATUS=1
            GNOME=1
            ;;
            #}}}
        2)
            #E17 {{{
            print_title "E17 - http://wiki.archlinux.org/index.php/E17"
            print_info "Enlightenment, also known simply as E, is a stacking window manager for the X Window System which can be used alone or in conjunction with a desktop environment such as GNOME or KDE. Enlightenment is often used as a substitute for a full desktop environment."
            package_install "e-svn e17-extra-svn consolekit"
            package_install "ttf-dejavu ttf-bitstream-vera"
            package_install "xdg-user-dirs"
            package_install "leafpad epdfview"
            package_install "lxappearance consolekit"
            aur_package_install "xarchiver"
            aur_package_install "gnome-defaults-list"
            chown -R $USERNAME:users /home/$USERNAME/.config
            create_xinitrc "enlightenment_start"
            #E17 CUSTOMIZATION {{{
            while [[ 1 ]]
            do
                print_title "E17 CUSTOMIZATION"
                echo " 1) $(menu_item "e17-icons") $AUR"
                echo " 2) $(menu_item "e17-themes") $AUR"
                echo " 3) $(menu_item "elsa-svn-arch" "Elsa") $AUR"
                echo " 4) $(menu_item "awoken-icons faenza-icon-theme faenza-cupertino-icon-theme faience-icon-theme elementary-icons" "GNOME Icons") $AUR"
                echo " 5) $(menu_item "geeqie")"
                echo " 6) $(menu_item "gmrun")"
                echo " 7) $(menu_item "pcmanfm" "PCManFM")"
                echo " 8) $(menu_item "rxvt-unicode")"
                echo " 9) $(menu_item "scrot")"
                echo "10) $(menu_item "gtk-theme-boomerang egtk-bzr light-themes orion-gtk-theme zukitwo-themes zukini-theme" "GTK Themes") $AUR"
                echo "11) $(menu_item "thunar")"
                echo "12) $(menu_item "xfburn")"
                echo ""
                echo " d) DONE"
                echo ""
                E17_OPTIONS+=" d"
                read_input_options "$E17_OPTIONS"
                for OPT in ${OPTIONS[@]}; do
                    case "$OPT" in
                        1)
                            aur_package_install "e17-icons"
                            ;;
                        2)
                            aur_package_install "e17-themes"
                            ;;
                        3)
                            aur_package_install "elsa-svn-arch"
                            local elsa=`cat /etc/inittab | sed -n '/elsa/p'`
                            if [[ -z "$elsa" ]]; then
                                echo -e "x:5:respawn:/usr/sbin/elsa >& /dev/null" >> /etc/inittab
                            fi
                            config_dm "elsa"
                            ;;
                        4)
                            install_icons
                            OPT=2
                            ;;
                        5)
                            package_install "geeqie"
                            ;;
                        6)
                            package_install "gmrun"
                            ;;
                        7)
                            package_install "gksu gvfs pcmanfm"
                            ;;
                        8)
                            package_install "rxvt-unicode"
                            ;;
                        9)
                            package_install "scrot"
                            ;;
                        10)
                            install_themes
                            OPT=8
                            ;;
                        11)
                            package_install "polkit-gnome thunar tumbler"
                            package_install "gvfs-smb"
                            ;;
                        12)
                            package_install "xfburn"
                            ;;
                        "d")
                            break
                            ;;
                        *)
                            invalid_option
                            ;;
                    esac
                done
            elihw
            done
            #}}}
            CURRENT_STATUS=1
            E17=1
            ;;
            #}}}
        3)
            #GNOME {{{
            print_title "GNOME - https://wiki.archlinux.org/index.php/GNOME"
            print_info "GNOME is a desktop environment and graphical user interface that runs on top of a computer operating system. It is composed entirely of free and open source software. It is an international project that includes creating software development frameworks, selecting application software for the desktop, and working on the programs that manage application launching, file handling, and window and task management."
            package_install "gnome gnome-extra telepathy"
            gpasswd -a $USERNAME camera
            package_install "gksu nautilus-open-terminal gedit-plugins gnome-tweak-tool"
            package_install "gvfs-smb"
            package_install "zeitgeist"
            package_install "deja-dup"
            package_install "pulseaudio"
            package_install "system-config-printer-gnome"
            aur_package_install "empathy-theme-ubuntu-adium-bzr"
            aur_package_install "automounter gnome-defaults-list"
            create_xinitrc "gnome-session"
            #GNOME CUSTOMIZATION {{{
            while [[ 1 ]]
            do
                print_title "GNOME CUSTOMIZATION"
                echo " 1) $(menu_item "awoken-icons faenza-icon-theme faenza-cupertino-icon-theme faience-icon-theme elementary-icons" "Gnome Icons") $AUR"
                echo " 2) $(menu_item "gtk-theme-boomerang egtk-bzr light-themes orion-gtk-theme zukitwo-themes zukini-theme" "GTK Themes") $AUR"
                echo " 3) $(menu_item "gpaste-git gnome-shell-extension-gtile-git gnome-shell-extension-mediaplayer-git gnome-shell-extension-noa11y-git gnome-shell-extension-pomodoro-git gnome-shell-extension-user-theme-git gnome-shell-extension-weather-git gnome-shell-system-monitor-applet-git" "GnomeShell Extensions") $AUR"
                echo " 4) $(menu_item "gnome-shell-theme-frieze gnome-shell-theme-elegance" "GnomeShell Themes") $AUR"
                echo " 5) $(menu_item "gnome-activity-journal") $AUR"
                echo " 6) $(menu_item "gloobus-sushi-bzr") $AUR"
                echo " 7) $(menu_item "gnome-packagekit")"
                echo ""
                echo " d) DONE"
                echo ""
                GNOME_OPTIONS+=" d"
                read_input_options "$GNOME_OPTIONS"
                for OPT in ${OPTIONS[@]}; do
                    case "$OPT" in
                        1)
                            install_icons
                            OPT=1
                            ;;
                        2)
                            install_themes
                            OPT=2
                            ;;
                        3)
                            #GNOMESHELL EXTENSIONS {{{
                            while [[ 1 ]]
                            do
                                print_title "GNOMESHELL EXTENSIONS"
                                echo " 1) $(menu_item "gpaste-git")"
                                echo " 2) $(menu_item "gnome-shell-extension-mediaplayer-git")"
                                echo " 3) $(menu_item "gnome-shell-extension-noa11y-git")"
                                echo " 4) $(menu_item "gnome-shell-extension-pomodoro-git")"
                                echo " 5) $(menu_item "gnome-shell-system-monitor-applet-git" "System-monitor")"
                                echo " 6) $(menu_item "gnome-shell-extension-user-theme-git")"
                                echo " 7) $(menu_item "gnome-shell-extension-weather-git")"
                                echo " 8) $(menu_item "gnome-shell-extension-gtile-git")"
                                echo ""
                                echo " b) BACK"
                                echo ""
                                GNOME_EXTENSIONS+=" b"
                                read_input_options "$GNOME_EXTENSIONS"
                                for OPT in ${OPTIONS[@]}; do
                                    case "$OPT" in
                                        1)
                                            aur_package_install "gpaste-git"
                                            ;;
                                        2)
                                            aur_package_install "gnome-shell-extension-mediaplayer-git"
                                            ;;
                                        3)
                                            aur_package_install "gnome-shell-extension-noa11y-git"
                                            ;;
                                        4)
                                            aur_package_install "libkeybinder3"
                                            aur_package_install "gnome-shell-extension-pomodoro-git"
                                            ;;
                                        5)
                                            aur_package_install "gnome-shell-system-monitor-applet-git"
                                            ;;
                                        6)
                                            aur_package_install "gnome-shell-extension-user-theme-git"
                                            ;;
                                        7)
                                            aur_package_install "gnome-shell-extension-weather-git"
                                            ;;
                                        8)
                                            aur_package_install "gnome-shell-extension-gtile-git"
                                            ;;
                                        "b")
                                            break
                                            ;;
                                        *)
                                            invalid_option
                                            ;;
                                    esac
                                done
                            elihw
                            done
                            #}}}
                            OPT=3
                            ;;
                        4)
                            #GNOMESHELL THEMES {{{
                            while [[ 1 ]]
                            do
                                print_title "GNOMESHELL THEMES"
                                echo " 1) $(menu_item "gnome-shell-theme-dark-shine")"
                                echo " 2) $(menu_item "gnome-shell-theme-elegance")"
                                echo " 3) $(menu_item "gnome-shell-theme-frieze")"
                                echo ""
                                echo " b) BACK"
                                echo ""
                                GNOME_SHELL_THEMES+=" b"
                                read_input_options "$GNOME_SHELL_THEMES"
                                for OPT in ${OPTIONS[@]}; do
                                    case "$OPT" in
                                        1)
                                            aur_package_install "gnome-shell-theme-dark-shine"
                                            ;;
                                        2)
                                            aur_package_install "gnome-shell-theme-elegance"
                                            ;;
                                        3)
                                            aur_package_install "gnome-shell-theme-frieze"
                                            ;;
                                        "b")
                                            break
                                            ;;
                                        *)
                                            invalid_option
                                            ;;
                                    esac
                                done
                            elihw
                            done
                            #}}}
                            OPT=4
                            ;;
                        5)
                            aur_package_install "libzeitgeist python2-rdflib zeitgeist-datahub"
                            aur_package_install "gnome-activity-journal"
                            ;;
                        6)
                            aur_package_install "gloobus-sushi-bzr"
                            ;;
                        7)
                            package_install "gnome-packagekit gnome-settings-daemon-updates"
                            ;;
                        "d")
                            break
                            ;;
                        *)
                            invalid_option
                            ;;
                    esac
                done
            elihw
            done
            #}}}
            config_dm "gdm"
            CURRENT_STATUS=1
            GNOME=1
            ;;
            #}}}
        4)
            #KDE {{{
            print_title "KDE - https://wiki.archlinux.org/index.php/KDE"
            print_info "KDE is an international free software community producing an integrated set of cross-platform applications designed to run on Linux, FreeBSD, Microsoft Windows, Solaris and Mac OS X systems. It is known for its Plasma Desktop, a desktop environment provided as the default working environment on many Linux distributions."
            package_install "kde kde-l10n-$LANGUAGE_KDE kipi-plugins"
            package_install "kdeadmin-system-config-printer-kde xdg-user-dirs"
            package_install "kde-telepathy"
            package_remove "kdenetwork-kopete kdemultimedia-kscd kdemultimedia-juk"
            aur_package_install "kde-gtk-config-git"
            aur_package_install "oxygen-gtk2 oxygen-gtk3 qtcurve-gtk2 qtcurve-kde4 bespin-svn"
            create_xinitrc "startkde"
            #QTCURVE THEMES #{{{
            wget http://kde-look.org/CONTENT/content-files/144205-Sweet.tar.gz
            wget http://kde-look.org/CONTENT/content-files/141920-Kawai.tar.gz
            tar zxvf 144205-Sweet.tar.gz
            tar zxvf 141920-Kawai.tar.gz
            rm 144205-Sweet.tar.gz
            rm 141920-Kawai.tar.gz
            mkdir -p /home/$USERNAME/.kde4/share/apps/color-schemes
            mv Sweet/Sweet.colors /home/$USERNAME/.kde4/share/apps/color-schemes
            mv Kawai/Kawai.colors /home/$USERNAME/.kde4/share/apps/color-schemes
            mkdir -p /home/$USERNAME/.kde4/share/apps/QtCurve
            mv Sweet/Sweet.qtcurve /home/$USERNAME/.kde4/share/apps/QtCurve
            mv Kawai/Kawai.qtcurve /home/$USERNAME/.kde4/share/apps/QtCurve
            chown -R $USERNAME:users /home/$USERNAME/.kde4
            rm -fr Kawai Sweet
            #}}}
            #KDE CUSTOMIZATION {{{
            while [[ 1 ]]
            do
                print_title "KDE CUSTOMIZATION"
                echo " 1) $(menu_item "apper")"
                echo " 2) $(menu_item "bangarang") $AUR"
                echo " 3) $(menu_item "choqok")"
                echo " 4) $(menu_item "digikam")"
                echo " 5) $(menu_item "k3b")"
                echo " 6) $(menu_item "rosa-icons") $AUR"
                echo " 7) $(menu_item "caledonia-bundle plasma-theme-produkt" "Plasma Themes") $AUR"
                echo " 8) $(menu_item "yakuake")"
                echo ""
                echo " d) DONE"
                echo ""
                KDE_OPTIONS+=" d"
                read_input_options "$KDE_OPTIONS"
                for OPT in ${OPTIONS[@]}; do
                    case "$OPT" in
                        1)
                            package_install "apper"
                            ;;
                        2)
                            aur_package_install "bangarang"
                            ;;
                        3)
                            package_install "choqok"
                            ;;
                        4)
                            package_install "digikam"
                            ;;
                        5)
                            package_install "k3b dvd+rw-tools"
                            ;;
                        6)
                            aur_package_install "rosa-icons"
                            ;;
                        7)
                            aur_package_install "caledonia-bundle plasma-theme-rosa plasma-theme-produkt ronak-plasmatheme"
                            ;;
                        8)
                            package_install "yakuake"
                            aur_package_install "yakuake-skin-plasma-oxygen-panel"
                            ;;
                        "d")
                            break
                            ;;
                        *)
                            invalid_option
                            ;;
                    esac
                done
            elihw
            done
            #}}}
            config_dm "kdm"
            CURRENT_STATUS=1
            KDE=1
            ;;
            #}}}
        5)
            #LXDE {{{
            print_title "LXDE - http://wiki.archlinux.org/index.php/lxde"
            print_info "LXDE is a free and open source desktop environment for Unix and other POSIX compliant platforms, such as Linux or BSD. The goal of the project is to provide a desktop environment that is fast and energy efficient."
            package_install "lxde obconf consolekit"
            package_install "pm-utils upower"
            package_install "polkit-gnome gvfs gvfs-smb xdg-user-dirs"
            package_install "leafpad epdfview"
            aur_package_install "xarchiver"
            aur_package_install "gnome-defaults-list"
            create_xinitrc "startlxde"
            #LXDE CUSTOMIZATION{{{
            while [[ 1 ]]
            do
                print_title "LXDE CUSTOMIZATION"
                echo " 1) $(menu_item "awoken-icons faenza-icon-theme faenza-cupertino-icon-theme faience-icon-theme elementary-icons" "Gnome Icons") $AUR"
                echo " 2) $(menu_item "lxdm" "LXDM") $AUR"
                echo " 3) $(menu_item "gtk-theme-boomerang egtk-bzr light-themes orion-gtk-theme zukitwo-themes zukini-theme" "GTK Themes") $AUR"
                echo " 4) $(menu_item "xfburn")"
                echo ""
                echo " d) DONE"
                echo ""
                LXDE_OPTIONS+=" d"
                read_input_options "$LXDE_OPTIONS"
                for OPT in ${OPTIONS[@]}; do
                    case "$OPT" in
                        1)
                            install_icons
                            OPT=1
                            ;;
                        2)
                            aur_package_install "lxdm"
                            local lxdm=`cat /etc/inittab | sed -n '/lxdm/p'`
                            if [[ -z "$lxdm" ]]; then
                                echo -e "x:5:respawn:/usr/sbin/lxdm >& /dev/null" >> /etc/inittab
                            fi
                            config_dm "lxdm"
                            ;;
                        3)
                            install_themes
                            OPT=3
                            ;;
                        4)
                            package_install "xfburn"
                            ;;
                        "d")
                            break
                            ;;
                        *)
                            invalid_option
                            ;;
                    esac
                done
            elihw
            done
            #}}}
            CURRENT_STATUS=1
            LXDE=1
            ;;
            #}}}
        6)
            #OPENBOX {{{
            print_title "OPENBOX - http://wiki.archlinux.org/index.php/Openbox"
            print_info "Openbox is a lightweight and highly configurable window manager with extensive standards support."
            package_install "openbox obconf obmenu menumaker"
            package_install "lxappearance consolekit"
            package_install "xdg-user-dirs"
            package_install "leafpad epdfview nitrogen"
            aur_package_install "xarchiver"
            aur_package_install "gnome-defaults-list"
            mkdir -p /home/$USERNAME/.config/openbox/
            cp /etc/xdg/openbox/rc.xml /home/$USERNAME/.config/openbox/
            cp /etc/xdg/openbox/menu.xml /home/$USERNAME/.config/openbox/
            cp /etc/xdg/openbox/autostart /home/$USERNAME/.config/openbox/
            chown -R $USERNAME:users /home/$USERNAME/.config
            create_xinitrc "openbox-session"
            #OPENBOX CUSTOMIZATION {{{
            while [[ 1 ]]
            do
                print_title "OPENBOX CUSTOMIZATION"
                echo " 1) $(menu_item "xcompmgr")"
                echo " 2) $(menu_item "awoken-icons faenza-icon-theme faenza-cupertino-icon-theme faience-icon-theme elementary-icons" "Gnome Icons") $AUR"
                echo " 3) $(menu_item "geeqie")"
                echo " 4) $(menu_item "gmrun")"
                echo " 5) $(menu_item "pcmanfm" "PCManFM")"
                echo " 6) $(menu_item "rxvt-unicode")"
                echo " 7) $(menu_item "scrot")"
                echo " 8) $(menu_item "slim")"
                echo " 9) $(menu_item "gtk-theme-boomerang egtk-bzr light-themes orion-gtk-theme zukitwo-themes zukini-theme" "GTK Themes") $AUR"
                echo "10) $(menu_item "thunar")"
                echo "11) $(menu_item "tint2")"
                echo "12) $(menu_item "volwheel")"
                echo "13) $(menu_item "xfburn")"
                echo ""
                echo " d) DONE"
                echo ""
                OPENBOX_OPTIONS+=" d"
                read_input_options "$OPENBOX_OPTIONS"
                for OPT in ${OPTIONS[@]}; do
                    case "$OPT" in
                        1)
                            package_install "xcompmgr transset-df"
                            ;;
                        2)
                            install_icons
                            OPT=2
                            ;;
                        3)
                            package_install "geeqie"
                            ;;
                        4)
                            package_install "gmrun"
                            ;;
                        5)
                            package_install "gksu gvfs pcmanfm"
                            ;;
                        6)
                            package_install "rxvt-unicode"
                            ;;
                        7)
                            package_install "scrot"
                            ;;
                        8)
                            package_install "slim"
                            config_dm "slim"
                            ;;
                        9)
                            install_themes
                            OPT=9
                            ;;
                        10)
                            package_install "thunar tumbler"
                            package_install "gvfs-smb"
                            ;;
                        11)
                            package_install "tint2"
                            ;;
                        12)
                            package_install "volwheel"
                            ;;
                        13)
                            package_install "xfburn"
                            ;;
                        "d")
                            break
                            ;;
                        *)
                            invalid_option
                            ;;
                    esac
                done
            elihw
            done
            #}}}
            CURRENT_STATUS=1
            OPENBOX=1
            ;;
            #}}}
        7)
            #XFCE {{{
            print_title "XFCE - https://wiki.archlinux.org/index.php/Xfce"
            print_info "Xfce is a free software desktop environment for Unix and Unix-like platforms, such as Linux, Solaris, and BSD. It aims to be fast and lightweight, while still being visually appealing and easy to use."
            package_install "xfce4 xfce4-goodies"
            package_install "gvfs-smb"
            package_install "polkit-gnome xdg-user-dirs"
            aur_package_install "automounter"
            aur_package_install "gnome-defaults-list"
            create_xinitrc "startxfce4"
            #XFCE CUSTOMIZATION{{{
            while [[ 1 ]]
            do
                print_title "XFCE CUSTOMIZATION"
                echo " 1) $(menu_item "awoken-icons faenza-icon-theme faenza-cupertino-icon-theme faience-icon-theme elementary-icons" "Gnome Icons") $AUR"
                echo " 2) $(menu_item "gtk-theme-boomerang egtk-bzr light-themes orion-gtk-theme zukitwo-themes zukini-theme" "GTK Themes") $AUR"
                echo " 3) $(menu_item "slim")"
                echo ""
                echo " d) DONE"
                echo ""
                XFCE_OPTIONS+=" d"
                read_input_options "$XFCE_OPTIONS"
                for OPT in ${OPTIONS[@]}; do
                    case "$OPT" in
                        1)
                            install_icons
                            OPT=1
                            ;;
                        2)
                            install_themes
                            OPT=2
                            ;;
                        3)
                            package_install "slim"
                            config_dm "slim"
                            ;;
                        "d")
                            break
                            ;;
                        *)
                            invalid_option
                            ;;
                    esac
                done
            elihw
            done
            #}}}
            CURRENT_STATUS=1
            XFCE=1
            ;;
            #}}}
        *)
            CURRENT_STATUS=0
            ;;
    esac
    sumary "Desktop Environment Installation"
    pause_function
}
#}}}
#NETWORKMANAGER/WICD {{{
function install_nm_wicd(){
    print_title "NETWORK CONNECTION MANAGER"
    echo " 1) Networkmanager"
    echo " 2) Wicd"
    echo ""
    echo " n) NONE"
    echo ""
    read_input $NETWORKMANAGER
    case "$OPTION" in
        1)
            print_title "NETWORKMANAGER - https://wiki.archlinux.org/index.php/Networkmanager"
            print_info "NetworkManager is a program for providing detection and configuration for systems to automatically connect to network. NetworkManager's functionality can be useful for both wireless and wired networks."
            if [[ $GNOME -eq 1 || $XFCE -eq 1 || $LXDE -eq 1 || $OPENBOX -eq 1 || $E17 -eq 1 ]]; then
                package_install "networkmanager network-manager-applet"
            elif [[ $KDE -eq 1 ]]; then
                package_install "networkmanager kdeplasma-applets-networkmanagement"
            else
                package_install "networkmanager"
            fi
            groupadd networkmanager
            gpasswd -a $USERNAME networkmanager
            remove_daemon "networkmanager"
            remove_daemon "network"
            remove_daemon "wicd"
            add_daemon "networkmanager"
            CURRENT_STATUS=1
            sumary "Networkmanager installation"
            ;;
        2)
            print_title "WICD - https://wiki.archlinux.org/index.php/Wicd"
            print_info "Wicd is a network connection manager that can manage wireless and wired interfaces, similar and an alternative to NetworkManager."
            if [[ $GNOME -eq 1 || $XFCE -eq 1 || $LXDE -eq 1 || $OPENBOX -eq 1 || $E17 -eq 1 ]]; then
                package_install "wicd wicd-gtk"
            elif [[ $KDE -eq 1 ]]; then
                aur_package_install "wicd wicd-kde"
            else
                package_install "wicd"
            fi
            remove_daemon "networkmanager"
            remove_daemon "network"
            add_daemon "wicd"
            CURRENT_STATUS=1
            sumary "Wicd installation"
            ;;
        *)
            remove_daemon "networkmanager"
            remove_daemon "wicd"
            add_daemon "network"
            CURRENT_STATUS=0
            sumary "Network manager installation"
            ;;
    esac
    if check_package "nfs-utils" ; then
        add_daemon "rpcbind nfs-common @netfs nfs-server"
    fi
    if check_package "avahi" ; then
        add_daemon "avahi-daemon avahi-dnsconfd"
    fi
    pause_function
}
#}}}
#ACCESSORIES {{{
function install_accessories_apps(){
while [[ 1 ]]
do
    print_title "ACCESSORIES APPS"
    echo " 1) $(menu_item "cairo-dock-bzr") $AUR"
    echo " 2) $(menu_item "conky-lua" "Conky + CONKY-colors") $AUR"
    echo " 3) $(menu_item "deepin-scrot-git") $AUR"
    echo " 4) $(menu_item "dockbarx") $AUR"
    echo " 5) $(menu_item "docky") $AUR"
    echo " 6) $(menu_item "speedcrunch galculator" "$([[ $KDE -eq 1 ]] && echo "Speedcrunch" || echo "Galculator";)") $AUR"
    echo " 7) $(menu_item "gnome-pie") $AUR"
    echo " 8) $(menu_item "guake")"
    echo " 9) $(menu_item "kupfer") $AUR"
    echo "10) $(menu_item "pyrenamer") $AUR"
    echo "11) $(menu_item "shutter") $AUR"
    echo "12) $(menu_item "synapse") $AUR"
    echo "13) $(menu_item "terminator")"
    echo "14) $(menu_item "zim")"
    echo ""
    echo " b) BACK"
    echo ""
    ACCESSORIES_OPTIONS+=" b"
    read_input_options "$ACCESSORIES_OPTIONS"
    for OPT in ${OPTIONS[@]}; do
        case "$OPT" in
            1)
                aur_package_install "cairo-dock-bzr cairo-dock-plugins-bzr"
                ;;
            2)
                aur_package_install "conky-lua conky-colors"
                sensors-detect
                add_daemon "sensors"
                ;;
            3)
                aur_package_install "deepin-scrot-git"
                ;;
            4)
                aur_package_install "dockbarx dockbarx-shinybar-theme"
                ;;
            5)
                aur_package_install "docky"
                ;;
            6)
                if [[ $KDE -eq 1 ]]; then
                    aur_package_install "speedcrunch"
                else
                    aur_package_install "galculator"
                fi
                ;;
            7)
                aur_package_install "gnome-pie"
                ;;
            8)
                package_install "guake"
                ;;
            9)
                aur_package_install "kupfer"
                ;;
            10)
                aur_package_install "pyrenamer"
                ;;
            11)
                aur_package_install "shutter"
                ;;
            12)
                package_install "zeitgeist"
                aur_package_install "libzeitgeist zeitgeist-datahub synapse"
                ;;
            13)
                package_install "terminator"
                aur_package_install "python-keybinder"
                ;;
            14)
                package_install "zim"
                ;;
            "b")
                break
                ;;
            *)
                invalid_option
                ;;
        esac
    done
elihw
done
}
#}}}
#DEVELOPEMENT {{{
function install_development_apps(){
while [[ 1 ]]
do
    print_title "DEVELOPMENT APPS"
    echo " 1) $(menu_item "aptana-studio") $AUR"
    echo " 2) $(menu_item "bluefish")"
    echo " 3) $(menu_item "eclipse")"
    echo " 4) $(menu_item "emacs")"
    echo " 5) $(menu_item "gvim")"
    echo " 6) $(menu_item "geany")"
    echo " 7) $(menu_item "intellij-idea-community-edition" "IntelliJ IDEA")"
    echo " 8) $(menu_item "netbeans")"
    echo " 9) $(menu_item "jdk" "Oracle Java") $AUR"
    echo "10) $(menu_item "qtcreator")"
    echo "11) $(menu_item "sublime-text" "Sublime Text 2") $AUR"
    echo "12) $(menu_item "gdb" "Debugger Tools")"
    echo "13) $(menu_item "mysql-workbench" "MySQL Workbench") $AUR"
    echo "14) $(menu_item "meld")"
    echo "15) $(menu_item "rabbitvcs" "RabbitVCS") $AUR"
    echo ""
    echo " b) BACK"
    echo ""
    DEVELOPMENT_OPTIONS+=" b"
    read_input_options "$DEVELOPMENT_OPTIONS"
    for OPT in ${OPTIONS[@]}; do
        case "$OPT" in
            1)
                aur_package_install "aptana-studio"
                ;;
            2)
                package_install "bluefish"
                ;;
            3)
                #ECLIPSE {{{
                while [[ 1 ]]
                do
                    print_title "ECLIPSE - https://wiki.archlinux.org/index.php/Eclipse"
                    print_info "Eclipse is an open source community project, which aims to provide a universal development platform."
                    echo " 1) $(menu_item "eclipse")"
                    echo " 2) $(menu_item "eclipse-cdt" "Eclipse IDE for C/C++ Developers")"
                    echo " 3) $(menu_item "eclipse-android" "Android Development Tools for Eclipse") $AUR"
                    echo " 4) $(menu_item "eclipse-wtp-wst" "Web Development Tools for Eclipse") $AUR"
                    echo " 5) $(menu_item "eclipse-pdt" "PHP Development Tools for Eclipse ") $AUR"
                    echo " 6) $(menu_item "eclipse-pydev" "Python Development Tools for Eclipse") $AUR"
                    echo " 7) $(menu_item "eclipse-aptana" "Aptana Studio plugin for Eclipse") $AUR"
                    echo " 8) $(menu_item "eclipse-vrapper" "Vim-like editing plugin for Eclipse ") $AUR"
                    echo " 9) $(menu_item "eclipse-egit" "Git support plugin for Eclipse") $AUR"
                    echo ""
                    echo " b) BACK"
                    echo ""
                    ECLIPSE_OPTIONS+=" b"
                    read_input_options "$ECLIPSE"
                    for OPT in ${OPTIONS[@]}; do
                        case "$OPT" in
                            1)
                                package_install "eclipse"
                                ;;
                            2)
                                package_install "eclipse-cdt"
                                ;;
                            3)
                                aur_package_install "eclipse-android android-apktool android-sdk android-sdk-platform-tools android-udev"
                                ;;
                            4)
                                aur_package_install "eclipse-wtp-wst"
                                ;;
                            5)
                                aur_package_install "eclipse-pdt"
                                ;;
                            6)
                                aur_package_install "eclipse-pydev"
                                ;;
                            7)
                                aur_package_install "eclipse-aptana"
                                ;;
                            8)
                                aur_package_install "eclipse-vrapper"
                                ;;
                            9)
                                aur_package_install "eclipse-egit"
                                ;;
                            "b")
                                break
                                ;;
                            *)
                                invalid_option
                                ;;
                        esac
                    done
                elihw
                done
                #}}}
                OPT=3
                ;;
            4)
                package_install "emacs"
                ;;
            5)
                package_remove "vim"
                package_install "gvim"
                ;;
            6)
                package_install "geany"
                ;;
            7)
                package_install "intellij-idea-community-edition"
                ;;
            8)
                package_install "netbeans"
                ;;
            9)
                package_remove "jre7-openjdk"
                package_remove "jdk7-openjdk"
                aur_package_install "jdk"
                ;;
            10)
                package_install "qtcreator qt-doc"
                mkdir -p /home/$USERNAME/.config/Nokia/qtcreator/styles
                wget http://angrycoding.googlecode.com/svn/branches/qt-creator-monokai-theme/monokai.xml
                mv monokai.xml /home/$USERNAME/.config/Nokia/qtcreator/styles/
                chown -R $USERNAME:users /home/$USERNAME/.config
                ;;
            11)
                aur_package_install "sublime-text"
                ;;
            12)
                aur_package_install "valgrind gdb splint tidyhtml python2-pyflakes jslint"
                ;;
            13)
                aur_package_install "mysql-workbench"
                ;;
            14)
                package_install "meld"
                ;;
            15)
                aur_package_install "rabbitvcs"
                if [[ $GNOME -eq 1 ]]; then
                    aur_package_install "rabbitvcs-nautilus"
                elif [[ $XFCE -eq 1 ]]; then
                    aur_package_install "rabbitvcs-thunar"
                else
                    aur_package_install "rabbitvcs-cli"
                fi
                ;;
            "b")
                break
                ;;
            *)
                invalid_option
                ;;
        esac
    done
elihw
done
}
#}}}
#OFFICE {{{
function install_office_apps(){
while [[ 1 ]]
do
    print_title "OFFICE APPS"
    echo " 1) $(menu_item "libreoffice-common" "LibreOffice")"
    echo " 2) $(menu_item "goffice" "Abiword + Gnumeric")"
    echo " 3) $(menu_item "texlive-core" "latex")"
    echo " 4) $(menu_item "kchmviewer chmsee" "$([[ $KDE -eq 1 ]] && echo "Kchmviewer" || echo "Chmsee";)")"
    echo " 5) $(menu_item "gcstar")"
    echo " 6) $(menu_item "impressive")"
    echo " 7) $(menu_item "nitrotasks") $AUR"
    echo " 8) $(menu_item "ocrfeeder")"
    echo " 9) $(menu_item "xmind") $AUR"
    echo "10) $(menu_item "zathura")"
    echo ""
    echo " b) BACK"
    echo ""
    OFFICE_OPTIONS+=" b"
    read_input_options "$OFFICE_OPTIONS"
    for OPT in ${OPTIONS[@]}; do
        case "$OPT" in
            1)
                print_title "LIBREOFFICE - https://wiki.archlinux.org/index.php/LibreOffice"
                if [[ $AUTOMATIC_MODE -eq 1 ]]; then
                    pacman -S --noconfirm --needed libreoffice-$LANGUAGE_LO libreoffice-common libreoffice-{base,calc,draw,impress,math,writer} libreoffice-extension-presenter-screen libreoffice-extension-pdfimport
                else
                    pacman -S --needed libreoffice-$LANGUAGE_LO libreoffice-common libreoffice-{base,calc,draw,impress,math,writer} libreoffice-extension-presenter-screen libreoffice-extension-pdfimport
                fi
                aur_package_install "hunspell-$LANGUAGE_HS"
                aur_package_install "aspell-$LANGUAGE_AS"
                if [[ $KDE -eq 1 ]]; then
                    package_install "libreoffice-kde4"
                else
                    package_install "libreoffice-gnome"
                fi
                ;;
            2)
                package_install "gnumeric abiword abiword-plugins"
                aur_package_install "hunspell-$LANGUAGE_HS"
                aur_package_install "aspell-$LANGUAGE_AS"
                ;;
            3)
                print_title "LATEX - https://wiki.archlinux.org/index.php/LaTeX"
                package_install "texlive-most"
                aur_package_install "texmaker"
                if [[ $LANGUAGE == pt_BR ]]; then
                    aur_package_install "abntex"
                fi
                ;;
            4)
                if [[ $KDE -eq 1 ]]; then
                    package_install "kchmviewer"
                else
                    package_install "chmsee"
                fi
                ;;
            5)
                package_install "gcstar"
                ;;
            6)
                package_install "impressive"
                ;;
            7)
                aur_package_install "nitrotasks"
                ;;
            8)
                package_install "ocrfeeder tesseract gocr"
                aur_package_install "aspell-$LANGUAGE_AS"
                ;;
            9)
                aur_package_install "xmind"
                ;;
            10)
                package_install "zathura"
                ;;
            "b")
                break
                ;;
            *)
                invalid_option
                ;;
        esac
    done
elihw
done
}
#}}}
#SYSTEM TOOLS {{{
function install_system_apps(){
while [[ 1 ]]
do
    print_title "SYSTEM TOOLS APPS"
    echo " 1) $(menu_item "gparted")"
    echo " 2) $(menu_item "grsync")"
    echo " 3) $(menu_item "htop")"
    echo " 4) $(menu_item "virtualbox")"
    echo " 5) $(menu_item "wine")"
    echo ""
    echo " b) BACK"
    echo ""
    SYSTEMTOOLS_OPTIONS+=" b"
    read_input_options "$SYSTEMTOOLS_OPTIONS"
    for OPT in ${OPTIONS[@]}; do
        case "$OPT" in
            1)
                package_install "gparted"
                ;;
            2)
                package_install "grsync"
                ;;
            3)
                package_install "htop"
                ;;
            4)
                package_install "virtualbox virtualbox-additions"
                aur_package_install "virtualbox-ext-oracle"
                add_module "vboxdrv"
                groupadd vboxusers
                gpasswd -a $USERNAME vboxusers
                ;;
            5)
                package_install "wine wine_gecko winetricks"
                ;;
            "b")
                break
                ;;
            *)
                invalid_option
                ;;
        esac
    done
elihw
done
}
#}}}
#GRAPHICS {{{
function install_graphics_apps(){
while [[ 1 ]]
do
    print_title "GRAPHICS APPS"
    echo " 1) $(menu_item "blender")"
    echo " 2) $(menu_item "gimp")"
    echo " 3) $(menu_item "gimp-paint-studio" "Gimp-plugins") $AUR"
    echo " 4) $(menu_item "gthumb")"
    echo " 5) $(menu_item "inkscape")"
    echo " 6) $(menu_item "mcomix")"
    echo " 7) $(menu_item "mypaint")"
    echo " 8) $(menu_item "shotwell")"
    echo ""
    echo " b) BACK"
    echo ""
    GRAPHICS_OPTIONS+=" b"
    read_input_options "$GRAPHICS_OPTIONS"
    for OPT in ${OPTIONS[@]}; do
        case "$OPT" in
            1)
                package_install "blender"
                ;;
            2)
                package_install "gimp"
                ;;
            3)
                aur_package_install "gimp-paint-studio gimp-resynth gimpfx-foundry gimp-plugin-pandora gimp-plugin-saveforweb"
                ;;
            4)
                package_install "gthumb"
                ;;
            5)
                package_install "inkscape uniconvertor python2-numpy python-lxml"
                aur_package_install "sozi"
                ;;
            6)
                aur_package_install "mcomix"
                ;;
            7)
                aur_package_install "mypaint"
                ;;
            8)
                aur_package_install "shotwell"
                ;;
            "b")
                break
                ;;
            *)
                invalid_option
                ;;
        esac
    done
elihw
done
}
#}}}
#INTERNET {{{
function install_internet_apps(){
while [[ 1 ]]
do
    print_title "INTERNET APPS"
    echo " 1) $(menu_item "dropbox") $AUR"
    echo " 2) $(menu_item "chromium")"
    echo " 3) $(menu_item "google-earth") $AUR"
    echo " 4) $(menu_item "google-chrome") $AUR"
    echo " 5) $(menu_item "jdownloader") $AUR"
    echo " 6) $(menu_item "irssi")"
    echo " 7) $(menu_item "midori")"
    echo " 8) $(menu_item "firefox")"
    echo " 9) $(menu_item "thunderbird")"
    echo "10) $(menu_item "pidgin")"
    echo "11) $(menu_item "remmina")"
    echo "12) $(menu_item "skype")"
    echo "13) $(menu_item "teamspeak3") $AUR"
    echo "14) $(menu_item "teamviewer") $AUR"
    echo "15) $(menu_item "transmission-qt transmission-gtk" "Trasmission")"
    echo "16) $(menu_item "konversation xchat" "$([[ $KDE -eq 1 ]] && echo "Konversation" || echo "X-Chat";)")"
    echo ""
    echo " b) BACK"
    echo ""
    INTERNET_OPTIONS+=" b"
    read_input_options "$INTERNET_OPTIONS"
    for OPT in ${OPTIONS[@]}; do
        case "$OPT" in
            1)
                aur_package_install "dropbox"
                if [[ $GNOME -eq 1 ]]; then
                    aur_package_install "nautilus-dropbox"
                elif [[ $XFCE -eq 1 ]]; then
                    aur_package_install "thunar-dropbox"
                elif [[ $KDE -eq 1 ]]; then
                    aur_package_install "kfilebox"
                else
                    aur_package_install "dropbox-cli"
                fi
                ;;
            2)
                package_install "chromium flashplugin"
                ;;
            3)
                aur_package_install "google-earth"
                ;;
            4)
                aur_package_install "google-chrome flashplugin"
                ;;
            5)
                aur_package_install "jdownloader"
                ;;
            6)
                package_install "irssi"
                ;;
            7)
                package_install "midori"
                ;;
            8)
                package_install "firefox firefox-i18n-$LANGUAGE_FF flashplugin "
                ;;
            9)
                package_install "thunderbird thunderbird-i18n-$LANGUAGE_FF"
                ;;
            10)
                package_install "pidgin"
                ;;
            11)
                package_install "remmina"
                ;;
            12)
                package_install "skype"
                ;;
            13)
                aur_package_install "teamspeak3"
                ;;
            14)
                aur_package_install "teamviewer"
                ;;
            15)
                if [[ $KDE -eq 1 ]]; then
                    package_install "transmission-qt"
                else
                    package_install "transmission-gtk"
                fi
                ;;
            16)
                if [[ $KDE -eq 1 ]]; then
                    package_install "konversation"
                else
                    package_install "xchat"
                fi
                ;;
            "b")
                break
                ;;
            *)
                invalid_option
                ;;
        esac
    done
elihw
done
}
#}}}
#LAMP #{{{
function install_lamp(){
print_title "LAMP SERVER - APACHE, MYSQL & PHP + ADMINER\n# https://wiki.archlinux.org/index.php/LAMP"
read_input_text "Install LAMP" $LAMP
case "$OPTION" in
    "y")
        package_install "apache mysql php php-apache php-mcrypt php-gd"
        aur_package_install "adminer"
        if [[ ! -f /etc/php/php.ini.aui ]]; then
            cp -v /etc/php/php.ini /etc/php/php.ini.aui
            cp -v /etc/httpd/conf/extra/httpd-userdir.conf /etc/httpd/conf/extra/httpd-userdir.conf.aui
            cp -v /etc/httpd/conf/httpd.conf /etc/httpd/conf/httpd.conf.aui
            add_daemon "httpd @mysqld"
            #CONFIGURE LAMP SERVER {{{
            /usr/bin/mysql_secure_installation
            echo -e '\n# adminer configuration\nInclude conf/extra/httpd-adminer.conf' >> /etc/httpd/conf/httpd.conf
            echo -e 'application/x-httpd-php        php' >> /etc/httpd/conf/mime.types
            sed -i '/LoadModule dir_module modules\/mod_dir.so/a\LoadModule php5_module modules\/libphp5.so' /etc/httpd/conf/httpd.conf
            echo -e '\n# Use for PHP 5.x:\nInclude conf/extra/php5_module.conf\n\nAddHandler php5-script php' >> /etc/httpd/conf/httpd.conf
            sed -i 's/DirectoryIndex\ index.html/DirectoryIndex\ index.html\ index.php/g' /etc/httpd/conf/httpd.conf
            sed -i 's/public_html/Sites/g' /etc/httpd/conf/extra/httpd-userdir.conf
            sed -i '/mysqli.so/s/^;//' /etc/php/php.ini
            sed -i '/mysql.so/s/^;//' /etc/php/php.ini
            sed -i '/mcrypt.so/s/^;//' /etc/php/php.ini
            sed -i '/gd.so/s/^;//' /etc/php/php.ini
            sed -i '/display_errors[=]/s/off/on/' /etc/php/php.ini
            sed -i '/skip-networking/s/^/#/' /etc/mysql/my.cnf
            #}}}
        fi
        su -l $USERNAME --command="mkdir -p ~/Sites"
        su -l $USERNAME --command="chmod o+x ~/ && chmod -R o+x ~/Sites"
        rc.d restart httpd mysqld
        CURRENT_STATUS=1
        print_line
        echo "The folder \"Sites\" has been created in your home"
        echo "You can access your projects at \"http://localhost/~username\""
        ;;
    *)
        CURRENT_STATUS=0
        ;;
esac
sumary "LAMP installation"
pause_function
}
#}}}
#AUDIO {{{
function install_audio_apps(){
while [[ 1 ]]
do
    print_title "AUDIO APPS "
    echo " 1) $(menu_item "amarok")"
    echo " 2) $(menu_item "audacious")"
    echo " 3) $(menu_item "banshee")"
    echo " 4) $(menu_item "clementine")"
    echo " 5) $(menu_item "deadbeef")"
    echo " 6) $(menu_item "exaile") $AUR"
    echo " 7) $(menu_item "musique") $AUR"
    echo " 8) $(menu_item "nuvola-bzr-stable") $AUR"
    echo " 9) $(menu_item "rhythmbox")"
    echo "10) $(menu_item "spotify") $AUR"
    echo "11) $(menu_item "soundconverter")"
    echo "12) $(menu_item "puddletag") $AUR"
    echo "13) $(menu_item "audacity")"
    echo "14) $(menu_item "timidity++")"
    echo "15) $(menu_item "gstreamer0.10-ugly" "Codecs")"
    echo ""
    echo " b) BACK"
    echo ""
    AUDIO_OPTIONS+=" b"
    read_input_options "$AUDIO_OPTIONS"
    for OPT in ${OPTIONS[@]}; do
        case "$OPT" in
            1)
                package_install "amarok"
                ;;
            2)
                package_install "audacious audacious-plugins"
                ;;
            3)
                package_install "banshee"
                ;;
            4)
                package_install "clementine"
                ;;
            5)
                package_install "deadbeef"
                ;;
            6)
                aur_package_install "exaile"
                ;;
            7)
                aur_package_install "musique"
                ;;
            8)
                aur_package_install "nuvola-bzr-stable"
                ;;
            9)
                package_install "rhythmbox"
                ;;
            10)
                aur_package_install "spotify"
                ;;
            11)
                package_install "soundconverter"
                ;;
            12)
                aur_package_install "puddletag"
                ;;
            13)
                package_install "audacity"
                ;;
            14)
                aur_package_install "timidity++ fluidr3"
                echo -e 'soundfont /usr/share/soundfonts/fluidr3/FluidR3GM.SF2' >> /etc/timidity++/timidity.cfg
                ;;
            15)
                package_install "gstreamer0.10-plugins"
                ;;
            "b")
                break
                ;;
            *)
                invalid_option
                ;;
        esac
    done
elihw
done
}
#}}}
#VIDEO {{{
function install_video_apps(){
while [[ 1 ]]
do
    print_title "VIDEO APPS"
    echo " 1) $(menu_item "audience-bzr") $AUR"
    echo " 2) $(menu_item "gnome-mplayer")"
    echo " 3) $(menu_item "parole")"
    echo " 4) $(menu_item "minitube") $AUR"
    echo " 5) $(menu_item "miro")"
    echo " 6) $(menu_item "rosa-media-player-bin") $AUR"
    echo " 7) $(menu_item "smplayer")"
    echo " 8) $(menu_item "vlc")"
    echo " 9) $(menu_item "xbmc")"
    echo "10) $(menu_item "arista-transcoder" "Arista")"
    echo "11) $(menu_item "transmageddon")"
    echo "12) $(menu_item "kdenlive")"
    echo "13) $(menu_item "openshot")"
    echo "14) $(menu_item "pitivi")"
    echo "15) $(menu_item "kazam-bzr") $AUR"
    echo "16) $(menu_item "codecs codecs64" "Codecs") $AUR"
    echo ""
    echo " b) BACK"
    echo ""
    VIDEO_OPTIONS+=" b"
    read_input_options "$VIDEO_OPTIONS"
    for OPT in ${OPTIONS[@]}; do
        case "$OPT" in
            1)
                aur_package_install "audience-bzr"
                ;;
            2)
                package_install "gnome-mplayer"
                ;;
            3)
                package_install "parole"
                ;;
            4)
                aur_package_install "minitube"
                ;;
            5)
                package_install "miro"
                ;;
            6)
                aur_package_install "rosa-media-player-bin"
                ;;
            7)
                package_install "smplayer smplayer-themes"
                ;;
            8)
                package_install "vlc"
                if [[ $KDE -eq 1 ]]; then
                    package_install "phonon-vlc"
                fi
                ;;
            9)
                package_install "xbmc"
                ;;
            10)
                package_install "arista-transcoder"
                ;;
            11)
                package_install "transmageddon"
                ;;
            12)
                package_install "kdenlive"
                ;;
            13)
                package_install "openshot"
                ;;
            14)
                package_install "pitivi"
                ;;
            15)
                aur_package_install "python-rsvg"
                aur_package_install "kazam-bzr"
                ;;
            16)
                package_install "libquicktime libdvdread libdvdnav libdvdcss cdrdao"
                if [[ $ARCHI == i686 ]]; then
                    aur_package_install "codecs"
                else
                    aur_package_install "codecs64"
                fi
                ;;
            "b")
                break
                ;;
            *)
                invalid_option
                ;;
        esac
    done
elihw
done
}
#}}}
#GAMES {{{
function install_games(){
while [[ 1 ]]
do
    print_title "GAMES - https://wiki.archlinux.org/index.php/Games"
    echo " 1) Action/Adventure"
    echo " 2) Arcade/Platformer"
    echo " 3) Dungeon"
    echo " 4) Emulators"
    echo " 5) FPS"
    echo " 6) MMO"
    echo " 7) Puzzle"
    echo " 8) RPG"
    echo " 9) Racing"
    echo "10) Simulation"
    echo "11) Strategy"
    echo ""
    echo " b) BACK"
    echo ""
    FUN+=" b"
    read_input_options "$FUN"
    for OPT in ${OPTIONS[@]}; do
        case "$OPT" in
            1)
                #ACTION/ADVENTURE {{{
                while [[ 1 ]]
                do
                    print_title "ACTION AND ADVENTURE"
                    echo " 1) $(menu_item "astromenace")"
                    echo " 2) $(menu_item "opentyrian-hg") $AUR"
                    echo " 3) $(menu_item "mars-shooter" "M.A.R.S.") $AUR"
                    echo " 4) $(menu_item "yofrankie" "Yo Frankie!") $AUR"
                    echo " 5) $(menu_item "counter-strike-2d" "Counter-Strike 2D") $AUR"
                    echo ""
                    echo " b) BACK"
                    echo ""
                    ACTION+=" b"
                    read_input_options "$ACTION"
                    for OPT in ${OPTIONS[@]}; do
                        case "$OPT" in
                            1)
                                package_install "astromenace"
                                ;;
                            2)
                                aur_package_install "opentyrian-hg"
                                ;;
                            3)
                                aur_package_install "mars-shooter"
                                ;;
                            4)
                                aur_package_install "yofrankie"
                                ;;
                            5)
                                aur_package_install "counter-strike-2d"
                                ;;
                            "b")
                                break
                                ;;
                            *)
                                invalid_option
                                ;;
                        esac
                    done
                elihw
                done
                #}}}
                OPT=1
                ;;
            2)
                #ARCADE/PLATFORMER {{{
                while [[ 1 ]]
                do
                    print_title "ARCADE AND PLATFORMER"
                    echo " 1) $(menu_item "opensonic") $AUR"
                    echo " 2) $(menu_item "frogatto")"
                    echo " 3) $(menu_item "bomberclone")"
                    echo " 4) $(menu_item "goonies") $AUR"
                    echo " 5) $(menu_item "mari0") $AUR"
                    echo " 6) $(menu_item "neverball")"
                    echo " 7) $(menu_item "smc" "Super Mario Chronicles")"
                    echo " 8) $(menu_item "xmoto")"
                    echo ""
                    echo " b) BACK"
                    echo ""
                    ARCADE+=" b"
                    read_input_options "$ARCADE"
                    for OPT in ${OPTIONS[@]}; do
                        case "$OPT" in
                            1)
                                aur_package_install "opensonic"
                                ;;
                            2)
                                package_install "frogatto"
                                ;;
                            3)
                                package_install "bomberclone"
                                ;;
                            4)
                                aur_package_install "goonies"
                                ;;
                            5)
                                aur_package_install "mari0"
                                ;;
                            6)
                                package_install "neverball"
                                ;;
                            7)
                                package_install "smc"
                                ;;
                            8)
                                package_install "xmoto"
                                ;;
                            "b")
                                break
                                ;;
                            *)
                                invalid_option
                                ;;
                        esac
                    done
                elihw
                done
                #}}}
                OPT=2
                ;;
            3)
                #DUNGEON {{{
                while [[ 1 ]]
                do
                    print_title "DUNGEON"
                    echo " 1) $(menu_item "adom") $AUR"
                    echo " 2) $(menu_item "tome4" "Tales of MajEyal") $AUR"
                    echo " 3) $(menu_item "lostlabyrinth" "Lost Labyrinth") $AUR"
                    echo " 4) $(menu_item "scourge" "S.C.O.U.R.G.E.") $AUR"
                    echo ""
                    echo " b) BACK"
                    echo ""
                    DUNGEON+=" b"
                    read_input_options "$DUNGEON"
                    for OPT in ${OPTIONS[@]}; do
                        case "$OPT" in
                            1)
                                aur_package_install "adom"
                                ;;
                            2)
                                aur_package_install "tome4"
                                ;;
                            3)
                                aur_package_install "lostlabyrinth"
                                ;;
                            4)
                                aur_package_install "scourge"
                                ;;
                            "b")
                                break
                                ;;
                            *)
                                invalid_option
                                ;;
                        esac
                    done
                elihw
                done
                #}}}
                OPT=3
                ;;
            4)
                #EMULATORS {{{
                while [[ 1 ]]
                do
                    print_title "EMULATORS"
                    echo " 1) $(menu_item "bsnes" "BSNES") $AUR"
                    echo " 2) $(menu_item "desmume-svn") $AUR"
                    echo " 3) $(menu_item "dolphin-emu" "Dolphin") $AUR"
                    echo " 4) $(menu_item "epsxe") $AUR"
                    echo " 5) $(menu_item "project64") $AUR"
                    echo " 6) $(menu_item "vba-m-gtk-svn" "VisualBoyAdvanced") $AUR"
                    echo " 7) $(menu_item "wxmupen64plus-hg") $AUR"
                    echo " 8) $(menu_item "zsnes")"
                    echo ""
                    echo " b) BACK"
                    echo ""
                    EMULATORS+=" b"
                    read_input_options "$EMULATORS"
                    for OPT in ${OPTIONS[@]}; do
                        case "$OPT" in
                            1)
                                aur_package_install "bsnes"
                                ;;
                            2)
                                aur_package_install "desmume-svn"
                                ;;
                            3)
                                aur_package_install "dolphin-emu"
                                ;;
                            4)
                                aur_package_install "epsxe"
                                ;;
                            5)
                                aur_package_install "project64"
                                ;;
                            6)
                                aur_package_install "vba-m-gtk-svn"
                                ;;
                            7)
                                aur_package_install "wxmupen64plus-hg"
                                aur_package_install "mupen64plus-video-rice-hg"
                                aur_package_install "mupen64plus-audio-sdl-hg"
                                aur_package_install "mupen64plus-input-sdl-hg"
                                aur_package_install "mupen64plus-rsp-hle-hg"
                                ;;
                            8)
                                package_install "zsnes"
                                ;;
                            "b")
                                break
                                ;;
                            *)
                                invalid_option
                                ;;
                        esac
                    done
                elihw
                done
                #}}}
                OPT=4
                ;;
            5)
                #FPS {{{
                while [[ 1 ]]
                do
                    print_title "FPS"
                    echo " 1) $(menu_item "alienarena")"
                    echo " 2) $(menu_item "warsow")"
                    echo " 3) $(menu_item "enemy-territory" "Wolfenstein: Enemy Territory") $AUR"
                    echo " 4) $(menu_item "worldofpadman" "World of Padman") $AUR"
                    echo " 5) $(menu_item "xonotic")"
                    echo ""
                    echo " b) BACK"
                    echo ""
                    FPS+=" b"
                    read_input_options "$FPS"
                    for OPT in ${OPTIONS[@]}; do
                        case "$OPT" in
                            1)
                                package_install "alienarena"
                                ;;
                            2)
                                package_install "warsow"
                                ;;
                            3)
                                aur_package_install "enemy-territory"
                                ;;
                            4)
                                aur_package_install "worldofpadman"
                                ;;
                            5)
                                package_install "xonotic"
                                ;;

                            "b")
                                break
                                ;;
                            *)
                                invalid_option
                                ;;
                        esac
                    done
                elihw
                done
                #}}}
                OPT=5
                ;;
            6)
                #MMO {{{
                while [[ 1 ]]
                do
                    print_title "MMO"
                    echo " 1) $(menu_item "hon" "Heroes of Newerth") $AUR"
                    echo " 2) $(menu_item "manaplus") $AUR"
                    echo " 3) $(menu_item "savage2") $AUR"
                    echo " 4) $(menu_item "spiral-knights") $AUR"
                    echo ""
                    echo " b) BACK"
                    echo ""
                    MMO+=" b"
                    read_input_options "$MMO"
                    for OPT in ${OPTIONS[@]}; do
                        case "$OPT" in
                            1)
                                aur_package_install "hon"
                                ;;
                            2)
                                aur_package_install "manaplus"
                                ;;
                            3)
                                aur_package_install "savage2"
                                ;;
                            4)
                                aur_package_install "spiral-knights"
                                ;;
                            "b")
                                break
                                ;;
                            *)
                                invalid_option
                                ;;
                        esac
                    done
                elihw
                done
                #}}}
                OPT=6
                ;;
            7)
                #PUZZLE {{{
                while [[ 1 ]]
                do
                    print_title "PUZZLE"
                    echo " 1) $(menu_item "frozen-bubble")"
                    echo " 2) $(menu_item "numptyphysics-svn") $AUR"
                    echo ""
                    echo " b) BACK"
                    echo ""
                    PUZZLE+=" b"
                    read_input_options "$PUZZLE"
                    for OPT in ${OPTIONS[@]}; do
                        case "$OPT" in
                            1)
                                package_install "frozen-bubble"
                                ;;
                            2)
                                aur_package_install "numptyphysics-svn"
                                ;;
                            "b")
                                break
                                ;;
                            *)
                                invalid_option
                                ;;
                        esac
                    done
                elihw
                done
                #}}}
                OPT=7
                ;;
            8)
                #RPG {{{
                while [[ 1 ]]
                do
                    print_title "RPG"
                    echo " 1) $(menu_item "ardentryst") $AUR"
                    echo " 2) $(menu_item "flare-rpg") $AUR"
                    echo " 3) $(menu_item "freedroidrpg" "Freedroid RPG")"
                    echo ""
                    echo " b) BACK"
                    echo ""
                    RPG+=" b"
                    read_input_options "$RPG"
                    for OPT in ${OPTIONS[@]}; do
                        case "$OPT" in
                            1)
                                aur_package_install "ardentryst"
                                ;;
                            2)
                                aur_package_install "flare-rpg"
                                ;;
                            3)
                                package_install "freedroidrpg"
                                ;;
                            "b")
                                break
                                ;;
                            *)
                                invalid_option
                                ;;
                        esac
                    done
                elihw
                done
                #}}}
                OPT=8
                ;;
            9)
                #RACING {{{
                while [[ 1 ]]
                do
                    print_title "RACING"
                    echo " 1) $(menu_item "maniadrive") $AUR"
                    echo " 2) $(menu_item "death-rally") $AUR"
                    echo " 3) $(menu_item "stuntrally") $AUR"
                    echo " 4) $(menu_item "supertuxkart")"
                    echo " 5) $(menu_item "speed-dreams")"
                    echo ""
                    echo " b) BACK"
                    echo ""
                    RACING+=" b"
                    read_input_options "$RACING"
                    for OPT in ${OPTIONS[@]}; do
                        case "$OPT" in
                            1)
                                aur_package_install "maniadrive"
                                ;;
                            2)
                                aur_package_install "death-rally"
                                ;;
                            3)
                                aur_package_install "stuntrally"
                                ;;
                            4)
                                package_install "supertuxkart"
                                ;;
                            5)
                                package_install "speed-dreams"
                                ;;
                            "b")
                                break
                                ;;
                            *)
                                invalid_option
                                ;;
                        esac
                    done
                elihw
                done
                #}}}
                OPT=9
                ;;
            10)
                #SIMULATION {{{
                while [[ 1 ]]
                do
                    print_title "SIMULATION"
                    echo " 1) $(menu_item "simutrans")"
                    echo " 2) $(menu_item "corsix-th" "Theme Hospital") $AUR"
                    echo " 3) $(menu_item "openttd")"
                    echo ""
                    echo " b) BACK"
                    echo ""
                    SIMULATION+=" b"
                    read_input_options "$SIMULATION"
                    for OPT in ${OPTIONS[@]}; do
                        case "$OPT" in
                            1)
                                package_install "simutrans"
                                ;;
                            2)
                                aur_package_install "corsix-th"
                                ;;
                            3)
                                package_install "openttd"
                                ;;
                            "b")
                                break
                                ;;
                            *)
                                invalid_option
                                ;;
                        esac
                    done
                elihw
                done
                #}}}
                OPT=10
                ;;
            11)
                #STRATEGY {{{
                while [[ 1 ]]
                do
                    print_title "STRATEGY"
                    echo " 1) $(menu_item "0ad")"
                    echo " 2) $(menu_item "hedgewars")"
                    echo " 3) $(menu_item "megaglest")"
                    echo " 4) $(menu_item "warzone2100")"
                    echo " 5) $(menu_item "wesnoth")"
                    echo " 6) $(menu_item "zod") $AUR"
                    echo ""
                    echo " b) BACK"
                    echo ""
                    STRATEGY+=" b"
                    read_input_options "$STRATEGY"
                    for OPT in ${OPTIONS[@]}; do
                        case "$OPT" in
                            1)
                                package_install "0ad"
                                ;;
                            2)
                                package_install "hedgewars"
                                ;;
                            3)
                                package_install "megaglest"
                                ;;
                            4)
                                package_install "warzone2100"
                                ;;
                            5)
                                package_install "wesnoth"
                                ;;
                            6)
                                aur_package_install "commander-zod"
                                ;;
                            "b")
                                break
                                ;;
                            *)
                                invalid_option
                                ;;
                        esac
                    done
                elihw
                done
                #}}}
                OPT=11
                ;;
            "b")
                break
                ;;
            *)
                invalid_option
                ;;
        esac
    done
elihw
done
}
#}}}
#FONTS {{{
function install_fonts(){
while [[ 1 ]]
do
    print_title "FONTS - https://wiki.archlinux.org/index.php/Fonts"
    echo " 1) $(menu_item "ttf-dejavu")"
    echo " 2) $(menu_item "ttf-google-webfonts") $AUR"
    echo " 3) $(menu_item "ttf-kochi-substitute") (Japanese Support) $AUR"
    echo " 4) $(menu_item "ttf-liberation")"
    echo " 5) $(menu_item "ttf-ms-fonts") $AUR"
    echo " 6) $(menu_item "ttf-vista-fonts") $AUR"
    echo " 7) $(menu_item "ttf-mac-fonts") $AUR"
    echo ""
    echo " b) BACK"
    echo ""
    FONTS_OPTIONS+=" b"
    read_input_options "$FONTS_OPTIONS"
    for OPT in ${OPTIONS[@]}; do
        case "$OPT" in
            1)
                package_install "ttf-dejavu"
                ;;
            2)
                echo -e "\nWARNING: Install time can be > 20min"
                read_input_text "Are you sure you want to continue?" $GOOGLE_FONTS
                if [[ $OPTION == n ]]; then continue; fi
                pacman -Rdd --noconfirm ttf-droid
                pacman -Rdd --noconfirm ttf-roboto
                pacman -Rdd --noconfirm ttf-ubuntu-font-family
                aur_package_install "ttf-google-webfonts"
                ;;
            3)
                aur_package_install "ttf-kochi-substitute"
                ;;
            4)
                package_install "ttf-liberation"
                ;;
            5)
                aur_package_install "ttf-ms-fonts"
                ;;
            6)
                aur_package_install "ttf-vista-fonts"
                ;;
            7)
                aur_package_install "ttf-mac-fonts"
                ;;
            "b")
                break
                ;;
            *)
                invalid_option
                ;;
        esac
    done
elihw
done
}
#}}}
#FONTS CONFIGURATION {{{
function configure_fonts(){
    print_title "FONTS CONFIGURATION - https://wiki.archlinux.org/index.php/Font_Configuration"
    echo " 1) Ubuntu patched packages"
    echo " 2) Cleartype patched packages"
    echo " 3) Infinality patched packages"
    echo " 4) Reverting to unpatched packages"
    echo ""
    echo " b) BACK"
    echo ""
    read_input $FONTSCONFIG_OPTION
    case "$OPTION" in
        1)
            pacman -Rdd --noconfirm cairo fontconfig freetype2 libxft
            aur_package_install "fontconfig-ubuntu freetype2-ubuntu libxft-ubuntu cairo-ubuntu"
            CURRENT_STATUS=1
            ;;
        2)
            pacman -Rdd --noconfirm cairo fontconfig freetype2 libxft
            aur_package_install "freetype2-cleartype libxft-cleartype cairo-cleartype"
            CURRENT_STATUS=1
            ;;
        3)
            pacman -Rdd --noconfirm fontconfig freetype2
            aur_package_install "freetype2-infinality fontconfig-infinality"
            /etc/profile.d/infinality-settings.sh
            infctl=("infinality" "linux" "osx" "osx2" "win7" "winxp")
            PS3="$prompt1"
            echo ""
            select OPT in "${infctl[@]}"; do
                if contains_element "$OPT" "${infctl[@]}"; then
                    /etc/fonts/infinality/infctl.sh setstyle $OPT
                    break
                else
                    invalid_option
                fi
            done
            CURRENT_STATUS=1
            ;;
        4)
            pacman -S --asdeps cairo fontconfig freetype2 libxft
            CURRENT_STATUS=1
            ;;
        *)
            CURRENT_STATUS=0
            ;;
    esac
    sumary "Patched Fonts Configuration installation"
    pause_function
}
#}}}
#CLEAN ORPHAN PACKAGES {{{
    function clean_orphan_packages(){
    print_title "CLEAN ORPHAN PACKAGES"
    pacman -Rsc --noconfirm $(pacman -Qqdt)
    #pacman -Sc --noconfirm
    pacman-optimize
}
#}}}
#FINISH {{{
function finish(){
    print_title "WARNING: PACKAGES INSTALLED FROM AUR"
    print_warning "List of packages not officially supported that may kill your cat:"
    pause_function
    pacman -Qm | awk '{print $1}' > aur_pkglist.txt
    less aur_pkglist.txt
    print_title "INSTALL COMPLETED"
    echo -e "Thanks for using the Archlinux Ultimate Install script by helmuthdu\n"
    pause_function
    if [[ $LXDE -eq 1 ]]; then
        DM="lxdm"
    elif [[ $XFCE -eq 1 || $OPENBOX -eq 1 ]]; then
        DM="slim"
    elif [[ $KDE -eq 1 ]]; then
        DM="kdm"
    elif [[ $E17 -eq 1 ]]; then
        DM="elsa"
    else
        DM="gdm"
    fi
    [[ ! -n $DISPLAY ]] && start_daemon "$DM"
    exit 0
}
#}}}

#MAIN {{{
welcome
check_root
language_selector
system_upgrade
select_user
choose_aurhelper

while [[ 1 ]]
do
    print_title "ARCHLINUX ULTIMATE INSTALL - https://github.com/helmuthdu/aui"
    echo " 1) $(mainmenu_item $BASICSETUP "Basic Setup")"
    echo " 2) $(mainmenu_item $DESKTOPENVIRONMENT "Desktop Environment")"
    echo " 3) $(mainmenu_item $ACCESSORIES "Accessories Apps")"
    echo " 4) $(mainmenu_item $DEVELOPMENT "Development Apps")"
    echo " 5) $(mainmenu_item $OFFICE "Office Apps")"
    echo " 6) $(mainmenu_item $SYSTEM "System Apps")"
    echo " 7) $(mainmenu_item $GRAPHICS "Graphics Apps")"
    echo " 8) $(mainmenu_item $INTERNET "Internet Apps")"
    echo " 9) $(mainmenu_item $AUDIO "Audio Apps")"
    echo "10) $(mainmenu_item $VIDEO "Video Apps")"
    echo "11) $(mainmenu_item $GAMES "Games")"
    echo "12) $(mainmenu_item $LAMP "LAMP")"
    echo "13) $(mainmenu_item $FONTS "Fonts")"
    echo "14) $(mainmenu_item $FONTSCONFIG "Fonts Configuration")"
    echo "15) $(mainmenu_item $CLEANPACKAGES "Clean Orphan Packages")"
    echo ""
    echo " q) Quit"
    echo ""
    MAINMENU+=" q"
    read_input_options "$MAINMENU"
    for OPT in ${OPTIONS[@]}; do
        case "$OPT" in
            1)
                add_custom_repositories
                configure_pacman_package_signing
                install_reflector
                install_basic_setup
                install_tlp
                install_xorg
                install_video_cards
                install_cups
                install_additional_firmwares
                install_git_tor
                CURRENT_STATUS=1
                sumary "Basic setup installation"
                pause_function
                BASICSETUP=1
                ;;
            2)
                if [[ $BASICSETUP -eq 0 ]]; then
                    echo -e "\nWARNING: YOU MUST RUN THE BASIC SETUP FIRST"
                    read_input_text "Are you sure you want to continue?"
                    if [[ $OPTION == n ]]; then continue; fi
                fi
                install_desktop_environment
                install_nm_wicd
                DESKTOPENVIRONMENT=1
                ;;
            3)
                install_accessories_apps
                ACCESSORIES=1
                ;;
            4)
                install_development_apps
                DEVELOPMENT=1
                ;;
            5)
                install_office_apps
                OFFICE=1
                ;;
            6)
                install_system_apps
                SYSTEM=1
                ;;
            7)
                install_graphics_apps
                GRAPHICS=1
                ;;
            8)
                install_internet_apps
                INTERNET=1
                ;;
            9)
                install_audio_apps
                AUDIO=1
                ;;
            10)
                install_video_apps
                VIDEO=1
                ;;
            11)
                install_games
                GAMES=1
                ;;
            12)
                install_lamp
                LAMP=1
                ;;
            13)
                install_fonts
                FONTS=1
                ;;
            14)
                configure_fonts
                FONTSCONFIG=1
                ;;
            15)
                clean_orphan_packages
                CLEANPACKAGES=1
                ;;
            "q")
                finish
                ;;
            *)
                invalid_option
                ;;
        esac
    done
done
#}}}
